<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luhao&#39;s Blog</title>
  
  <subtitle>luhao wiki</subtitle>
  <link href="http://luhao.wiki/atom.xml" rel="self"/>
  
  <link href="http://luhao.wiki/"/>
  <updated>2024-03-01T05:33:17.404Z</updated>
  <id>http://luhao.wiki/</id>
  
  <author>
    <name>Luhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Graphics-2022】Texture 纹理</title>
    <link href="http://luhao.wiki/posts/2022-texture/"/>
    <id>http://luhao.wiki/posts/2022-texture/</id>
    <published>2023-12-10T13:54:10.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义">定义</h2><p>图形学中有两个与图片相关的概念，分别是 Image（贴图）和 Texture（纹理），可以这样区分它们：</p><ul><li>Image：内存意义上的图片，例如 <code>tga, png, jpg</code></li><li>Texture：GPU意义上的图片，例如 <code>RGBA8</code> 格式的一对像素组合</li></ul><p>因此 Texture 一定是以 GPU像素格式来申明的，并且需要规定 <code>Sampler</code> 的规则。</p><h2 id="Color-Space">Color Space</h2><p>参考阅读：</p><ul><li><a href="https://luhao.wiki/posts/rtr-5/#%E6%98%BE%E7%A4%BA%E7%BC%96%E7%A0%81">【RealtimeRendering】5. Shading Basic &gt; ColorSpace | Luhao’s Blog</a></li><li><a href="https://zhuanlan.zhihu.com/p/66558476">Gamma、Linear、sRGB 和Unity Color Space，你真懂了吗？ - 知乎</a></li></ul><h2 id="Texture-Mapping">Texture Mapping</h2><p>将贴图的坐标映射到模型表面，通常采用一种 $u, v$ 坐标的形式，取值为 $[0, 1]$ 的浮点数。<br><img src="../../images/Graphics2022-Texture_18326.png" alt=""><br>贴图一般都是规规矩矩的方形，但模型的表面却差异很大，这套映射关系是如何选择的？下面展示三种基本的 texture mapping：</p><ul><li>Planar：只考虑两个维度的<strong>平面映射</strong></li><li>Cubic：考虑三个维度的<strong>立方体映射</strong></li><li>Cylindrical：<strong>柱状映射</strong><br><img src="../../images/Graphics2022-Texture_45479.png" alt=""></li></ul><p>此时，一个<strong>从贴图到模型</strong>的完整映射流程是：<br><img src="../../images/Graphics2022-Texture_26581.png" alt=""></p><h3 id="Texture-Tiling">Texture Tiling</h3><p>上面讨论的是 uv 映射 最完美的情况（即 texture Sampler 每个采样点与 Image <strong>一一对应</strong>），然而实际应用中，这两者很难对上。</p><p><strong>Q：当采样点落在多个 Image 像素之间怎么办？</strong></p><ol><li><p>如果粗暴地选取最近的一个像素，那么会导致严重的走样，不可取！称为 <a href="https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation"><strong>Nearest-neighbor Filtering</strong></a></p></li><li><p>传统的方案是增加到四次采样，并在这四个像素之间作插值，称为 <a href="https://en.wikipedia.org/wiki/Bilinear_interpolation"><strong>Bilinear interpolation</strong></a><br><img src="../../images/Graphics2022-Texture_48684.png" alt=""></p></li><li><p>考虑到当图片与屏幕呈倾斜角度时，我们需要<strong>更多的采样点</strong>来铺满该区域！这是硬件层面实现的 <a href="https://en.wikipedia.org/wiki/Anisotropic_filtering"><strong>Anisotropic Filtering</strong></a>。其中 <code>4X AF</code> 表示需要多采样4倍的pixel；<code>16X AF</code> 同理<br><img src="../../images/anisotropic.png" alt=""></p></li></ol><hr><p>参考阅读：<a href="https://en.wikipedia.org/wiki/Texture_filtering">Texture filtering - Wikipedia</a><br>越多的采样数往往意味着性能开销更大，下面是各种方案的采样数消耗：</p><table><thead><tr><th style="text-align:center">Filering</th><th style="text-align:center">Samples</th></tr></thead><tbody><tr><td style="text-align:center">nearest-neighbor</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">bilinear</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">trilinear</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">AF 4X</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">AF 16X</td><td style="text-align:center">128</td></tr></tbody></table><h3 id="Texture-Tiling-2">Texture Tiling</h3><p>当你翻出一张陈年老照片（分辨率很低），想将它作为 4k 显示屏的壁纸时，问题就出现了：<strong>待采样的贴图不足以铺满整个屏幕</strong>。<br>此时就需要 <code>Texture Tiling</code>，即考虑怎么将贴图放大、堆叠，传统的做法有如下几种：</p><ul><li>下图忽略了 <code>Repeat</code> 模式<br><img src="../../images/Graphics2022-Texture_31282.png" alt=""></li></ul><h3 id="Interpolation">Interpolation</h3><p>考虑下面这种情形，我们需要将半张图片渲染到 （下左图）经过透视变换的区域内。而 Vertex Shading 阶段<strong>只会接受三个顶点（及其UV属性）</strong>，那么实际采样中应该如何确定区域内每个像素的 uv 取值呢？<br><img src="../../images/Graphics2022-Texture_47237.png" alt=""></p><p>显然这需要选取合适的插值方法！我们可以将这个问题规纳为一般情形（上右图）：</p><ul><li>已知三个顶点 $A, B, C$ 及其 $uv$ 属性</li><li>求三角形内任意顶点的 $uv$ 取值</li></ul><p>考虑最简单的线性插值方案：<br>$$<br>P(x, y) = \alpha A + \beta B + \gamma C \\<br>\alpha + \beta + \gamma = 1<br>$$<br>通常会获得如下的效果（下图中），显然是错误的。<br><img src="../../images/Graphics2022-Texture_12104.png" alt=""></p><p>上图的原因用一句话概括为：<strong>ViewSpace 的线性变换不等价于 ScreenSpace的线性变换。</strong><br>解决方案可阅读如下链接，暂时没理解公式：</p><ul><li><a href="https://lxjk.github.io/2017/06/10/Conversion-between-View-Space-Linear-and-Screen-Space-Linear.html">Conversion between View Space Linear and Screen Space Linear - Eric’s Blog</a></li><li><a href="https://www.comp.nus.edu.sg/~lowkl/publications/lowk_persp_interp_techrep.pdf">comp.nus.edu.sg/~lowkl/publications/lowk_persp_interp_techrep.pdf</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;图形学中有两个与图片相关的概念，分别是 Image（贴图）和 Texture（纹理），可以这样区分它们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image：内存意义上的图片，例如 &lt;code&gt;tga, png, jpg&lt;/code&gt;&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>【RealtimeRendering】5. Shading Basic</title>
    <link href="http://luhao.wiki/posts/rtr-5/"/>
    <id>http://luhao.wiki/posts/rtr-5/</id>
    <published>2023-12-07T16:02:09.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Pixel Shading</code> 阶段会决定每个像素最终的颜色和透明度，而决定这些颜色的公式，就是所谓的 <code>Shading Model</code></p></blockquote><h3 id="前言">前言</h3><p>这一部分其实更多是面对 TA 向的内容，掌握 Shading 基础，是各种 真实感渲染、卡通渲染… 的技术基础。虽然说大多商业引擎已经实现了非常少成熟的 PBR、NBR … 渲染框架，网上各种解决方案、优化技术也非常普遍，但是作为引擎（图形）开发程序，掌握这些基础的 Shading 知识仍然是非常必要的。</p><p>23年底时，曾面试 <code>Garena</code> 的图形引擎岗位，其中一个基础的问题没答完整：“请介绍 Phong Shading 的渲染公式”。这个经历提醒自己，一定要夯实基础，万丈高楼平地起，积沙成塔，只有底部足够扎实，才能爬得更高。</p><h2 id="Shading-Models">Shading Models</h2><p><code>RealTimeRendering</code> 作者选择将这个章节放在 <code>Textures</code> 纹理之前，我觉得是有失偏颇的。应该是先有纹理贴图，继而发现朴素的贴图缺少光照，表现非常虚假、平淡，继而引入一系列逐渐复杂的 Shading Models，其目的是 <strong>优化纹理在不同光照、视角、及法线下的视觉表现</strong>，只不过通过一些 <strong>计算调参</strong> 的手段罢了。</p><p>我们从 <strong>第一性原理</strong> 出发，先考虑最简单的原则：</p><h4 id="1">1.</h4><p>将采样的 <code>Texture</code> 简单粗暴的渲染出来，即 Shading Model 是：<br>$$C_{shading}=C_{tex}$$</p><p>参考 <a href="https://learnopengl.com/Getting-started/Camera">LearnOpenGL</a>的示例，得到的效果是<strong>明显不真实</strong>的：<br><img src="../../images/RTR-5-Shading_45121.png" alt=""></p><h4 id="2">2.</h4><p>为什么这个最简单的 Shading Model 渲染出的结果具有强烈的不真实感？想象真实世界的物体，最主要的特征是（太阳）光线带来的强烈视觉感，而这个视觉感与远近没有明显的关系，影响最大的因素是<strong>与光线的夹角</strong>。</p><p>如果难以理解，想象一束光照射在镜子上：</p><ul><li>当垂直入射时，是刺眼的白色（假设白光）</li><li>当（接近）水平入射时，是接近物体本身的颜色</li></ul><p>根据这个从物理世界观察到的规律，我们进一步优化 Shading Model：<br>$$<br>C_{Shading} =<br>\begin{cases}<br>C_{Light} &amp; if \ angle \geq N^\circ \\<br>C_{Tex} &amp; else\\<br>\end{cases}<br>$$<br>实际计算可以作一些插值，以太阳光照射水面为例，效果大概如下所示：<br><img src="../../images/RTR-5-Shading_19391.png" alt=""></p><h4 id="3-Gooch-Shading">3. Gooch Shading</h4><p>上面都是自己的瞎扯，这里尝试进入正题。<code>Gooch Shading</code> 是一个足够简单但经典的着色模型，它将光照颜色分为两部分区域：</p><ul><li>法线越接近光照：使用暖色调</li><li>法线越远离光照：使用冷色调</li></ul><p>具体公式如下，其中 <code>2(n*l)n - l</code> 是用来计算 <code>l</code> 相对于法线的反射向量，在 shader 可以使用 <code>reflect</code> 函数代替：<br><img src="../../images/RTR-5-Shading_53237.png" alt=""><br><img src="../../images/RTR-5-Shading_12110.png" alt=""><br><img src="../../images/RTR-5-Shading_52010.png" alt=""></p><div class="admonition note"><p class="admonition-title">如何区分 冷色调 和 暖色调？</p><ul><li><code>Cool</code>：偏蓝色的</li><li><code>Warm</code>：偏红色、橘色的</li></ul></div><hr><p>鉴于这个特征，<code>Gooch Shading</code> 又被称为 <code>Cool to Warm Shading</code>，实际效果如图所示：<br><img src="../../images/RTR-5-Shading_57107.png" alt=""></p><h4 id="4-Lambertian-Shading">4. Lambertian Shading</h4><p><a href="https://luhao.wiki/posts/shading/#font-color-750000-Lambertian-Reflection-%E2%AD%90-font">【GAMES101】Shading - Lambertian Shading | Luhao’s Blog</a></p><h4 id="5-Phong-Shading">5. Phong Shading</h4><p><a href="https://luhao.wiki/posts/shading/#font-color-750000-Blinn-Phong-Reflection-%E2%AD%90-font">【GAMES101】Shading - Phong Shading | Luhao’s Blog</a></p><h2 id="Light-Sources">Light Sources</h2><p>想要更好地描述光源对于物体表面渲染的影响，我们需要对光照这个行为进行定量地分析，这里列出 RTR 书中的分析思路：</p><h4 id="1-光-射线">1. 光 == 射线</h4><p>先将 光照对表面的影响，可视化为 <strong>一组平行的射线</strong>，同时射线的密度代表光照的强度。</p><ul><li>对于一个固定光源，不同射线的间距是固定的 $d$</li><li>垂直入射时，到达表面的长度是 $d$</li><li>倾斜入射时，到达表面的长度是 $d / cos\theta$</li><li>背面入射时（$\theta \geq 90$），到达表面的长度是 $0$</li></ul><p>因为 $n \cdot l = cos\theta$，所以（单位）光照的影响长度为 $d / (n \cdot l)$<br><img src="../../images/RTR-5-Shading_20955.png" alt=""></p><p>考虑到光照随面积的分布是均匀的，当单位光照影响的长度越大，其所受光的影响也就越弱。<br>假设 $d$ 是一个单位为1的值，那么（单位）光照的影响强度为 $max(0, n \cdot l)$</p><h4 id="2-有光-无光">2. 有光 &amp; 无光</h4><p>PS：这里有一点困惑，假设自然界完全无光的情况下，那么物体表现应该也是纯黑色？<br>本章将物体表面区分为两种状态：无光、有光的环境，而最终的呈现是这两种结果的组合。</p><ul><li>无光：$f_{unlit}$，阴影中死黑的部分</li><li>有光：$f_{lit}$，取决于光照公式的选取，如 <code>Lambert、Phong...</code></li><li>光源颜色：$c_{lit}$，通过缩放还可以表示光照的强度</li></ul><p>此时，对于一个光源的光照公式可以表示为：<br>$$C_{shading} = f_{unlit} + c_{light} f_{lit}$$<br>如果扩展到多个光源，那么有：<br>$$C_{shading} = f_{unlit} + (\sum_{i=1}^{n}c_{light} f_{lit})$$<br>结合前面 <code>Shading Model</code> 介绍的 <code>Gooch Shading</code> 模型，我们可以为上面公式套上：</p><ul><li>$f_{unlit} = (0, 0, 0)$</li><li>$f_{lit} = f_{Gooch\ Shading}$</li></ul><p>此时就得到一个完整的光照模型啦~ 但是考虑到自然界存在着无时无刻不发挥作用的间接光，这里将 $f_{unlit}$ 取为全死黑，显然是不科学的，后续可以继续改进。</p><h4 id="2-1-方向光">2.1 方向光</h4><p><code>Directional Light</code> 是一个最简单的光源模型，象征自然界的太阳。它具有如下特征：</p><ul><li>方向 $l$ 恒定，因此又称为 平行光</li><li>光源颜色（强度）$c_{light}$  固定，不考虑任何衰减（伟大的太阳！）</li><li>没有位置的概念<br><img src="../../images/RTR-5-Shading_14188.png" alt=""></li></ul><p>因此在 <code>shading</code> 中可以考虑如下定义：</p><pre><code class="language-c++">struct DirectionalLight {    vec3 direction;      vec3 ambient;    vec3 diffuse;    vec3 specular;};void main(){  vec3 lightDir = normalize(-light.direction);  [...]}</code></pre><h4 id="2-2-点光">2.2 点光</h4><p><code>Point Light</code> 象征自然界的电灯泡，它的特征如下：</p><ul><li>方向 $l$ 向所有方向均匀发射光线</li><li>强度 $c_{light}$ 随距离衰减</li><li>有明确的位置概念</li></ul><p>RTR 书中使用下图解释 <strong>强度随距离衰减</strong>。考虑到单位光线影响的范围，随距离 $r$ 的增大而平方增长，因此：光线强度与 $1 / r^{2}$ 成正比。<br>注意，这个衰减并不是因为 <strong>能量随传播的衰减</strong>。<br><img src="../../images/RTR-5-Shading_44438.png" alt=""></p><p>因此，对于<strong>距离为 $r$ 处的光源强度</strong>可以表示为：（这里选取了一个参考值 $c_{light_{0}}$，表示光源在距离为 $r_{0}$时的光照参数，你可以通过度量等方式定义它）<br>$$c_{light_{r}} = c_{light_{0}} (\frac{r_{0}}{r})^{2}$$<br>这个公式称为 <a href="https://en.wikipedia.org/wiki/Inverse-square_law">Inverse-square law - Wikipedia</a>，即平方反比定律，物理学中存在非常多类似的例子，例如：万有引力定律、库仑定律…<br>在实际的工程使用中，它存在一个非常明显的问题，即当 <strong>$r$ 无穷趋近于0时</strong>（或者干脆取值为0），那么光源强度会是一个趋向无穷大的取值，这显然是无法接受的。对此，商业引擎有几种优化手段：</p><ul><li><strong>Unreal：距离叠加一个极小的数，实际取值是 $1 cm$</strong><br>$$c_{light_r}=C_{light_0}{\frac{r_{0}^{2}}{r^{2}+\epsilon}}.$$</li><li><strong>CryEngine：限定 $r$ 的最小值</strong><br>$$c_{light_{r}}=c_{light_{0}} (\frac{r_{0}} {max(r,r_{m i n})})^{2}$$</li></ul><div class="admonition note"><p class="admonition-title">物理学解释</p><ul><li>从物理学角度解释，<code>CryEngine</code> 的做法更科学。因为$r_{min}$在物理中表示发光物体的物理半径，比它还小的距离，对应着光源内部的着色表面，这在现实中是不可能发生的。</li></ul></div><p>实际开发中，为了性能考虑，我们希望 <strong>光照强度在某个有限的距离处，能够乖乖地衰减到0</strong>，因此会引入一些距离衰减函数来实现这一目的，其中甚至包括指数衰减，这里不详细介绍。</p><p>另一方面，为了<strong>让点光的效果更贴近现实</strong>，<code>OGRE Engine</code> 引入一些复杂的衰减函数来实现点光，参考阅读：</p><ul><li><a href="https://wiki.ogre3d.org/tiki-index.php?page=-Point+Light+Attenuation">-Point Light Attenuation | Ogre Wiki</a></li></ul><h4 id="2-3-聚光灯">2.3 聚光灯</h4><p>TODO:  <code>SpotLight</code></p><div class="admonition note"><p class="admonition-title">多种光源对比</p><ul><li>从左到右依次为：平行光、点光（无衰减）、聚光灯（有衰减）</li><li><img src="../../images/RTR-5-Shading_47228.png" alt=""></li></ul></div><h2 id="Anti-Aliasing">Anti-Aliasing</h2><p>抗锯齿的部分，看 GAMES101 时有作总结，这里不详细展开。不过有机会还是希望实践落地 SMAA、TAA …</p><ul><li><a href="https://luhao.wiki/posts/games101-aa/">【GAMES101】Anti-Aliasing | Luhao’s Blog</a></li><li><a href="https://www.highperformancegraphics.org/wp-content/uploads/2017/Retrospective/HPG2017_Reshetov_MLAARetrospective.pdf">[HPG 2017] MLAA from 2009 to 2017.pdf</a></li></ul><h2 id="半透明">半透明</h2><p>TODO：这部分讨论的是，光线穿过半透明物体的效果。</p><h2 id="显示编码">显示编码</h2><p>推荐阅读：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/66558476">Gamma、Linear、sRGB 和Unity Color Space，你真懂了吗？ - 知乎</a></li><li><a href="https://gwb.tencent.com/community/detail/120396">伽马空间与线性空间详解-腾讯游戏学堂</a></li><li><a href="https://kinematicsoup.com/news/2016/6/15/gamma-and-linear-space-what-they-are-how-they-differ#:~:text=non%2Dlinear%20space-,Gamma%20Space,shades%20better%20than%20lighter%20shades.">Gamma and Linear Space - What They Are and How They Differ</a></li></ul><h4 id="Gamma-Space">Gamma Space</h4><p><code>Gamma Space</code> 将颜色输出为 2.2 次幂，所谓伽马矫正是指如下公式：<br>$$C_{gamma} = (C_{linear})^{2.2}$$<br>为什么会引入伽马矫正？一般有两个原因：</p><ul><li>传统 CRT 显示器的设计原因</li><li>人眼对暗部辨识度高于明部</li></ul><p>以第2点为例，我们可以理解为：如果在 0% 和 50% 明暗处分别增加 10% 的亮度，那么<strong>人眼对前者的感知更加明显</strong>，这也意味着人眼对暗处更敏感。换言之，我们应该给暗处更大的存储、展示细节。<br><img src="../../images/RTR-5-Shading_50654.png" alt=""></p><hr><p>如下图，中间是标准的线性空间，右侧是 <code>Gamma-2.2</code> 空间，可以这么理解：</p><ul><li>左一：给亮部更大精度</li><li>右一：给暗部更大精度</li></ul><p>显然<strong>右一更符合人眼的观感</strong>，这正解释了为什么要将图像转化到 Gamma 空间！另外，我们购买的显示器一般也是 Gamma2.2 空间（又称为 sRGB）。<br><img src="../../images/RTR-5-Shading_57381.png" alt=""></p><hr><p>虽然 Gamma Space 更符合人眼的观感，但是它不利于 Shading 的计算，因此一个正常的渲染流程是：</p><ul><li>png/jpg：sRGB</li><li>shading：linear</li><li>display：sRGB（取决于硬件，一般是 sRGB 空间）<br><img src="../../images/RTR-5-Shading_54553.png" alt=""></li></ul><div class="admonition note"><p class="admonition-title">sRGB</p><ul><li><code>sRGB</code> 又称为 Gamma-0.45空间，即会给亮部更多的精度和细节。</li><li>当 <code>sRGB</code> 叠加一次 Gamma矫正 之后，就会得到一个正确的 Linear空间。</li></ul></div><h2 id="参考资料">参考资料</h2><ul><li><a href="https://www.logiconsole.com/real-time-rendering-4/">Real-Time Rendering 4th Edition学习笔记(四) | Logiconsole</a></li><li><a href="https://ciel1012.github.io/2019/07/07/rtr5/">Shading Basics - 就决定是你了 | Ciel’s Blog</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Pixel Shading&lt;/code&gt; 阶段会决定每个像素最终的颜色和透明度，而决定这些颜色的公式，就是所谓的 &lt;code&gt;Shading Model&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/</summary>
      
    
    
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/"/>
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/RealtimeRendering/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【Graphics-2022】图形API</title>
    <link href="http://luhao.wiki/posts/18QJ9Y1/"/>
    <id>http://luhao.wiki/posts/18QJ9Y1/</id>
    <published>2023-12-05T16:46:13.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">推荐阅读：</p><ul><li><a href="https://v.netease.com/evideo/video_course/show?course_id=18956">2022图形引擎-内部资料</a></li></ul></div><h2 id="概要">概要</h2><p>为什么需要图形API？</p><ul><li>暴露图形硬件的功能（GPU），并抽象出高-&gt;低维度的接口</li><li>用作 realtime rendering</li></ul><p>图形API发展历史：（主要是15年左右诞生 Metal、DX12、Vulkan）</p><ul><li><img src="../../images/rtr-graphics-api.png" alt=""></li></ul><p>现代图形API的发展方向：</p><ul><li>降低 CPU 性能瓶颈</li><li>多线程</li><li>优越的开发能力</li></ul><p>从 High-Level -&gt; Low-Level 角度来看：</p><ul><li>High-Level：意味着封装层次更高，性能较差</li><li>Low-Level：以为这封装较低，学习成本陡峭<br><img src="../../images/2022-graphics-API_24124.png" alt=""></li></ul><p>整个完整的图形引擎调用栈：</p><h2 id=""><img src="../../images/2022-graphics-API_09984.png" alt=""></h2><h3 id="图形API-vs-GPU">图形API vs GPU</h3><ul><li>图形API = Resource Manager + Commnad Producer</li><li>GPU = Commnad Consumer + Execute async</li></ul><p>从 <strong>生产者消费者模型</strong> 理解：</p><ul><li>图形API：从CPU端 创建资源 + 产生一系列 DrawCalls</li><li>GPU：指令的消耗 和 异步执行。</li></ul><blockquote><p><em><strong>GPU  = Async Execute Engine</strong></em>  一个异步执行的引擎<br>CPU 永远领先 GPU 1~3 帧<br><img src="../../images/2022-graphics-API_24172.png" alt=""></p></blockquote><hr><h3 id="Single-Commnad">Single Commnad</h3><p>一个基本的 CPU 渲染指令，应该包含如下要素：</p><ul><li>Command ID</li><li>操作数（注意有大小限制，后面会说）</li><li>CPU地址（GPU可访问的）</li><li>GPU地址</li></ul><p><img src="../../images/2022-graphics-API_09197.png" alt=""></p><hr><div class="admonition warning"><p class="admonition-title">问题</p><ul><li><strong>如何向 Commnad 传递一波数据?</strong></li></ul></div><ul><li>Method 1：直接传递操作数 <code>(&lt;64 Bytes)</code>，一般只有特定的API支持这么做，例如 <a href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdPushConstants.html"><code>vkCmdPushConstants</code></a><ul><li><img src="../../images/2022-graphics-API_45028.png" alt=""></li></ul></li><li>Method 2：拷贝到显存（GPU可访问的），然后传地址进去。注意避免 CPU写 + GPU读 的情形发生<ul><li><img src="../../images/2022-graphics-API_13901.png" alt=""></li></ul></li><li>Method 3：在Method 2的基础上，通过 <code>Blit</code> 将数据拷到 GPU内存，然后传GPU地址<ul><li>如果 <code>Blit</code> 一次，但是 <code>Read</code> 多次，那么收益比较高</li><li><img src="../../images/2022-graphics-API_20940.png" alt=""></li></ul></li></ul><h2 id="API结构">API结构</h2><p>前面说过，图形API分为两大类：Resource Manager + Command Producer：<br><img src="../../images/2022-graphics-API_50546.png" alt=""></p><p>以具体的API为例：<br><img src="../../images/2022-graphics-API_20155.png" alt=""></p><h2 id="API-一帧的调用">API 一帧的调用</h2><ol><li>Create Resource<ul><li>Texture / VertexBuffer / IndexBuffer …</li></ul></li><li>Set RenderPass</li><li>Set PipelineState<ul><li>Shader / BlendState / DepthState</li></ul></li><li>Bind Shader Resources<ul><li>Uniform / Buffer …</li></ul></li><li>DrawCall</li><li>Present</li></ol><h2 id="1-Resources">1. Resources</h2><p>第一步是资源管理，对应 <code>Create Resources</code> 的部分。根据资源的类型还可以细分如下：<br><img src="../../images/2022-graphics-API_13785.png" alt=""></p><h3 id="Resource-Memory">Resource Memory</h3><p>上图框出来的部分，需要注意**内存的开销<em>j</em>（ Buffer、Image）。对于图形API中的内存分配方式，一共分为两种：</p><ul><li>自动分配：DX11/OpenGL/Metal</li><li>手动分配：DX12/Vulkan/Metal</li></ul><p>对于手动分配的方式，有一个好处是 <code>resouce aliasing</code>，多个资源可以共用一块内存（真节省呀！），参考阅读：</p><ul><li><a href="https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/resource_aliasing.html">Vulkan Memory Allocator: Resource aliasing (overlap)</a></li><li><a href="https://gpuopen-librariesandsdks.github.io/D3D12MemoryAllocator/html/resource_aliasing.html">Direct3D 12 Memory Allocator: Resource aliasing (overlap)</a></li></ul><hr><h3 id="内存架构">内存架构</h3><p><strong>对于PC端</strong>，CPU 和 GPU 都有独立的内存，有如下特点：</p><ul><li>GPU 内存传输快于 CPU  （主要是带宽高，数据bus设计原因）</li><li>GPU/CPU 之间传输很慢</li></ul><p><img src="../../images/2022-graphics-API_29146.png" alt=""><br><br></p><p><strong>对于移动端</strong>，CPU 和 GPU 共用一张内存，有如下特点：</p><ul><li>考虑到低功耗（带宽变小），内存传输非常慢</li><li>GPU 部分有 <code>Tiled Memory</code> 的架构优化</li></ul><p><img src="../../images/2022-graphics-API_38013.png" alt=""></p><hr><h3 id="Memory-Types">Memory Types</h3><p>图形API中有不同的内存类型，区分如下：</p><ul><li><code>Default</code>：默认是 GPU 内存，不支持 CPU访问<ul><li>大多数资源的选择：buffers、textures、rt</li></ul></li><li><code>Dynamic</code>：指 CPU只写、GPU只读 的内存<ul><li>需要CPU每帧更新的资源（ todo：举个栗子）</li></ul></li><li><code>Readback</code>：指 CPU只读、GPU只写 的内存（使用情况比较少）</li><li><code>Memoryless</code>：适用于 TBR 架构</li></ul><p><img src="../../images/2022-graphics-API_05483.png" alt=""></p><h2 id="2-Render-Pass">2. Render Pass</h2><p>对于 <code>Render Pass</code> 的定义：不切换 FrameBuffer 的连续 Drawcalls。<br><code>Render Pass</code> 的性能需要关注两个操作：</p><ul><li><code>Load Action</code>：注意 DontCare/Clear 是没有带宽开销的，只有 Load 需要注意</li><li><code>Store Action</code>：将 FrameBuffer 写回到 主存，开销大头</li></ul><h2 id="3-Pipeline-State">3. Pipeline State</h2><p>通俗说  <code>Pipeline State</code> 作用是控制渲染状态，现代API通常将所有状态打包为一个大的 <code>PSO</code> （Pipeline State Object）。<br>如下是 <code>DX11</code> 的示例，需要手动设置 Shaders、Blend、DS、Raster 等所有状态。<br><img src="../../images/2022-graphics-API_25420.png" alt=""></p><h2 id="Shader-Compilation">Shader Compilation</h2><ul><li><ol><li>将 shader source 编译成 跨平台的 bytecode/glsl</li></ol></li><li><ol start="2"><li>将 bytecode/glsl 编译成 machine code（ISA）</li></ol></li><li><ol start="3"><li>Patch the Shader (Todo)：例如为 Binning Pass 产生仅包含 pos 的 vertex buffer</li></ol></li></ul><p><img src="../../images/2022-graphics-API_46759.png" alt=""></p><hr><h3 id="重要点">重要点</h3><ul><li>Pipeline State 创建非常慢</li><li>Shader 直到 Pipeline State 创建完，才能明确所有属性</li><li>尽可能早地创建 <code>PSO</code></li></ul><h2 id="4-Shader-Resource-Binding">4. Shader Resource Binding</h2><p>这阶段是为了给 shader 设置参数，以 <code>DX11</code> 为例：</p><ul><li>每帧重复设置</li><li>逐个参数设置</li></ul><p><img src="../../images/2022-graphics-API_17849.png" alt=""></p><p>反思一下，<code>DX11</code> 的设置方式太落后了，作为现代API，可以分配一块GPU内存专门用于 shader 参数传递（核心思想是 cache）：</p><p><img src="../../images/2022-graphics-API_43538.png" alt=""></p><h2 id="5-Draw-Calls">5. Draw Calls</h2><p>核心是如下三个参数：<br><img src="../../images/2022-graphics-API_40089.png" alt=""></p><ul><li>Indexed：需要绘制的 vertex、index 的 下标</li><li>Instanced：一个 drawcall 绘制多个物体，CPU端 需要 buffer 存储不同的信息（如 vertex，pos）</li><li>Indirect：<code>GPU-driven rendering</code>，同样是一个 drawcall 绘制多个物体，区别于前者地方在于，是 GPU端 填充 buffer 信息</li></ul><h2 id="6-Swapchain">6. Swapchain</h2><p><img src="../../images/2022-graphics-API_36591.png" alt=""></p><p>Swapchain 会持有如下资源，呈现最终的画面（Presentation）需要如下步骤：</p><ol><li>从 Swanchain 取一张 image</li><li>rendering 整个渲染流程</li><li>设置到 composition（因为有多个窗口）</li></ol><p><img src="../../images/2022-graphics-API_06244.png" alt=""></p><div class="admonition warning"><p class="admonition-title">TODO</p><ul><li>SwapChain、Presentation 这几个部分没听懂</li></ul></div><h2 id="优化">优化</h2><p>应该同时对 GPU、CPU 进行 Profile，如果不是性能瓶颈，请不要 <strong>过度优化</strong>。</p><p>基本的优化手段：</p><ul><li>降低 DrawCalls：Instanced、Indirect</li><li>规划绘制顺序：eg. 通过 state、distance 等排序</li><li>降低 带宽：合图、mipmap …</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;推荐阅读：
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://v.netease.com/evideo/video_course/show?course_i</summary>
      
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【Graphics-2022】渲染管线</title>
    <link href="http://luhao.wiki/posts/2GFAABV/"/>
    <id>http://luhao.wiki/posts/2GFAABV/</id>
    <published>2023-12-04T17:31:13.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<p>IMR、TBR、Pipeline…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">推荐阅读：</p><ul><li><a href="https://v.netease.com/evideo/video_course/show?course_id=18829">2022图形引擎-内部资料</a></li><li><a href="https://www.cnblogs.com/timlly/p/15546797.html#1246-hidden-surface-removal">剖析虚幻渲染体系（12）- 移动端专题Part 2（GPU架构和机制） - 0向往0 - 博客园</a></li><li>Todo: 与 <a href="https://luhao.wiki/posts/gpu/">【硬件】GPU架构 | Luhao's Blog</a> 这篇文章合并</li></ul></div><div class="markmap-container" style="height:250px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;硬件架构&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<code>Discrete</code>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<code>Coupled</code>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;IMR&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;Warp&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;TBR&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Mali: Index-Driven Vertex Shading&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Adreno: Binning Pass&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;PowerVR: Hidden Sureface Removal&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Pipeline&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;Render Pass&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;Frame Graph&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Compute Pipeline&quot;}],&quot;p&quot;:{}}"></svg></div><h2 id="硬件架构">硬件架构</h2><p>如果仅从 CPU、GPU、Memory 三者的角度考虑硬件架构，那么可以分为如下两类：</p><ul><li>（左）<strong>分离式架构</strong>，CPU和GPU有各自独立的内存和 Cache，通过 <code>PCI-e</code> 总线通讯。其特点是：高带宽、高延迟，性能瓶颈是数据传输。主要应用于 PC 和 手机。</li><li>（右）<strong>耦合式架构</strong>，CPU和GPU共享内存和 Cache。主要应用于 PS4 等游戏主机。</li></ul><p><img src="../../images/2022-rendering-pipeline_35740.png" alt=""></p><h2 id="IMR">IMR</h2><p><code>Immediate Mode Rendering</code>，通常指 PC 端的GPU渲染架构，其特点是：所有渲染管线中的读写操作，都直接由 GPU(紫色) 和 显存(深灰色) 之间完成，如图所示：<br><img src="../../images/2022-rendering-pipeline_23750.png" alt=""></p><p>其中 ↑ 表示读取显存，如 Vertex 阶段需要读取 几何（顶点）信息，而 ↓ 表示写回显存，如 Visibility 测试阶段需要写 Depth-Buffer。这些会带来巨大的带宽开销，IMR结构通过引入 L1、L2 Cache 之类的结构来尝试优化这部分带宽。</p><div class="admonition warning"><p class="admonition-title">移动端</p><ul><li>由于 高带宽 导致的 高功耗，IMR架构对 移动端 的 <strong>性能</strong> 是致命打击！</li><li>因此 移动端 大都选择 性能友好 的TBR架构</li></ul></div><hr><p>如何理解 GPU 的 <strong>高度并行化</strong>?</p><ul><li>参考阅读: <a href="/posts/gpu/#GPU-%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2">##GPU 架构发展历史</a></li><li>假设 GPU 每个 core 一次只处理一个 vertex，（NVIDIA架构）每个 SM 中包含 32 个cores，那么就可以同时处理 32 个 vertex，这些统一称为一个 <code>Warp</code></li><li>因此 <strong>Warp</strong> 的数量直接决定 GPU 的性能<br><img src="../../images/2022-rendering-pipeline_25797.png" alt=""></li></ul><hr><ul><li><strong>问题</strong>：<code>Warp</code> 之间是可以并行执行的吗？为什么图示是并发执行呢？<br><img src="../../images/2022-rendering-pipeline_27939.png" alt=""></li></ul><hr><ul><li>光栅化阶段，最小单位是一个 <code>Quard</code>（即包含4个像素）。以下图为例，其中绿色表示通过光栅化，黄色表示因为 <code>Quard</code> 而被保留的像素。</li><li>之所以使用 <code>Quard</code> 的形式，是因为便于计算 <code>ddx, ddy</code>。这个在计算 mipmap 的时候有奇效。<br><img src="../../images/2022-rendering-pipeline_35771.png" alt=""></li></ul><h2 id="TBR">TBR</h2><p><code>Tiled Based Rendering</code>，一般用于移动端GPU（例如 Mali），通过引入 <code>Tiled Memory</code> 降低带宽的读写功耗。</p><ul><li>优化点：先写 <code>Tiled Meomry</code>，再实现 <code>Blend</code> …，最后再写入 <code>DDR</code></li><li>参考阅读：<a href="https://litmin.github.io/2019/08/31/%E8%AF%91-The-Mali-GPU-An-Abstract-Machine-Part-2-Tile-based-Rendering/">[译]The Mali GPU: An Abstract Machine, Part 2 - Tile-based Rendering | Litmin的笔记</a></li><li>参考阅读：<a href="https://www.cnblogs.com/timlly/p/15546797.html">剖析虚幻渲染体系（12）- 移动端专题Part 2（GPU架构和机制） - 0向往0 - 博客园</a></li></ul><p><img src="../../images/2022-rendering-pipeline_53347.png" alt=""></p><hr><p>很多及计算机技术，都是通过引入一个中间件，<code>TBR</code>架构就是典型的例子。</p><ul><li>面对一个巨大的汉堡，一口吞不下去（IMR带宽高）</li><li>尝试将汉堡咬成多个小口，慢慢吃下去（TBR低带宽）</li></ul><hr><h3 id="Index-Driven-Vertex-Shading-Mali">Index-Driven Vertex Shading (Mali)</h3><p><a href="https://www.cnblogs.com/timlly/p/15546797.html#12411-index-driven-vertex-shading"><strong>IDVS</strong></a> 是 Mali GPU 的优化技术，考虑到传统的 vertex shading，即使经过 50% backface culling（也可能是 frontface culling），顶点的写入数量也剩 50%：</p><p><img src="../../images/2022-rendering-pipeline_08888.png" alt=""></p><p><strong>优化关键点在于</strong>，既然有 50% 顶点是注定要被 Culling 掉的，那么为什么要写入内存呢?<br>因此 Mali GPU 将 Vertex Shading 细分为两个阶段，分别是：</p><ul><li><code>Position Shading</code>：位置着色，发生在 Culling 之前，只转换顶点位置，因此输入只有 pos</li><li><code>Varying Shading</code>：可变着色，发生在 Culling 之后，只处理通过 Culling 的顶点的其他信息、操作</li></ul><p>假设 顶点 Vertex 的分布是，按照 pos、npos 的比例为 <code>1:1</code>：（通常情况更为复杂，eg. position、uv、normal …）</p><ul><li>缺陷是：需要CPU将这些信息分开存储<br><img src="../../images/2022-rendering-pipeline_34173.png" alt=""></li></ul><p>那么 IDVS 技术起码节省 <strong>50% 比例的 npos</strong>：<br><img src="../../images/2022-rendering-pipeline_16452.png" alt=""></p><p>进一步分析，通常 <code>Varing shading</code> 开销一定是大于 <code>Position Shading</code>，所以 拆分两阶段，能够让 <code>Varing shading</code> 充分享受到 Culling 的收益。</p><hr><h3 id="Binning-Pass-Adreno">Binning Pass (Adreno)</h3><p>参照前文，既然某些 Vertex 压根不会参与最终的渲染，那么有没有可能，这些都不用写到内存呢？（节省掉 0.5 Vertex Write）。<br>Adreno 引入一个 Binning Pass 的技术，在 Vertex Shading 阶段（同样先是只处理 pos），将所有的 visibilty 写到内存中，避免了顶点信息的写入。</p><p><img src="../../images/2022-rendering-pipeline_37944.png" alt=""></p><hr><p>Adreno 基于 Binning Pass 的渲染架构如下图，继续悟一悟：</p><p><img src="../../images/2022-rendering-pipeline_13639.png" alt=""></p><hr><h3 id="Hidden-Sureface-Removal-PowerVR">Hidden Sureface Removal (PowerVR)</h3><p><a href="https://www.cnblogs.com/timlly/p/15546797.html#1246-hidden-surface-removal"><strong>HSR</strong></a> 可以直接理解为 隐藏表面的剔除，传统的 OverDraw 是通过 Early-Z 避免，而 HSR 可以无视绘制顺序避免 OverDraw。</p><ul><li>如下由远及近绘制时，不会对遮挡的像素进行任何剔除，但是 PowerVR 做到了！</li></ul><p><img src="../../images/2022-rendering-pipeline_45218.png" alt=""></p><hr><p>HSR 实际做法是，在光栅化之后，<strong>写入一个 Depth-Buffer(降分辨率) 到 Tiled Memory</strong>，在后续的深度测试中也会依据它进行一些 Culling。</p><p><img src="../../images/2022-rendering-pipeline_46152.png" alt=""></p><h2 id="RenderPass">RenderPass</h2><p>对于 RenderPass 的定义：对于渲染管线的一次完整执行（连续地往 FrameBuffer 绘制对象的一组行为），如下：</p><p><img src="../../images/2022-rendering-pipeline_10671.png" alt=""></p><hr><p>RenderPass 的组织形式对于性能影响非常大，如下绘制一个Scene（电视机中是另一个Scene的画面）：<br><img src="../../images/2022-rendering-pipeline_55447.png" alt=""></p><p>下图展示了两种绘制方式：</p><ul><li>左侧：3 Pass，先绘制音响，后从 FrameBuffer 切到另一个 RenderTarget，来绘制另一个Scene，接着再切回 FrameBuffer 绘制整个Scene</li><li>右侧：2 Pass，先绘制另一个Scene到某个RenderTarget上，然后切回 FrameBuffer，绘制音响和电视，并将之前的 RenderTarget 当做 Texture Load 过来即可</li></ul><p><img src="../../images/2022-rendering-pipeline_41030.png" alt=""></p><p>分析以上两者的绘制开销：</p><ul><li>左侧：3 x store，2 x load</li><li>右侧：2 x store，1 x load</li></ul><p>由于 <code>Load/Store</code> 操作依赖带宽的开销非常高，因此 2 Pass 的方案显然性能更加友好。</p><h2 id="Frame-Graph">Frame Graph</h2><p>为了优化 Render Pass 的绘制顺序，更好的配置 <code>Load/Store</code> 的关系，可以引入 <code>Frame Graph</code> 一种有向无环图：</p><ul><li>有利于渲染并行、排序</li><li>有利于性能优化，降低 Load/Store 开销</li></ul><p><img src="../../images/2022-rendering-pipeline_06607.png" alt=""></p><h2 id="Compute-Pipeline">Compute Pipeline</h2><p>Compute Pipeline 的意义：</p><ul><li>在多线程组（thread group）之间共享内存。eg. 在一个 <code>Quad</code> 内计算 <code>sum, agg ...</code></li><li>读写 Buffers（例如 FrameBuffer、顶点数组 …）</li></ul><p>如下是一个 DX12 的渲染管线示例：<br><img src="../../images/2022-rendering-pipeline_37432.png" alt=""><br><br><br><br><br><br><br><br></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IMR、TBR、Pipeline…&lt;/p&gt;</summary>
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>日志：2023年12月</title>
    <link href="http://luhao.wiki/posts/2023-12/"/>
    <id>http://luhao.wiki/posts/2023-12/</id>
    <published>2023-12-04T17:24:09.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bdb51053d99e2f462ae67d1ce2d789fc6419bfc2931878fdd9d55d607e487035">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475def1af0b6bc61f7912497bd2791ef1396a9bcf0f6940df039a86f945fe75789ec31640a75d317a8abe2cb024b5dba86bfd34e4bd9e09040b251abc3b0833849a256141b075696212f5ac257b95a02cb70c1fb6c1dfa0046c0c4e50ab7d1f131976105380b96af668fb462122068b4e163024b111dfb4e1f0aa6d1310bb266a940e5f9b2c00815b2e6c6d5c94f661147bf2459a3e427b075205c997af090859dcc0f6a2bc00983015e3974124a37d5bb1246404d8c761a8886603c25b1334d4f7ea42576e8e59e547705dba29592e2cc07c9622468e190523cc899663124a6fee22d9435faa3710d6d951e354c26503744daa3dc9b0a026e22639fbc17e6a82f8312dc213906656a56642d95a9fdfc114c85c8540fab525816f8958fd5b6f53fc3ef8119c6b4d6d470437fd6854f6edf1e1fd2c0667d781a5ca4b2eaa5b59d08cf6f503e6c1c1716df8cddbaa7077355b9c35f46447967fa3afcb8c5e35b4e8be3e75565d1a79a4648dfb95e597a6438ca9be1f00c1d2cb89bf9e31e6636d0b2cbd3b93991a6287036cdd3191edd7d8c0a4a0ad5645174358886f2809699484f27ef51d5750abddb669777bc9c2551ae9e1f8f702d5c768c891ef0f863fee9f04a8bfa74057c9c4726dd0dc296eeac2ee9abb448bde504c647aa4a6aa58adb988e016da96fcb237dafb64428b08d8e555e3ffcaa58d922ade78131e10c0268c50acf1b088cf0fbbb1244cf55393cb140bc82719b916667da06ea72f4acc93d1158429630cfd3f55eeab3bcdfdc1f04ad2a3582fd8caf885efc77037ffc2881207a72f5ce14a84a89420d71f2faac7a4d5c5951eea7857660e838551e953814f74ba86c1af6a32f10faf1f664cb9e71bc8cc70ab2f1f27b225ab4b49c3239e553b52eab6cb83c52af2e426e3bef0cb3e40f889303d05b7395082ef77df9914fa9488908bf9c53de603ff1bf4fade763ffac122df68870941919379609bdbc9496fef29ccf6be4a4ce63bd0f5f3776155c10bbbcbcb2912fabe4fb11a0114033af102435c18d2c90e2ae7c1900332e2e1febea5073592e62393b6838dda6f1259a55e4b96d38f3177c567fd15fe49dc6101deabc8902f620ed3934afc4101ba3938cd2fac1d50ad93bb14e59c7291fea9d4093e0b53eee165a0e95805046078351f84adc55f717d3c45cb5f411a8530ad2aa3fac0e7e585810114c4026c7f80cc0ea864ff027fe2680e0c395613d41e37723981d361ff6ee94b5b557bc27694b8bdd685d4ac7da7c10d9313e4fe0b527225ac4dfaa297c60eca2d9cc219803e87a778e67d34ef1babff9b90f64b1a2f83a0dae204e054dc09fe8c315e0d99c83f381c852e232bc133afd86f4405b475ffd98161bd72d86142779ae8ce14b7c62cb4b3c7b630b641752173e5264ac8881eaf6454aaf711a10151842f176a7c78bafe7459aeb3bb3a4c4eebca83c2f4f89f72c174edc64c6d203422546275db1892f94c8127f800f4c3703aaab1870f9b15ddae3d991242919c22650f7a5db341194fcede17fdcb103e474bfd85adaca0c500848d478807cd8d2dd2c03a52d955bb1178aa5cfc0ce09f850e8490e5e3557866d33e2fa0d9adcf8cca0d34330cbb825c8f80b82b0c3367e0aa2b0a70ff43d0a36070819d0ebf25ee0923df066f97616de4914f9c553fa7deb7a5749a9fecb8d38c3875f1a02ce323637d8c52d0efa2648a4afdc329c597d0606b5ecb668b451f7af43d75ea1301cc41347ac427683e6e741daffab57a269c6f955e551a02910b6f01f12b0198bdace5564b14bd93666a3a990410bd6b915552dc60f214bbc76fa227ec168fd67b291c884e2f91c4ccc7f57d2985ce42b45acfda732ac8b545760dd69743c833ea224484d87eee20d032b8125917289cc3aa06941fd4e8a0d1c51ae69d26c2ab94b9f832eb282ba49f14d2407d5d9e9ec73683bd45af6447e521d5f37ab0e0311c972a9f55bb4f0f9f136691edaadbde4364628cdeb85484b79c64d7b78f2739e20bfd6fca0d85ef8c6a53fdc1e9f431e40a932d7d5bd69aec16615845273ea5e32b841e334ef57d425bb34c8c419b04c8c8f72e84a3a27d7bd43d2d5af942daef994d655b7e65b7332fa77abc971ee34db4b0bf180c26c64ac576808300712580c105966b456805c45262ae40f12566c448bf154af8401710033cb9b63c26f1a017cdeaf8658bd9def6e1ebc7ca65b1b7a2cbb60faafd4dfc195983ab2eeab90cd9c3fd8fa2f3a506fda37682bb846543df3dea39200e8ae30bda3c2834571dcd7b2fbd1e7d3791f0aad045c052235a5df58ee4c151412e5b97ec760f77f907dbf203842f6b421e5a737f396ecfc85624bf58cc70aab2aee0acc18d35c46a8577d4b3efd239b2a868b413262d75b9d6aeffaf18c3fb02d1f97aa433e8f422e4ea77f3b3faba6b09e747f009520f39a44336b7c61e2b214b20931bfac09dd7034a281bd0a6f3a7694256cc4bef53343dd59785c3afff662a8f6bfd776f8d8ec265559d2cdfc1a1574ddd229d7a67001b87013d42db8b1ba73e4d641bfe8f3b37068716e172559cc5e4b98532a5bd2315e81c66a07b68a9a4ff0a2728c45d423dd33b3a03e2fddaa30edbfa838f0670e2ee9d181e3d086fd3afd4849523f71d8e4d188ed0f4bd2296dee768ed789c7728b0b5a0003c6e57363e9408c8c1d0ce64bf818cfaab5d9e42b855fc6083f018b0b7fb341b4c2f4f8c71dc2b9df04554703395b1a82e0dbf96cb415b9e617e2e23a12153f23b9797377c892c3b0104565ed2ebca1835fb7ffe5d9f69d3093b54b76255468f552b4fa247287efca8394604ae4c3e0e74e1d6932380d7d0dd17a82f3dae2c3bedba8cc3e88c50b8d32abcacdc2e64189b75715ee6ad50f856f8ca9d255137bfc61a396a3363702348656ed725020b758c5fbe07ea0898521e7d1fcd0073837cc960fd27122614a804638f0b0a384beaf270277e4a2416de67f6ca68aaa9996725b88e4b61e540c2a39f4cdfdf917002567c8133b08c1572c46245dcd86316192d298d4892f81d3d9fb11e69aa42eb68c5a1a37e0457c093885917f8f69fc438a754cce35ba84811c1721e0bce633ba9eb4007e7e0651dd8f925c5fdbbe13a21f44bcbb9c40089288a2d12c48480a1c8e21bfe3cf3699e1f1d2ebb39a90e22927f6c1dc87eab34fd85fde5c5cc2bcee76b2d70b870431c187c1ecb0cd4917ab291ae2bf0b890c676e52637065ef2cb2721f68223c8f350</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>【工具】Obsidian笔记</title>
    <link href="http://luhao.wiki/posts/obsidian/"/>
    <id>http://luhao.wiki/posts/obsidian/</id>
    <published>2023-12-02T09:36:00.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<p>构建 <code>hexo + obsidian</code> 工具链<span id="more"></span></p><div class="admonition note"><p class="admonition-title">诉求</p><ul><li>提高笔记效率：<a href="https://www.zhihu.com/question/384309878/answer/2713962647">什么是 Zettelkasten 卡片盒笔记法？ - 知乎</a></li><li>提高 hexo 开发效率：搭建 hexo + obsidian 环境</li><li>todo：还未掌握 obsidian 的核心功能</li></ul></div><h2 id="功能">功能</h2><p>汇总一些 obsidian 值得使用的功能和特性</p><table><thead><tr><th style="text-align:center">Features</th><th style="text-align:center">Hexo</th><th style="text-align:center">Obsidian</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">Adomination</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:left">不兼容</td></tr><tr><td style="text-align:center">Todo Task</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:left">有空实现下</td></tr></tbody></table><h3 id="示例">示例</h3><p><strong>Todo Task</strong></p><ul><li>[ ] 测试 todo 功能 <code>- [] xxx</code></li><li>[x] 测试 todo 功能 <code>- [] xxx</code> ✅ 2023-12-02</li></ul><h2 id="插件推荐">插件推荐</h2><p>核心介绍如下插件，对 hexo 有所帮助：</p><h3 id="1-Templater"><a href="https://silentvoid13.github.io/Templater/introduction.html">1. Templater</a></h3><p>通过自定义 <code>post.md</code> 模板，可以快速创建 hexo 文章。目前需要定义如下信息：</p><pre><code class="language-md">---title: xxxdate: &lt;% tp.file.creation_date() %&gt;abbrlink:toc: truethumbnail: /images/default.png---这是摘要&lt;!-- more --&gt;</code></pre><p>当通过 <code>Ctrl + N</code> 使用该模板新建文章时，就会生成默认的 <code>*.md</code></p><h2 id="插件开发">插件开发</h2><blockquote><p>官方的插件开发文档，但是很残缺：<br><a href="https://docs.obsidian.md/Plugins/Getting+started/Build+a+plugin">Build a plugin - Developer Documentation</a></p></blockquote><p><strong>具体步骤</strong></p><ul><li>先clone官方示例的插件, 在此基础上做开发</li></ul><pre><code class="language-shell">cd .obsidian/pluginsgit clone git@github.com:obsidianmd/obsidian-sample-plugin.git* 进入目录```shellcd obsidian-sample-pluginnpm installnpm run dev</code></pre><ul><li><p>此时重新打开 obsidian 工作区，新的插件会出现在设置中</p></li><li><p>如何发布? 通过 <code>npm run build</code> 生成必须文件，然后拷贝到插件目录即可：</p><ul><li><code>main.js</code></li><li><code>manifest.json</code></li><li><code>style.css</code></li></ul></li><li><p>如何调试?</p><ul><li><code>new Notice()</code>：弹窗信息</li><li><code>console.log()</code>：输入 <code>ctrl + shift + I</code> 打开debug窗口</li></ul></li><li><p>Reload?</p><ul><li><code>reload app without saving</code>：通过 <code>ctrl + p</code> 呼出</li></ul></li></ul><h2 id="自定义插件-Luhao’s-Attachment">自定义插件: Luhao’s Attachment</h2><p><strong>背景</strong></p><p>由于采用 <code>hexo + github.io</code> 的技术架构，文件结构为:</p><pre><code>* /posts/obsidian/index.html：名为 obsidian.md 的文章* /images/*.png：存图片</code></pre><p>因此在任意 <code>*.md</code> 中插入图片，需要采用如下格式：<br><code>![](../../images/*.png)</code></p><p>但尝试一圈 obsidian 插件后，发现不支持带 <code>../</code> 特殊字符的替换，因此决定自己动手改造。<br>为了避免重复造轮子，挑选了一个插件魔改：</p><ul><li><a href="https://github.com/593413198/obsidian-attachment-management">593413198/obsidian-attachment-management</a> (fork from <a href="https://github.com/trganda/obsidian-attachment-management">this</a>)</li></ul><p>主要修改如下：</p><ol><li>修改默认 setting，如将 attachPath（插入路j径） 写死为 <code>themes/pure/source/images</code>，将 attachFormat（插入名称） 写死为 <code>../../images/${notename}_${date}</code></li></ol><p>已经打包发布 <code>release</code> 版本，链接为：</p><ul><li><a href="https://github.com/593413198/obsidian-attachment-management/releases/tag/0.1">Release 0.1 · 593413198/obsidian-attachment-management · GitHub</a></li></ul><p>使用效果为（图为 <code>obsidian</code> 中截图）：</p><p><img src="../../images/Obsidian_46986.png" alt=""></p><br><br><br><br><br>]]></content>
    
    
    <summary type="html">&lt;p&gt;构建 &lt;code&gt;hexo + obsidian&lt;/code&gt; 工具链&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>【RealtimeRendering】3. GPU</title>
    <link href="http://luhao.wiki/posts/rtr-3/"/>
    <id>http://luhao.wiki/posts/rtr-3/</id>
    <published>2023-12-01T15:50:56.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章主要介绍 GPU 的硬件架构和管线，重点理解 <code>SIMT</code> 和 <code>Warp</code> 的概念，并结合实践理解 <code>VS &amp; PS</code></p></blockquote><p><strong>GPU硬件</strong></p><p>关于 GPU 的硬件架构，参考 <a href="/posts/gpu/">这篇文章</a>。</p><ul><li>Warp：GPU并行处理任务的硬件形式，一个warp通常包含 32 个线程。</li><li>SIMT：<code>Single-Instrucion Multiple-Threads</code>，多个线程执行相同的指令，高度并行化。</li></ul><p><strong>GPU管线</strong></p><p>下图是GPU的整条渲染管线，其中绿色表示可编程部分，蓝色表示固定部分，黄色是可配置、但无法编程。<br><img src="../../images/rtr-gpu-pipeline.png" alt=""></p><p>可以结合 renderdoc 的 pipeline 试图理解这一整个管线：<br><img src="../../images/rtr-renderdoc.png" alt=""></p><p>对于可编程的 shader 管线，虽然最终GPU硬件执行的是机器代码，但是多家厂商退出了适合编写的高级语言，例如：</p><ul><li>HLSL：DirectX High-level Shading Language</li><li>GLSL：OpenGL Shading Language</li></ul><p>通常 shader 会允许被离线编译和存储，这些被叫做中间语言：</p><ul><li>IL：Intermediate Language</li></ul><p><strong>图形API</strong></p><p>每次图形API调用时，shader阶段都会包含两种类型的输入：</p><ol><li>uniform input：指在一次 draw-call 中不会改变的常量（如投影矩阵、texture）</li><li>varying input：指在一次 draw-call 中会变化的变量（如顶点位置）</li></ol><p>图形API的发展也十分迅速，如下图所示：</p><ul><li>OpenGL 和 Vulkan 显著特点都是跨平台</li><li>Metal 是苹果与 2014 年为自家产品研发的低开销的图形API</li><li>OpenGL ES 是指转为移动设备研发的<br><img src="../../images/rtr-graphics-api.png" alt=""></li></ul><h3 id="Vertex-Shading">Vertex Shading</h3><p>VS 通常是可编程管线中的第一个阶段，前面有说过，它的输入就是一堆 mesh 的二维坐标（附加 color、normal 等信息），一般有如下用途：</p><ul><li>顶点动画：草、角色</li><li>地形高度：通过一张 height-map 模拟地形的高低起伏</li><li>程序化变形：模拟布料、水面的运动</li><li>粒子特效：创建一个粒子发射器</li><li>…</li></ul><h3 id="Pixel-Shading">Pixel Shading</h3><p>这阶段是基于像素颜色作一系列计算，其性能也与分辨率和Shader复杂度直接相关。</p><p><strong>MRT</strong><br>早期的GPU，仅支持将PS的结果输出到一张RT上面，这样的绘制效率是很低下的。<br>MRT（Multiple Render Target）技术的推出，<strong>支持在一个pass绘制对个对象（GBuffer）</strong>，这催生了 Deferred Shading 的诞生，这里不展开描述。</p><p><strong>ddx ddy</strong><br>硬件提供了像素求偏导数的接口，由于GPU并行处理像素点时，会将 2x2 个像素放到同一个Quard中，因此<a href="https://www.zhihu.com/question/329521044">计算偏导数</a>十分方便。<br>换言之，这三个像素的 <code>ddx ddy</code> 取值也是相同的。</p><ul><li>ddx(v) = 该像素点右边的v值 - 该像素点的v值</li><li>ddy(v) = 该像素点下面的v值 - 该像素点的v值</li></ul><p>推荐阅读 <a href="https://blog.csdn.net/u013746357/article/details/107975128">mipmap_level 的计算原理</a></p><h3 id="Compute-Shading">Compute Shading</h3><div class="admonition error"><p class="admonition-title">Compute Shaing 部分缺乏工层经验，后面来补空缺吧</p></div><p>DX11 引入了 CS技术，它充分利用GPU并行计算的特点，使其扩展到 深度学习、神经网络、量化计算 等复杂的计算领域，而不仅仅局限于图形学。</p><p>它的优势之一在于，可以访问任意GPU上的数据，具体有如下应用：</p><ul><li>粒子系统</li><li>Culling</li><li>景深等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本章主要介绍 GPU 的硬件架构和管线，重点理解 &lt;code&gt;SIMT&lt;/code&gt; 和 &lt;code&gt;Warp&lt;/code&gt; 的概念，并结合实践理解 &lt;code&gt;VS &amp;amp; PS&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/"/>
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/RealtimeRendering/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎岗要求汇总</title>
    <link href="http://luhao.wiki/posts/3K6XB0W/"/>
    <id>http://luhao.wiki/posts/3K6XB0W/</id>
    <published>2023-11-30T12:43:01.000Z</published>
    <updated>2024-03-01T05:33:17.400Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a57dda4b7b82ae17071efb24e494716da9c4a50fd3572560fb9a883a3cf48a5b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/"/>
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/3D-Engine/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Tracy Profiler</title>
    <link href="http://luhao.wiki/posts/tracy/"/>
    <id>http://luhao.wiki/posts/tracy/</id>
    <published>2023-11-28T07:53:41.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<p>性能<code>Profile</code>工具的使用、接入<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/wolfpld/tracy">Tracy Profiler</a></li><li><a href="https://github.com/wolfpld/tracy/releases/latest/download/tracy.pdf">官方 pdf 手册</a></li></ul></div><h3 id="Tracy">Tracy</h3><p><img src="https://raw.githubusercontent.com/wolfpld/tracy/master/doc/profiler.png" alt=""></p><hr><p>Tracy 是一款<strong>开源性能 Profiler 工具</strong>，它具有如下特征：</p><ul><li>支持纳秒级别精度</li><li>支持 CPU、GPU、内存、锁、线程切换 的采样</li><li>支持三方集成使用</li></ul><p>Tray 虽然作为插桩式的工具（手动插入标记段），但其对于原生程序的性能影响却可忽略不计 <strong>（约 2.25ns）</strong>，<br>因为它是基于汇编统计的时间戳，官方手册中 <code>1.7.1 Assembly analysis</code> 节展示了 x64 的汇编代码。</p><hr><h3 id="如何集成">如何集成</h3><p>官方推荐使用 <code>git submodule</code> 的方式集成 <code>tracy</code> 源码，但是又强制要求 <code>client &amp; server</code> 的版本一致，不然连接的时候会报错：<u class="error"><code>Incampatable Protocol</code></u>，因此还是手动下载了 <a href="https://github.com/wolfpld/tracy/releases"><em><strong>0.10 版本</strong></em></a> 的源码集成。</p><p><strong>Step 1. 配置CMake</strong></p><p>集成源码后，需要配置新的 <code>CMakeLists.txt</code>，可参照如下改动：</p><pre><code class="language-make"># 打开 TRAY_ENABLE 宏option(TRACY_ENABLE "" ON)# 添加子目录，注意 tracy/ 下需要包含一个 CMakeLists.txtadd_subdirectory(../misc/tracy ../tracy)# 将 tracy 库链接到引擎target_link_libraries(${PROJECT_NAME} Tracy::TracyClient)# 添加 include 头文件的目录target_include_directories(${PROJECT_NAME} PUBLIC     ../misc/tracy/public)</code></pre><p><strong>Step 2. 插入代码</strong></p><p>因为引擎是以帧为单位，所以需要使用 <code>FrameMark</code> 告诉 tracy 一帧的范围是什么。官方文档推荐将 其 调用处放在每帧渲染的结束，即紧随 <code>glSwapBuffers</code> 调用。</p><ul><li><code>FrameMark</code></li></ul><p>最常用的 Profile 函数是这俩，区别是后者可以定义 tracy 条目的颜色：</p><ul><li><code>ZoneScopedN(name)</code></li><li><code>ZoneScopedNC(name, color)</code></li></ul><p>可以通过 <code>ZoneText</code> 传递一些参数，例如 <code>shader uniform</code> 的名称，以观察哪一次调用开销大：</p><ul><li><code>ZoneText(name, size)</code></li></ul><p><strong>Step 3. 开始 Profile</strong></p><p>运行标的程序后，注意打开对应版本的 <code>tracy.exe</code>（<a href="https://github.com/wolfpld/tracy/releases">下载地址</a>），点击 <code>connect</code> 即可。<br>对于高版本的 tracy，下方（红框内）还罗列出可以 attach 的进程，非常贴心。</p><p><img src="../../images/tracy-start.png" alt=""></p><hr><p><strong>Profile 示例</strong></p><p>笔者实现一个 OpenGL Demo，发现 <code>Render</code> 部分的开销比较大，于是集成Tracy后增加了一些插装，最后定位到是一次 <code>glUniformMatrix4fv</code> 传递时的开销，如下图：</p><p><img src="../../images/tracy-demo.png" alt=""></p><p>最终定位到 <a href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGetUniformLocation.xhtml"><code>glGetUniformLocation</code></a>，它会在每帧查询 uniform 变量的位置，开销非常大，改成 缓存 或者 全局固定ubo 可以优化掉。</p><hr><h3 id="其他">其他</h3><ul><li>应用层可以对 <code>tracy.hpp</code> 再作一层封装，便于使用，参考 <a href="https://github.com/urho3d/urho3d/blob/e0ce107356b255bf2e24d94a41d00b512b9ce633/Source/Urho3D/Core/Profiler.h">urho3d profiler</a></li><li>tracy 对于 内存、图形API 的支持，网上文档和使用不多，有时间研究下</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;性能&lt;code&gt;Profile&lt;/code&gt;工具的使用、接入&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【RealtimeRendering】2. Graphics Rendering Pipeline</title>
    <link href="http://luhao.wiki/posts/rtr-2/"/>
    <id>http://luhao.wiki/posts/rtr-2/</id>
    <published>2023-11-25T15:21:06.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章介绍实时渲染中的一个核心观念：<strong><code>graphics rendering pipeline</code></strong>，它将图形渲染的整个过程，抽象为一条流水线。</p></blockquote><p>渲染管线的开发，有两条重要原则：</p><ul><li>各个阶段可以<strong>并行化</strong>，但有些会依赖上一个阶段的输出</li><li><strong>短板效应</strong>，性能总是受制于最慢的一个阶段</li></ul><p>本章还将渲染管线细分为四个阶段，后面会依次介绍：</p><ul><li>Application</li><li>Geometry Processing</li><li>Rasterization</li><li>Pixel Processing</li></ul><p><img src="../../images/rtr-pipeline.png" alt=""></p><p><img src="../../images/RealTimeRendering_51788.png" alt=""></p><hr><h3 id="1-Application">1. Application</h3><p>所有与渲染相关的CPU部分，都被统称为 <code>Application</code> 阶段，它的核心诉求是：<strong>计算出所有需要渲染的 <code>render primitive</code>（点、线、三角形）</strong>，并输入到GPU中，给下一个阶段执行。</p><p>重点学习如下领域：</p><ul><li>(CPU) Culling</li><li>Collision Detection</li><li>Multi-RenderThread</li></ul><hr><h3 id="2-Geometry-Processing">2. Geometry Processing</h3><p>这部分完全运行在GPU上，<strong>输入是CPU传入的 <code>Primitives</code>，输出是屏幕上的 <code>Pixel</code></strong>，它的功能较为繁重，因此被细分多个小环节。</p><p><img src="../../images/rtr-geometry-processing.png" alt=""></p><p><strong>2.1 Vertex Shading</strong></p><p>先明确CPU阶段最后传入的数据格式（参考 OpenGL VBO, VAO），它是渲染图形的所有顶点信息的列表。考虑到它们是基于 模型空间的，因此要<strong>通过 <code>MVP</code> 变换</strong>转化到统一的世界投影空间。</p><p>同时，顶点上还包含<strong>法线、颜色、UV</strong>等信息，<code>VS</code>中可以由这些信息进行一些廉价高效的着色计算（当然效果比较挫）。</p><p><strong>2.2 Clipping</strong></p><p>在经历过投影变换后，我们得到一个 (-1, -1, -1) ~ (1, 1, 1) 范围的标准立方体，出于性能和可见性考虑，所以超出这个范围的顶点都不应该渲染，即被裁剪掉。</p><p><strong>2.3 Screen Mapping</strong></p><p>这阶段的输入是经历 Clipping 之后的三维坐标，输出应该是二维坐标。<br><font color="#FF1E10"><strong>todo: 比较粗略，没搞懂具体做了什么</strong></font></p><p><img src="../../images/rtr-screen-mapping.png" alt=""></p><hr><h3 id="3-Rasterization-⭐">3. Rasterization ⭐</h3><p><a href="/posts/M5TXVE/#Pixels">【GAMES101】Rasterization</a></p><p>这阶段的核心，是将二维坐标，映射到屏幕坐标。</p><blockquote><p>假设有一台分辨率为 <code>1024 x 720</code> 的显示器，那么光栅化的作用就是，计算 1024x720 个数组的 rgba 取值。<br>这些 rgba 取值再传递给显示硬件，就是最终呈现的画面。</p></blockquote><p><img src="../../images/rtr-rasterization.png" alt=""></p><ul><li>(上图）左二阶段：<br>通过确定每个像素在对应的三角形内（<a href="/posts/M5TXVE/#%E9%97%AE%E9%A2%98%E5%BB%BA%E6%A8%A1">参考</a>），以决定其着色。<br>其中 <code>Triangle Traversal</code> 就是遍历所有的三角形，并对像素进行插值，其中学问很深不细究。</li></ul><hr><h3 id="4-Pixel-Processing">4. Pixel Processing</h3><ul><li>(上图）右二阶段：<br>即经典的 <code>Pixel Shading</code>，逐像素的着色计算，这里不详细展开</li></ul><p>这阶段所有的颜色信息，都存储在 <code>ColorBuffer</code> 的GPU内存上，通过 RenderDoc 抓帧可以查看其具体内容。</p><p><strong>visibility</strong><br>另外，<strong>更新可见性</strong> 也是这一阶段的重要任务。通过每次绘制时与 <code>Z-Buffer</code> 比较，即可以判断深度遮挡关系，这里是硬件支持的算法。<br>值得注意的是，<code>Z-Buffer</code>机制对于半透明的绘制很不友好，因此需要严格遵守 <strong>“先Opaque、后Transparent”</strong> 的绘制顺序。<br>而 <code>ColorBuffer</code> 的 Alpha通道，通常还支持用作 透明度测试，即 <code>AlphaTest</code>，也不详细展开。</p><p><strong>Stencil-Test</strong><br>通常还会将 <code>Z-Buffer</code>的其中8位用来实现 <code>Stencil-Buffer</code>，即所谓的 <strong>“模板测试”</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本章介绍实时渲染中的一个核心观念：&lt;strong&gt;&lt;code&gt;graphics rendering pipeline&lt;/code&gt;&lt;/strong&gt;，它将图形渲染的整个过程，抽象为一条流水线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;渲染管线的开</summary>
      
    
    
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/"/>
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/RealtimeRendering/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>RealtimeRendering 阅读计划</title>
    <link href="http://luhao.wiki/posts/rtr/"/>
    <id>http://luhao.wiki/posts/rtr/</id>
    <published>2023-11-25T15:15:40.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法论">方法论</h3><ul><li>建议阅读英文原版，遇到困难时借助：翻译软件、Chatgpt、毛星云的中译版</li><li>建议结合引擎源码 + 实践落地理解，不要纸上谈兵</li></ul><hr><table><thead><tr><th style="text-align:center">章节</th><th style="text-align:left">概要</th></tr></thead><tbody><tr><td style="text-align:center"><a href="/posts/rtr-2">Ch.2</a></td><td style="text-align:left">渲染管线概览：四阶段</td></tr><tr><td style="text-align:center"><a href="/posts/rtr-3">Ch.3</a></td><td style="text-align:left">GPU 硬件架构</td></tr><tr><td style="text-align:center">Ch.4</td><td style="text-align:left">Transform</td></tr><tr><td style="text-align:center"><a href="/posts/rtr-5">Ch.5</a></td><td style="text-align:left">Shading Model</td></tr><tr><td style="text-align:center">Ch.6</td><td style="text-align:left">Textures 纹理，<a href="/posts/2022-texture/">【Graphics-2022】Texture 纹理</a></td></tr></tbody></table><h3 id="资料汇总">资料汇总</h3><ul><li><a href="https://www.realtimerendering.com/">realtimerendering.com</a></li><li><a href="http://110.42.228.178/pdf/RTR4-EN.pdf">RTR4-EN</a>，<a href="http://110.42.228.178/pdf/RTR4-CN.pdf">RTR4-CN</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法论&quot;&gt;方法论&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建议阅读英文原版，遇到困难时借助：翻译软件、Chatgpt、毛星云的中译版&lt;/li&gt;
&lt;li&gt;建议结合引擎源码 + 实践落地理解，不要纸上谈兵&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
</summary>
      
    
    
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/"/>
    
    <category term="RealtimeRendering" scheme="http://luhao.wiki/categories/RealtimeRendering/RealtimeRendering/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>【源码】开源游戏引擎系列</title>
    <link href="http://luhao.wiki/posts/2ZE2VGG/"/>
    <id>http://luhao.wiki/posts/2ZE2VGG/</id>
    <published>2023-11-23T14:57:42.000Z</published>
    <updated>2024-03-01T05:33:17.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引擎汇总">引擎汇总</h2><ul><li>一些老引擎（如 KlayGE、AtomicEngine）不支持 VS2022 编译运行，需要额外修改</li><li>一些引擎（如 ogre）只能采用组件的形式嵌入，没法直接当成编辑器打开*</li></ul><table><thead><tr><th style="text-align:center">Engine</th><th style="text-align:left">特点</th><th style="text-align:center">Build&amp;Run</th><th style="text-align:center">编辑器</th><th style="text-align:center">Profiler</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/gongminmin/KlayGE">KlayGE</a></td><td style="text-align:left">编译失败了…</td><td style="text-align:center">×</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://github.com/urho3d/urho3d">urho3d</a></td><td style="text-align:left">代码风格，容易上手</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center">Tracy</td></tr><tr><td style="text-align:center"><a href="https://github.com/AtomicGameEngine/AtomicGameEngine">Atomic</a></td><td style="text-align:left">继承自urho3d，<code>C#</code>脚本</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://github.com/OGRECave/ogre">ogre</a></td><td style="text-align:left">功能庞大</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://github.com/bkaradzic/bgfx">bgfx</a></td><td style="text-align:left">图形API丰富，简洁</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center">Renderdoc</td></tr><tr><td style="text-align:center">o3de</td><td style="text-align:left">todo</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">godot</td><td style="text-align:left">todo</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">cocos-2dx</td><td style="text-align:left">todo</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h3 id="注意">注意</h3><ul><li>编译前请阅读 github 上的文档</li><li>如果 cmake.exe 不清楚传递哪些参数，请使用 <strong>cmake-gui</strong>（推荐）</li><li>因为某些引擎版本古老，编译脚本写死了如 <code>VS2015、VS2017</code> 等参数，这种情况比较坑爹得手动改</li></ul><h3 id="编译相关">编译相关</h3><ul><li><code>error c2001: newline in constant</code><br>这个报错一般是因为文本格式错误，可以用记事本重新保存为 <code>UTF-8 BOM</code></li></ul><h2 id="KlayGE">KlayGE</h2><p>截止23年还在更新维护，但是提交频率不高。<br>cmake遇到错误，手动解决后还是无法生成，已经放弃。</p><h2 id="urho3d">urho3d</h2><div class="admonition note"><p class="admonition-title">NOTE</p><ul><li>重点学习 urho3d 代码风格、项目结构</li></ul></div><p>截止23年1月已经放弃维护，且已改成俄语项目（?）。<br>抛开别的因素，代码风格和结构非常 nice，同时又不显得复杂，值得阅读学习。</p><p>支持两种图形API:</p><ul><li><code>OpenGL</code>: urho3d\Source\Urho3D\GraphicsAPI\OpenGL</li><li><code>DX11</code>: urho3d\Source\Urho3D\GraphicsAPI\Direct3D11</li></ul><p>项目结构分为 samples示例 和 源码部分，非常容易上手:</p><p><img src="../../images/urho3d-demo.png" alt=""></p><hr><p>代码、注释的风格也十分清爽，这里给俄罗斯人竖起大拇指o(￣▽￣)ｄ：</p><p>推荐一些模块的阅读：</p><ul><li>Graphics 渲染模块的API组织</li><li>xml、json 的模块化管理</li><li>IK、2D/3D 的物理模块</li></ul><h2 id="Atomic">Atomic</h2><div class="admonition note"><p class="admonition-title">NOTE</p><ul><li>这部分源码和 urho3d 重合度较高，建议一起对比阅读</li></ul></div><p>Atomic核心源码是继承的urho3d。<br>编译脚本只有 vs2015、vs2017，因此手动用 cmake-gui build 比较稳妥。</p><p>严格意义上说，Atomic 算完整的游戏引擎，拥有 runtime、编辑器、创建项目 等一整套流程，通过启动 <code>AtomicEditor</code> 可以打开一个项目管理器的窗口后，参考 Unity、UE 的实现。</p><hr><p><img src="../../images/atomic-project.png" alt=""></p><h2 id="ogre">ogre</h2><div class="admonition note"><p class="admonition-title">NOTE</p><ul><li>ogre 功能庞大，但是 GUI 真的丑</li></ul></div><ul><li>全称为: <code>Object-Oriented Graphics Rendering Engine</code>，即 面向对象的图形渲染引擎（不禁疑问，这年头还有不是OO的引擎?）</li><li>支持几乎所有图形API：<code>Direct3D 9 &amp; 11, Metal, Vulkan, OpenGL (incl. ES2, ES3 and OGL3+) and WebGL (Emscripten)</code></li><li>cmake 时遇到 <code>imgui-1.90</code> 缺失的报错，建议手动clone一份</li></ul><p>可以通过官方demo (<code>SampleBrower</code>) 进一步了解引擎实现:</p><hr><p><img src="../../images/ogre-demo.png" alt=""></p><h2 id="bgfx">bgfx</h2><p><code>bgfx</code> 是一个 <strong>跨平台的渲染框架</strong>，支持图形API如下：</p><ul><li>DX11，DX12</li><li>Metal</li><li>Vulkan</li><li>OpenGL 2.1，3.1+</li><li>OpenGL ES 2，3.1</li><li>WebGL 1.0，2.0</li></ul><p>值得注意的是，<code>bgfx</code> 实现一套<strong>跨平台的 Shader方案</strong>，后缀是 <code>.sc</code>，有空可以研究下。</p><hr><p><img src="../../images/bgfx-demo.png" alt=""></p><hr><p><code>README</code> 首页提供了很多基于 <code>bgfx</code> 实现的渲染 demo，可以结合工程代码理解：</p><ul><li>Cluster Lighting: <a href="https://github.com/pezcode/Cluster#cluster">https://github.com/pezcode/Cluster#cluster</a></li><li>Cubemap Tools: <a href="https://github.com/dariomanesku/cmftStudio">https://github.com/dariomanesku/cmftStudio</a></li></ul><p>推荐几篇 渲染分析 的文章：</p><ul><li><a href="https://www.cnblogs.com/crazylights/p/13555816.html">https://www.cnblogs.com/crazylights/p/13555816.html</a></li><li><a href="https://hinageshi01.github.io/2022/05/30/bgfx/">https://hinageshi01.github.io/2022/05/30/bgfx/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引擎汇总&quot;&gt;引擎汇总&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一些老引擎（如 KlayGE、AtomicEngine）不支持 VS2022 编译运行，需要额外修改&lt;/li&gt;
&lt;li&gt;一些引擎（如 ogre）只能采用组件的形式嵌入，没法直接当成编辑器打开*&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/"/>
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/3D-Engine/"/>
    
    
    <category term="Graphics" scheme="http://luhao.wiki/tags/Graphics/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【量化】OrderFlow 订单流策略研究</title>
    <link href="http://luhao.wiki/posts/orderflow/"/>
    <id>http://luhao.wiki/posts/orderflow/</id>
    <published>2023-11-04T17:59:51.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ccac50fc08d0dd2d4fc4a571702034a4c2d2400428c3fc8d0e47cb23b2617d98"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
  </entry>
  
  <entry>
    <title>日志：2023年11月</title>
    <link href="http://luhao.wiki/posts/2023-11/"/>
    <id>http://luhao.wiki/posts/2023-11/</id>
    <published>2023-11-01T18:05:53.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7cbf118ad0e6f9587ccc4672f478e6ceee77711202396680cd894c3e41e6629b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Nova Engine</title>
    <link href="http://luhao.wiki/posts/nova/"/>
    <id>http://luhao.wiki/posts/nova/</id>
    <published>2023-10-30T15:43:32.000Z</published>
    <updated>2024-03-01T05:33:17.400Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a639c100e59a6152cf17f7143698778ed7b4c81623282fa14a3a16f7a81cd308"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/"/>
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/3D-Engine/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【工具】LaTeX教程（附模板）</title>
    <link href="http://luhao.wiki/posts/2TXFVDF/"/>
    <id>http://luhao.wiki/posts/2TXFVDF/</id>
    <published>2023-10-24T15:05:19.000Z</published>
    <updated>2023-11-04T18:03:22.240Z</updated>
    
    <content type="html"><![CDATA[<p>Latex 对于学术党的作用是写论文，对于工作党的作用，那便是写简历了！<br>github 上有非常多的优秀简历 latex 模板，可以自己去搜，改起来非常容易。<br>本文简要记录 <strong>Latex 的安装、开发和发布流程</strong>。<br>github resume: <a href="https://github.com/593413198/Resume">https://github.com/593413198/Resume</a></p><h3 id="安装">安装</h3><p>只讨论 Windows 环境下的安装使用，Linux 实在很难搞定中文字体（你都没好用的图形界面用个der的Latex啊…）</p><p>下载下面的安装包，直接一路点到底（就像你小时候装盗版单机游戏那样…）</p><ul><li><a href="https://www.tug.org/texlive/windows.html#install">latex easy install</a></li></ul><h3 id="开发">开发</h3><p>Latex 每次编辑，依赖于<strong>重新编译</strong>生成可视化文件（如pdf），这是非常影响开发效率的（对比markdown）。<br>聪明的 VSCode 爱好者没有错过这样的机会，勤劳的他们开发出一款 <code>LaTeX Workshop</code> 的插件，真正做到了 <strong>所见即所得</strong>。</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop">LaTeX Workshop</a></li></ul><p>使用方式，在VSCode市场安装该插件后，将如下配置写入到 <code>setting.json</code>：</p><pre><code>{    "latex-workshop.synctex.afterBuild.enabled": true,    "latex-workshop.latex.autoBuild.run": "onSave",    "latex-workshop.view.pdf.viewer": "tab",}</code></pre><p>此时每次修改完 latex 文件，按下 <code>ctrl + s</code> 保存键后，VSCode会<strong>自动编译生成</strong>同名的pdf文件。<br>接着使用 <code>LaTeX Workshop: View LaTeX PDF file</code> 新开一个窗口预览 pdf 的实时修改即可！</p><h3 id="发布">发布</h3><ul><li><code>pdflatex ${filename}</code><br>其中 <code>$filename</code> 是 tex 的文件名（不需要输入后缀）</li></ul><h3 id="模板">模板</h3><p>附github上一些优秀的简历模板：</p><ul><li>中文简历：<a href="https://github.com/dyweb/awesome-resume-for-chinese">Awesome Resume for Chinese</a></li><li>英文简历：<a href="https://github.com/posquit0/Awesome-CV">Awesome-CV</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Latex 对于学术党的作用是写论文，对于工作党的作用，那便是写简历了！&lt;br&gt;
github 上有非常多的优秀简历 latex 模板，可以自己去搜，改起来非常容易。&lt;br&gt;
本文简要记录 &lt;strong&gt;Latex 的安装、开发和发布流程&lt;/strong&gt;。&lt;br&gt;
gi</summary>
      
    
    
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
    <category term="markdown" scheme="http://luhao.wiki/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>【SIGGRAPH23】Large Scale Terrain Rendering in Call of Duty</title>
    <link href="http://luhao.wiki/posts/siggraph-23-terrain-of-cod/"/>
    <id>http://luhao.wiki/posts/siggraph-23-terrain-of-cod/</id>
    <published>2023-10-19T16:55:34.000Z</published>
    <updated>2024-03-01T05:33:17.404Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../images/siggraph23-cod-ppt-demo.png" alt=""></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>这篇 SIGGRAPH 主要描述 COD 中的大规模地形渲染，并大量引用了之前GDC的技术分享</li><li>NETEASE WARNING: 已脱敏、与工作无关</li></ul></div><h3 id="技术参考">技术参考</h3><ul><li><a href="https://advances.realtimerendering.com/s2023/index.html#CODTerrain">SIGGRAPH 2023: Large Scale Terrain Rendering in Call of Duty</a></li><li><a href="https://research.activision.com/publications/2021/09/boots-on-the-ground--the-terrain-of-call-of-duty">GDC 2021: The Terrain of CoD</a></li><li><a href="https://www.gdcvault.com/play/1025480/Terrain-Rendering-in-Far-Cry">GDC 2018: Terrain Rendering in Far Cry 5</a></li><li><a href="https://www.gdcvault.com/play/1021761/Adaptive-Virtual-Texture-Rendering-in">GDC 2015: Adaptive Virtual Texture Rendering in Far Cry 4</a></li></ul><h3 id="大纲">大纲</h3><ul><li><a href="#why-new-terrain">Why New Terrain</a></li><li><a href="#render-process">Render Process</a></li><li><a href="#virtual-texture">Virtual Texture</a><ul><li><a href="#adaptive-virtual-texture">Adaptive Virtual Texture</a></li></ul></li><li><a href="#cliff-shading">Cliff Shading</a><ul><li><a href="#%E5%8E%9F%E5%9B%A0">原因</a></li><li><a href="#tri-planar-mapping">Tri-Planar Mapping</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li><li><a href="#stiching-fix">Stiching Fix</a><ul><li><a href="#1-lod%E4%B9%8B%E9%97%B4%E7%BC%9D%E9%9A%99">1. LOD之间缝隙</a></li><li><a href="#2-%E4%B8%8E%E6%A0%91%E6%9C%A8%E7%9F%B3%E5%A4%B4%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BC%9D%E9%9A%99">2. 与树木、石头之间的缝隙</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93%E5%B1%95%E6%9C%9B">总结、展望</a></li></ul><p>TODO:</p><ul><li>Displacement Decal</li><li>One Material Per Vertex (OMPV)</li></ul><h2 id="Why-New-Terrain">Why New Terrain</h2><p>作者阐述，之所需要开发新的地形系统，是因为传统的地形系统无法满足 现有的游戏需求（即策划不满意）。而传统地形主要有如下两个特征：</p><ol><li>地形范围小（如室内地面装饰）</li><li>依赖手动编辑（如魔兽争霸地图）</li></ol><p>作为对比，新的地形系统提出如下三个要求和挑战：</p><ol><li>Lerge-Scale（水平 + 垂直两个维度）   -&gt; 解决性能问题 runtime</li><li>画面多样性、细节保证                 -&gt; 解决表现问题 bugfix, tradeoff</li><li>依赖程序化生产                       -&gt; 解决工具问题 PCG</li></ol><p><img src="../../images/siggraph23-cod-new-terrain.png" alt=""></p><h2 id="Render-Process">Render Process</h2><p>作者展示如何在forward管线下绘制一个朴素的地形：</p><ul><li><p><strong>VS Input</strong><br>Vertex Shader 的输出就是一些平铺状的mesh顶点，它是没有任何高度信息的<br><img src="../../images/siggraph23-cod-vs-input.png" alt=""></p></li><li><p><strong>VS Offset</strong><br>这一步通过采样 Height Map 的高度信息，对 VS 顶点作出一些偏移，从而模拟出地形高度的形状<br><img src="../../images/siggraph23-cod-vs-offset.png" alt=""></p></li><li><p><strong>PS Shading</strong><br>Pixel Shader 阶段采样各种 Diffuse、Normal 贴图进行着色计算，为了弥补地形的细节，美术会叠加多层的 Layers 进行混合。<br>通常还会引入底层API支持的 <code>Texture Array</code> 技术进行优化<br><img src="../../images/siggraph23-cod-ps.png" alt=""></p></li><li><p><strong>Quad - Tree</strong><br>因为地形只考虑平面结构，所以想到利用四叉树进行遍历、剔除的优化。<br>以COD的地形为例，<code>10km x 10km</code>的总规模，<code>64m x 64m</code>的单个地块尺寸，所以约有2w多个地块，即使经过视锥剔除等优化手段，还是有成百上千个Chunks需要渲染，因此<strong>性能压力非常大</strong>！<br><img src="../../images/siggraph23-cod-quard-tree.png" alt=""></p></li></ul><h2 id="Virtual-Texture">Virtual Texture</h2><p><code>Virtual Texture</code> 是 GDC-2015 提出的一个技术，在弄懂改技术之前，先了解它在尝试解决什么问题。</p><p>继续上一节的结论，当开发大世界游戏逐渐兴起，每帧需要渲染的 Chunks 数量急剧增长，每个 Chunks 都拥有自己的贴图，<strong>这无疑给硬件内存带来巨大的挑战。</strong> 但是如何解决呢?</p><p>参考 <a href="/posts/virtual-memory/"><strong><code>Virtual Memory</code></strong></a> 的提出（即物理内存无法满足需求时，计算机抽象出了虚拟内存这样的中间层），计算机科学有一条非常重要的公理：<strong>即软件（或硬件）层面无法解决的问题，往往可以引入一个中间层。</strong></p><p>因此 <code>Virtal Texture</code> 基于此思想，它将所有贴图试做 内存 意义上的贴图，不会一次性加载到显存，而是使用的时候才会去加载。参考 GDC 的图片：</p><ul><li>Virutal Texture：内存（磁盘）意义上的贴图</li><li>Indirection Texture：寻址结构，类似与虚拟内存中的 页表</li><li>Physical Texture：实际采样的贴图</li></ul><p><img src="../../images/siggraph23-cod-vt.png" alt=""></p><hr><p>VT 建议单独列一篇文章讲解，可惜缺少实战落地经验，这里先贴一些有价值的参考链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/138484024">浅谈Virtual Texture - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/143709152">游戏引擎随笔 0x14：UE4 Runtime Virtual Texture 实现机制及源码解析 - 知乎</a></li></ul><hr><h3 id="Adaptive-Virtual-Texture">Adaptive Virtual Texture</h3><p>VT 技术有一个非常明显的缺陷：<strong>不论 Chunk 距离相机远近如何，但在 VT 中的像素比重却相同</strong>。</p><p>基于这点，AVT 提出了一种基于相机距离的 VT优化技术。其中红色框表示距离相机较近的 Chunk（像素也较高即 64k x 64k），而绿色框距离相机较远（像素分辨率也很低 16k x 16k）</p><p><img src="../../images/siggraph23-cod-avt.png" alt=""></p><h2 id="Cliff-Shading">Cliff Shading</h2><p>COD游戏中有大量山坡和悬崖的渲染（参考PUBG），因此开发人员在 GDC-18 中花费大量笔墨讲述了 <code>Cliff Shading</code>，Cliff又翻译成 <strong>悬崖、峭壁</strong>。</p><p>先看看 Cliff Shading 首要解决的是什么问题，当 Chunk 的贴图使用在平坦地面时，表现是完美。但因为山坡峭壁的y轴是非常陡峭的，因此会出现严重的拉伸 tiling 现象：</p><p><img src="../../images/siggraph23-cod-cliff-bug.png" alt=""></p><h3 id="原因">原因</h3><p>将世界坐标 (x, y, z) 映射到 贴图空间 (u, v)，首先考虑如下几种朴素的方式（即选取任意两个轴采样）：<br><img src="../../images/siggraph23-cod-cliff-xy.png" alt=""></p><p>因为丢失了某一个维度的信息，因此效果是不尽满意的。</p><h3 id="Tri-Planar-Mapping">Tri-Planar Mapping</h3><p>COD团队首先尝试了业界著名的 Tri-Planar Mapping 方案，即分别从 x, y, z 三个方向投影得到映射效果，然后根据法线与三个轴的夹角关系，将三个结果作融合得到最终的效果：</p><p><img src="../../images/siggraph23-cod-cliff-triplanar.png" alt=""></p><p><img src="../../images/siggraph23-cod-cliff-shader.png" alt=""></p><p>关于 <code>Tri-Planar Mapping</code> 参考阅读：</p><ul><li><a href="https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/">Triplanar Mapping</a></li><li><a href="https://gamedevelopment.tutsplus.com/use-tri-planar-texture-mapping-for-better-terrain--gamedev-13821a">Use Tri-Planar Texture Mapping for Better Terrain</a></li></ul><h3 id="问题">问题</h3><p>采用 <code>Tri-Planar Mapping</code> 方案后有明显的两个问题：</p><ol><li>性能非常差（采样数 x3)</li><li>远处 Texture Tiling 非常严重<br><img src="../../images/siggraph23-cod-cliff-tiling.png" alt=""></li></ol><p>性能问题先不考虑（因为是PC端游戏），开发团队后面主要描述如何解决山坡上的Tiling问题。<br>关于如何消除重复，最简单的方案就是<strong>引入随机数</strong>，这里采用了 Nividia 发表的一篇论文中的噪声函数，最终的做法是将 正常的Blending值 + 噪声值，</p><p><img src="../../images/siggraph23-cod-cliff-random.png" alt=""></p><p>观察黑色框中放大的部分，可以看到明显的噪声值，但是整体的效果反而更好的。引用GDC中非常经典的一句话：<strong>“单个像素是错误的，但是放到整体（平均下来）又是正确的”</strong></p><p><img src="../../images/siggraph23-cod-cliff-improve.png" alt=""></p><h2 id="Stiching-Fix">Stiching Fix</h2><p>新的地形系统采用将不同 Chunk 拼接渲染的方式，那么是否会导致渲染的缝隙、不连贯呢?<br>答案是：会的。</p><p><code>Stiching Fix</code> 重点讲述了COD如何修复地形渲染的一些缝隙，而 <code>Stiching</code> 的中文翻译便是缝隙。</p><h3 id="1-LOD之间缝隙">1. LOD之间缝隙</h3><p>如下图，不同LOD层级之间的 mesh data 差异较大，会出现同一个顶点在两边的信息不共享，这在渲染时会出现明显的错误。<strong>（具体是什么错误?）</strong><br><img src="../../images/siggraph23-cod-stiching-1.png" alt=""></p><p>修复的方式比较朴素，即 <strong>将边缘的顶点，移动到另一个lod最近的顶点</strong></p><ul><li><p>跨一层LOD的情形<br><img src="../../images/siggraph23-cod-stiching-2.png" alt=""></p></li><li><p>跨两层LOD的情形<br><img src="../../images/siggraph23-cod-stiching-3.png" alt=""></p></li></ul><h3 id="2-与树木、石头之间的缝隙">2. 与树木、石头之间的缝隙</h3><p>主要是做一个贴地处理，即根据 Chunk HeightMap 的高度信息，对树木、石头的高度在 Vertex Shader 中做一个高度插值处理，从而实现将它们 <strong>贴在地表</strong></p><p><img src="../../images/siggraph23-cod-stiching-4.png" alt=""></p><h2 id="总结、展望">总结、展望</h2><ul><li>地形系统主要细分两个方面：<ol><li>卷细节: pcg, texture layers …</li><li>卷性能: avt，gpu pipeline …</li></ol></li><li>从 GDC 2015、2018、2021 再到 Siggraph 的集大成者，任何一项技术的发展都需要持续迭代、集思广益</li><li>了解一个技术，和实现一个技术，两者相差 1~2 个数量级</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;../../images/siggraph23-cod-ppt-demo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
  </entry>
  
  <entry>
    <title>csv, hdf5, feather 数据性能对比</title>
    <link href="http://luhao.wiki/posts/data-perf/"/>
    <id>http://luhao.wiki/posts/data-perf/</id>
    <published>2023-10-12T14:06:39.000Z</published>
    <updated>2023-10-24T15:35:37.691Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="/posts/quant-data/">这篇blog</a> 介绍了金融相关的数据特性，它对于读写和存储性能有极高要求</li><li>本篇blog 会结合跑测数据，分析三种格式的性能</li></ul></div><h2 id="测试结论">测试结论</h2><p>结论放在最前面，测试数据见 <a href="#%E6%80%A7%E8%83%BD%E6%B1%87%E6%80%BB">文末</a></p><ul><li>数据量小，无脑使用 csv</li><li>数据量大，如果坚持 csv，请使用 <strong>zip</strong> 参数压缩（尽管这会降低读写速率）</li><li>百M级别以上数据，推荐使用 hdf5（而不是feather）<ul><li>性能强于 csv，<strong>读写快5~10倍</strong></li><li>hdf5 对于 Python/C++ 的API支持较好</li><li>feather 虽然性能更强，但限制更多 TODO</li></ul></li><li>切记！ <strong>此结论并不适用于所有类型的数据样本</strong>，最好自己针对性跑测，找到最适合自己数据的格式！<ul><li>对于期货 tick 数据（由于大量重复值），csv.zip 压缩比率能达到 15%，feather 能达到 30%</li></ul></li></ul><h2 id="基本介绍">基本介绍</h2><h3 id="csv"><a href="https://en.wikipedia.org/wiki/Comma-separated_values">csv</a></h3><p><code>csv</code> 全称是 <code>Comma-separated values</code>，<strong>即以逗号分隔的纯文本格式</strong>，常用后缀是 <code>*.csv</code>。<br>正因为其纯文本的性质，常见的编辑器（或者excel）都可以预览csv文件，所以它的优点是 <strong>简单直观</strong>。<br>然而事物都具有两面性，就像 <code>json</code> 存储格式，直观的代价往往是性能的损失。</p><h3 id="hdf5"><a href="https://en.wikipedia.org/wiki/Hierarchical_Data_Format">hdf5</a></h3><p>全称是 <code>Hierarchical Data Format version 5</code>，<strong>即高度层次化的二进制格式</strong>，常用后缀是 <code>*.h5</code>。<br>hdf5格式从设计之初，就是服务于大型数据。</p><h3 id="feather"><a href="https://arrow.apache.org/docs/python/feather.html">feather</a></h3><p>feather 是一种用于存储数据的 <strong>快速地、轻量级的二进制格式</strong>，常用后缀是 <code>*.fea</code>。<br>它早起就是为 Python(Pandas) 和 R 这两种编程语言所设计的。<br>目前广泛使用的其实是 feather v2 版本，它区别于早期的 v1 版本，这个不用过多了解。</p><h2 id="测试标准">测试标准</h2><p>主要从四个维度测量性能：</p><ul><li>1.写入速度</li><li>2.读取速度</li><li>3.磁盘大小</li><li>4.读取内存 (TODO)</li></ul><p>同时考虑到金融数据的存储格式，大多是 <code>int64</code>、<code>float64</code> 和 <code>timestamp</code>，因此也会分别考量 在这三种格式下的性能表现。</p><h3 id="压缩性">压缩性</h3><p>因为写入的csv文件较大，所以考虑 csv 结合各种压缩算法测试（压缩本质是牺牲性能、换取空间）。<br><code>df.to_csv('', compression)</code> 可以传入 <code>zip</code>、<code>gz</code>、<s><code>bz2</code></s> 等等参数。</p><h3 id="benchmark">benchmark</h3><p>使用 800w x 10 的DataFrame数据，取值范围是 0 ~ 16亿，格式是 <code>np.int64</code>。<br>数据大概长这样：</p><pre><code class="language-csv">0                d0                d1                d2                d3                d4                d5                d6                d70  5680658661046001  6886564689964211   777947290120004  6223515736992396  2823728071993317  8416657213663291  3500805963228465  10097481526053971  8952870328278778   306015862731108  9726241400443289  4237512935832667  2875425479333067  6311517969042662   878720088161354  87871182730650332  6858523177136352  1733196075769152   840572662722070  8438133907754012  6671944540650125  1147224095855703  1583106816125259  27980685687731413  2940819554234759  3142545317839947  4641209159206074  8194125756197731  4958881218032026  4405637321734842   500692399773906  35316179424621364  8149680042981168  6793238579260437  3891639455885689  3690167863144449  7552248224604567  6411717840330018  9556078695826276  4851668202438122......[8000000 rows x 9 columns]</code></pre><h3 id="测试源码">测试源码</h3><pre><code class="language-python">class DataPerf(object):    """ 数据 性能测试    """    @staticmethod    def get_random_datas(rows, cols):        """ 随机生成 rows行 x cols列 的DataFrame数据        :param rows: 行        :param cols: 列        """        data = np.random.randint(low=0, high=pow(10, 16), size=(rows, cols), dtype=np.int64)        df = pd.DataFrame(data, columns=[f'd{i}' for i in range(cols)])        return df        @staticmethod    def perf_write_speed():        """ 测试写入速度        """        df = DataPerf.get_random_datas(800 * 10000, 8)        PERF_TIME()        df.to_hdf('perf.h5', 'data')        PERF_TIME('hdf5')        df.to_feather('perf.fea')        PERF_TIME('fea')        df.to_csv('perf.csv')        PERF_TIME('csv')        df.to_csv('perf.csv.gz', compression='gzip')        PERF_TIME('csv (gz)')        df.to_csv('perf.csv.zip', compression='zip')        PERF_TIME('csv (zip)')        @staticmethod    def perf_read_speed():        """ 测试读取速度        """        PERF_TIME()        d1 = pd.read_csv('perf.csv')        PERF_TIME('csv')        d2 = pd.read_csv('perf.csv.gz', compression='gzip')        PERF_TIME('csv (gz)')        d3 = pd.read_csv('perf.csv.zip', compression='zip')        PERF_TIME('csv (zip)')        d4 = pd.read_hdf('perf.h5')        PERF_TIME('hdf5')        d5 = pd.read_feather('perf.fea')        PERF_TIME('fea')if __name__ == '__main__':    dp = DataPerf()    dp.perf_write_speed()    dp.perf_read_speed()</code></pre><h2 id="测试数据">测试数据</h2><h3 id="1-写入速度">1. 写入速度</h3><p>注意：因为 追加、覆盖 等模式会影响性能，所以重复测试前，记得删除已写入的数据。</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">write time (s)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">33.5</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">135</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">128</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">1.8</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">1.3</td></tr></tbody></table><h3 id="2-读取速度">2. 读取速度</h3><p>测试接口，全部选择 <code>pandas read_***</code> 系列，会全部转化为 DataFrame 格式。</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">read time (s)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">10.8</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">15.0</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">14.1</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">4.2</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">2.0</td></tr></tbody></table><h3 id="3-磁盘大小">3. 磁盘大小</h3><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">file size (GB)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">1.10</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">0.53 (48%)</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">0.53 (48%)</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">0.55 (50%)</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">0.49 (44%)</td></tr></tbody></table><h2 id="性能汇总">性能汇总</h2><ul><li>以下统计的是 <strong>相对得分</strong>，数值越高说明性能越好</li></ul><iframe src="/html/data-perf-echart.html" 替换这里的html="" height="600" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/posts/quant-data/&quot;&gt;这篇blog&lt;/a&gt; 介绍了金融相关的数据特性，它对于读写和存储性能有极高要</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【量化】爬虫获取东财数据</title>
    <link href="http://luhao.wiki/posts/spider-easymoney/"/>
    <id>http://luhao.wiki/posts/spider-easymoney/</id>
    <published>2023-10-05T14:40:04.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>这部分主要讨论<strong>基本面数据</strong>，获取<strong>行情数据</strong>看<a href="http://localhost:4000/posts/quant-data/#%E6%95%B0%E6%8D%AE%E6%8F%90%E4%BE%9B%E5%95%86">这篇文章</a></li><li>详细的爬取标准文档见这篇：<a href="/posts/cores/datasource/#Eastmoney">cores/datasource</a></li><li><strong>NOTE</strong>: <a href="https://akshare.xyz/index.html"><strong>akshare</strong></a> 已收录所有内容，不要重复造轮子啦</li></ul></div><div class="markmap-container" style="height:190px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;<a href=\&quot;#爬虫基础\&quot;>爬虫基础</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#爬取规则\&quot;>爬取规则(东财)</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;功能实现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#功能实现\&quot;>源码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#处理json\&quot;>处理json</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#数据存储\&quot;>数据存储</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#数据应用\&quot;>数据应用</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#示例一：寻找-“A股大鳄”\&quot;>示例一：寻找“A股大鳄”</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#示例二：财报公布后股价走向\&quot;>示例二：财报公布后股价走向</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><hr><h3 id="爬虫基础">爬虫基础</h3><p>本章要爬取的东方财富，数据结构非常简单，在爬虫领域中属于入门级别，使用 <code>request</code> 库即可。<br>下面代码示例，爬取 贵州茅台<code>600519</code> 的一些基础操盘信息：</p><pre><code class="language-py">import requestsimport jsonurl = 'https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/PageAjax?code=%s'res = requests.get(url % 'SH600519') # 贵州茅台info = json.loads(res.text) # dict</code></pre><h3 id="爬取规则">爬取规则</h3><p>东方财富的数据（<a href="https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/Index">示例链接</a>）主要有两个特点：</p><ul><li>优点：链接条理清晰，便于爬取</li><li>缺点：采用拼音缩写的命名，贼坑（例如 <code>yjbg</code> 表示<code>研究报告</code>）…</li></ul><hr><p>先分析信息页的基本结构，<strong>第一层级</strong>是下图红框部分，<strong>东财将它分为十六个板块</strong>。<br>我们会挑选需要的数据板块来爬取。</p><p><img src="../../images/eastmoney-head.png" alt=""></p><hr><p>以 <strong>股东研究</strong> 为例，<strong>内部还会细分为多个第二层级</strong>，例如：</p><ul><li>股东人数：每隔一段时间公布股东数量</li><li>十大股东：前十大持股的对象，包含增减比例</li><li>机构持仓：有哪些公募、私募基金的持仓</li><li>…</li></ul><p><img src="../../images/eastmoney-partners.png" alt=""></p><hr><h3 id="功能实现">功能实现</h3><p>源码: <a href="https://github.com/593413198/Alpha-Bet/blob/master/cores/datasource/Eastmoney.py"><em>cores/datasource/Eastmoney.py</em></a></p><p>先实现一个基础的爬取指定 url + code 的函数：</p><pre><code class="language-py">def crawl_base(self,                code,                url,                fields):    """ 根据指定规则爬取    :param code: 股票代码，如SH600519 (str)    :param fields: 爬取的键值，映射到中文 (dict)    :param url: 爬取的链接，股票代码用%s代替 (str)    """    url = url % code    res = requests.get(url)    info = json.loads(res.text)    info = { fields[k] : v for k, v in info.items() if k in fields}    return info</code></pre><p>后面依次实现爬取不同模块的函数，并选取有价值的字段 …</p><ul><li>操盘必读 板块</li><li>股东研究 板块</li><li>其他略 …</li></ul><pre><code class="language-py">def _crawl_cpbd(self, code):    """ 【操盘必读】    需要字段如下：        √ tszb: 特殊指标        √ ssbk: 所属板块        √ zxzbhq: 最新指标    https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/Index?type=soft&amp;code=SH600519#    """    fields = {        'tszb'  : '特殊指标',        'ssbk'  : '所属板块',        'zxzbhq': '最新指标',    }    url = 'https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/PageAjax?code=%s'    return self.crawl_base(code, url, fields)def _crawl_partner(self, code):    """ 【股东研究】    需要字段如下：        √ gdrs: 股东人数，通常股东数越少，代表股价越集中，则更容易上涨        √ sdgd: 十大股东，包含持股数和变动比例            sdltgd: 十大流通股东            jgcc: 机构持仓            jjcg: 基金持股    https://emweb.securities.eastmoney.com/PC_HSF10/ShareholderResearch/Index?type=soft&amp;code=SH600519#    """    fields = {        'gdrs' : '股东人数',        'sdgd' : '十大股东',    }    url = 'https://emweb.securities.eastmoney.com/PC_HSF10/ShareholderResearch/PageAjax?code=%s'    return self.crawl_base(code, url, fields)# 其他省略 ...</code></pre><hr><h3 id="处理json">处理json</h3><p>写入 <code>json</code> 文件时，需要注意中文编码问题，下面是一个万能模板：</p><pre><code class="language-py">with open(json_path, 'w', encoding='utf8') as f:    # infos是要写入的 dict    content = json.dumps(infos, ensure_ascii=False, indent=4)    f.write(content)</code></pre><h3 id="数据存储">数据存储</h3><p>结合多进程爬取五千多只股票池，注意处理空数据、网络错误等情形，最后分别以 <code>json</code> 格式存储在本地。</p><p><img src="../../images/eastmoney-json.png" alt=""></p><hr><h3 id="数据应用">数据应用</h3><p>量化金融追求一个实用注意，那么获取这些数据究竟有什么用途?<br>除了常见的<strong>用作策略因子</strong>外，下面展示几个与众不同的用法：</p><h3 id="示例一：寻找-“A股大鳄”">示例一：寻找 “A股大鳄”</h3><p>股票市场的股权拥有者，一般有两种，要么是个人，要么是企业/地方政府/国家。</p><p>下面我们尝试统计 5000 多支股票的十大股东（从东财爬取的数据），然后稍作拟合，再按照持有数值（也可以是持有公司数量）排名，便得到如下图表（绘图来自 pyecharts）:</p><blockquote><ol><li>带 <strong>香港结算</strong> 字样的主体(及HKSCC)，一般香港/外国投资者通过港交所购买的股份，即所谓的 “北向资金”</li><li>实际持仓最多的是 <strong>中国财政部</strong>，他基本持有了各大银行的股份</li><li>其他排名高的主体，基本分布在 <strong>石油、保险、电信、证券</strong> 等国有行业</li></ol></blockquote><iframe src="/html/sort_by_amout.html" 替换这里的html="" height="500" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe><hr><p>看这些国有巨头的数据没啥意思，下面尝试筛选个人持股的排名。（筛选条件很简单，长度 <code>&lt;=3</code> 的便当做个人）</p><p>排名第一的大哥叫 <strong>魏巍</strong>（竟然是28家上市公司的前十大股东…），冲浪查一下，发现他位列 <strong>牛散F4</strong> 之一。<br>而排名第二的 <strong>徐开东</strong>，也是A股赫赫有名的个人投资者，跪了！<br>靠一己之力的买买买，坐拥如此多的上市公司（虽然只是前十股份），其艰难程度可想而知！</p><iframe src="/html/sort_by_num_personal.html" 替换这里的html="" height="500" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe><hr><h3 id="示例二：财报公布后股价走向">示例二：财报公布后股价走向</h3><p><font color="#FF1E10"><strong>TODO</strong></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;这部分主要讨论&lt;strong&gt;基本面数据&lt;/strong&gt;，获取&lt;strong&gt;行情数据&lt;/strong&gt;看&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
  </entry>
  
  <entry>
    <title>日志：2023年10月</title>
    <link href="http://luhao.wiki/posts/2023-10/"/>
    <id>http://luhao.wiki/posts/2023-10/</id>
    <published>2023-10-03T12:39:50.000Z</published>
    <updated>2024-03-01T05:33:17.408Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="70633d927d709480bbed1900c6022d41ab8aac0dc51eaccd23f7c75881c20b45"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
</feed>
