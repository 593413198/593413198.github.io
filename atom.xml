<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luhao&#39;s Blog</title>
  
  <subtitle>luhao wiki</subtitle>
  <link href="http://luhao.wiki/atom.xml" rel="self"/>
  
  <link href="http://luhao.wiki/"/>
  <updated>2023-09-17T16:44:18.073Z</updated>
  <id>http://luhao.wiki/</id>
  
  <author>
    <name>Luhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>余华：《活着》《兄弟》</title>
    <link href="http://luhao.wiki/posts/3THQ4Z4/"/>
    <id>http://luhao.wiki/posts/3THQ4Z4/</id>
    <published>2023-09-15T14:10:00.000Z</published>
    <updated>2023-09-17T16:44:18.073Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://weread.qq.com/web/bookDetail/33332bf05cbba0333b1efb4">微信读书：《活着》</a><br><a href="https://weread.qq.com/web/bookDetail/b0f32f805cbba2b0f901ea8">微信读书：《兄弟》</a></p><h2 id="《活着》">《活着》</h2><ul><li><p>生活是属于每个人自己的感受，不属于任何别人的看法。</p></li><li><p>少年去游荡，中年想掘藏，老年做和尚。</p></li><li><p>人只要活得高兴，就不怕穷。 人只要想吃东西，就不怕死。</p></li><li><p>“活着” 二字的力量，不是来自于呐喊，也不是来自于进攻，而是忍受。去忍受生命赋予我们的责任，与忍受现实给予我们的幸福和苦难、无聊和平庸。</p></li></ul><h2 id="《兄弟》">《兄弟》</h2><ul><li><p>命里只有八斗米，走遍天下不满升。 （但是不闯一闯，怎么知道命里有多少米呢？）</p></li><li><p>余华×俞敏洪：夏夜聊《兄弟》(<a href="https://yuhua.zjnu.edu.cn/2022/0728/c15625a400328/page.htm">https://yuhua.zjnu.edu.cn/2022/0728/c15625a400328/page.htm</a>)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://weread.qq.com/web/bookDetail/33332bf05cbba0333b1efb4&quot;&gt;微信读书：《活着》&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://weread.qq.com/web/bookDetail/b0</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://luhao.wiki/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="读书笔记" scheme="http://luhao.wiki/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>日志：2023年9月</title>
    <link href="http://luhao.wiki/posts/2023/9/"/>
    <id>http://luhao.wiki/posts/2023/9/</id>
    <published>2023-08-31T16:40:43.000Z</published>
    <updated>2023-09-25T08:59:16.853Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e8293470485c0c941fcbd9c1d7ff5369368d222b8a8cf7cc14a9ce6ef1933c7d">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475de0b1305a637ea913974dff7410a14ed4dbbb40a5278eb14bbac34e59e12a284c7a294ab69a495d47e11e78ad50feb1070a468302317925759b63d81d1a890d91bb247f88a2922744d34b0dccccece2ea7b156e500c0039cfd827310258914cf02387296f49579859a12f70fb57cd977715e1ca1b1112940a77027561bd780b009109248827f8e97ec2911245c920aedcc5d48d26bb2f66bd27f1017821c9d87156f0b49232b8072560a009c211f86fa6a194cc2622b2cba72ac6698f89d296dcf3eee40bd70751aae4131fa27988ac98d62cedc384a3906e413d1597eb3664f0ce57b9ea1687b89fc4ac10eae195409aa65809f684977bfd7eb9abfa28a071468030257f04935b0f072cd6ed66f78f313834509c962312bba6aaeef4945329b8fad423fb789e287c824623247fe806998177d40305dfd9b797c6bdd9c4bedcaa51ff9f4ccbfeda82d86d89704764bc277962f4cca2db4a559b6128051ee5b7100b9f827da94215a14be4c292e648a05053db49db947e3216162ee39591a7bb663c8dc4e4def91a45da6cef9200360a70f04e85457b36549e3394fc7930ef1317369effc38e8e3ad2e13693389b9ce2fdb27dae17dffeacc95266288397f5aa170b4c53d03ba77a5da9ff0c9037744d3500c9c170eb4cd44e249dc4e6d6d18dfb2c2ccee12ac13af8e97f481eaf1e886821fea3ba4b71eef2ccb5010b2dd465853b7f01615ee71cc8ff85fd4ecf2c74046b1efd2e3382b9e3f5ce784fb6cc2cb5b7ce7216cfdcb07ca3ab5180f88544818a91fdf274d6566c009b29d32ec5824bb6de82cf5a39501ffd1d5cfc2769067b24094f524d1f20b5ec9548bbce977b1c1d9309eaa19bac741541a6eb71bb3b156e3ed2cf1396c3ec97cff7d8a621873febd72ea728f10f7eec00c262c35943eccccb6fde14c648e57af8430a8f41901dcbe5caeb2e7891d3ead52c9947a94350d16c22bfbaa8b4bd5bf337b9ba2a575258b7d72adb23975cb24f1154f52ad94e6258049bd2ae1125038250f153782e3588a78b910d3bd4ab9dd9cf73131604ac1d99590349e25c55e528825180d840b0892c310ea2a973dada97fb9fbbeb9a2b221221dedfee26b1c3ee1dfb5d27f2fce0d8299778508985d23a80ef9b04a3f7a1ea11d8bdab87542ba74a62ca9cf2315d536108f156375013d08e41f8fc12e982d11f5964f3891e1f9d4b3759948b5a8784a58f1b7dceccb3062b888e0a86c926c5594be9a64f1d5769d7a7aa77a26ee098bbf15662222a5f97cf82c8f2bde78f7d5c5cac594a9695ab6be239cdbeb2db362fe2d44dfe8461631e978076f93ce1a7f0c8be7b7a31ce2f8a7833895288eda22e63db206fb847a090f9986b995db27c51c05022475b20d09f3ab3ac88232819c1dc602e7f64e0c00b1e1753e0a13f6aec0ad1819062ee66a40e6b036ee3993cf7f3d100488bb0a16af29d4d9586ece78294a772c2b7147675980408c0bf2683c3a3d974bfa7e81e36a379c9ab197934ff49eb04bf6c0bd0338f6167ad44985e3d0a9e1daa22bbb91960763bff13516b4c599b0979de97726852433e249019210bbaf6116e6aaaf7fe707edfe1a2f880e2b345cec4aaa94941e27e73b8136721d2f2e9c44f923bf1336d04b192afb2343b06a0299d92bd580f15fffac92950baf65a52d7059c51c2a233757fec45bb9edebbf9d6b9cad2d4613ef32b000ee59e5d38f8b68eefded832f883087485c192d50cbab3ab0afa986c00cab62e5397b669999972fe108ab74152ea76ffd695354c69eb230b1ea6cd46f3f19cd271b32ad3cd7ebf38cdc99ca94f82ff7e2ca3f3e815f9a2327996c45890a60449b88ed4e82134144ba1e04b1ce64fd81d390bc6fd924ad4cca50edaf13482bf3b61640f14b28029d3b7265f7449caa37c204f31328a517aa1f730fb0b3964589ff14a85516c22aac4306e747164a86a803ccb64c623031f12b24358969b05d0a7423dc694cdb21681f2ce34a04bcefff35ed9a2ed576adb71b4084aa9da0b56f9c1d39224cfafc12e0047b4a7a9ed4e7e3587c9c9650032481b8cc7ae18b8b2ec4c8a0fc42165a02cdd13e68a92fbcfdd432d5bd7c67ff14ffdd342ad5fde5ac55e0f8593b9806579b836557b8829739f87f28b2336801772e641d9933049cb2a676523843ecb928696d0e3a8f362da32d8304049f9962d63a2c67ff0cfe36344df8c30419b81c7fbe489b4cb7fc5e8bc84013e1fd65bcbe5eddaff18cfb0f6bd4af0ea07003ef31d9b5983bd672dbb8136b6140063b92e706f8babcf8099f4bdc4507ca75d5f9707cd8f5da82cd2c0ede7b0f75d6a7564e91bce6eeef9991a93e6e470cd2dd575f9d732871f88ef305c4a2361e89f8ebaf77d65c90c6c9a2883cba073dcfa29ac0b8c2eb09d4a370d1aa3d4bbcecb1916bb05dbd100144e0f75a6be0dd0b0f6eb1cc789b87ca18724436f6ec85572b344bb05901ba62cb34363f3fc7a8c4b8f47c417b7cdd9f387ba597ab08ba4b04f62c1af7cb59d98d512e3983c62565c4220a7cbd309b4bdc426362647b841ca9fad83869f07dea24469d01f2be36c79254e76f3f54085982a214d3b7cf5a1b6aab9011aaa0b48dfe03184f0f23f0422293b5113d7a818fde6ea6c7414a8621cdd811f5461cd6291b073be33b65c659cf2ae0eed99e22d9436ba125f2caac37b0f50bf83c288fe74c444437fc1f6dcd3b01b5e63ce707ccb9886663a3193fe23b92e8c1210010622b30ad98ac09939da4fb684cfbae08143c013776416fd03767741010562591f4f9492998513f66c1019b548ecebd1307775b40f5182d46f6638e672228f2403c65ad22715d95038071dde0e09b7724d92b1e701d1a02ea43f0c47d71584c0e081a46bcde9e2259d5ad8f9b90312e334e513ad8e5616a71fe03b4089b3fde5a3bada0979d56525a71f7eeee68c69250785d966765e887518fe0e2b080358fcadef3d3a11be510a3464db193c11010ee645ef04e7a87446c577020b12c9776019296321400510d013d36f862a79e0c3c5225a1b0043846a8f7701ede180b93187b2467ec312d3c383e02a3571ec6fedc9a5bced511ed9bde576c808cde47ae6acf013705c7d87b4f55cf1c9b34521fd6ae476157211409cf224941f3f990475a9d4af2877eca433f7741816ad7828b2543d85ff34087698dea8f72898f4e80175eae6ad1bc318cea3b67d0c5bb37aebac449fcfca2781fd70c669794a7e233807d4896622655d5ae7deee8208a9399d1cac3c3802fa6aff086786c5c23af17115a56e5c4970fa7a1a21fdc6ea450e59522c8a2e44be5150a85ef4ecc2a75542a3c7b6ec1ae5c5329b25e5f3ee1ed503cf71d14457b26f4eb0c758c38698fe6d3e978cd00de33c565d366fcaeae58f042ed3b299181fdf449e9f4bacfa60656aa6cea92d90b2386947185c2efcbdd117baa9c2fa1483a136d80916b58c331067311ff75415fc57fd6e57f716904fa86ecd4d08c8380704f41c1ca16222b24ea1968b43e52f52bd45490c4691cc41f3e77d2b646629947b8e2faf5dc0c769e658fe66dbe69580565165cc1a7f8f5092c59abddf8c40f506f87038c616f5d675354045b26c4a2727dbe95175f463e2c0b4fcdfa1829d43ce684258b4be8530f45d535df22361b34771caad9a52d95cc7496b621aba2e5606515893955191b74a9783b41b3d4e2f9cb95a173cb04538f02e533b8d3894457fd15c651f53fdae6dcac04e69b9e7537d210cb676b1739453490a50d24b4681ea1f7dfed3f98d6fd560494eee2563a58b1bec54dbf7dd37ddf11dbcc08dc7b6c51c9295edefeec61329a941275945869ef0823be97eed93fa183f8e651514877849654538ca95d468c9d2ecaf3a89cce47f2a6ae435f88028976503599101c1cd8c03f5e4cc824611725e2ca587ea43a1803694647bc99ae502e22249f3e56ab65ee8b057d0e2900fdd0bb085ca937eadc7044fe8004207c355297fe6d1547903af7d1c0e1d75efb380ad607a3aecfad5183dec68af632198f584c6f1d19bc736e4453f19b96a88070037c7ef0b4d7a544909c3dcde8484ed0d8b1ebb842497894b0d68a9e95e0e393724644f11214da4caf8e60aad4f877858d1b66d0adfa9ca7a702fb53050f2da0de2634ee293db47f30d08181cfc1df5aff88a7551cd77cbb63d112b98a163e2335624d08c4e5036c82724e61409b657938a680d8a90c5737d9a87899f6c29cfc73ca27a862db9335d931424669b2b7f5240d84efa3998b12c3934d01079994bdcaefdbfa0962916cb242f9e3dd76059f5d608e77ef0bb343bd4506195a8bde3ebba36171fb05411f1e449f772b86398fc42aac158ab47e5f77d29e67a743ed47117188ae2d5d2db0236657416961b3dc14e273a2e95660033fd1acab3e73c21e80a2bf2c89cededb304df5b2a099d59832770d399ede72cb8401c81fb5356c2bc8b15db179673c2f08befac2ba2ce1d57382643d54ff4afb0c698184348ae87a54d0f169c707398edcfbb901ceb0c2feeac8fb2c701940fe9f77d9433d311faa75b67c7e824a89cf32fe4be7fc437e6199ab9c8804daed98beedd74868fab118358db01e39be1641238e0ecd21d7eee1120cb6e46982e56b5cfb41c67ac107d603355ba18b10a8f072337dd9b61859a808301e13e1cdbde87b05fc7ac0074879c408f4e40cc300799688486610001df8b91d2636c36ee861ee5cc464d683411bd4c39e0e3d0bc5cc66a29bfec068f354d8a9aa3ad9b84dfd4b69e54169338bf7839596c71401845bcac3575b6e2e663581f4dc053397b5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【AI】chatgpt入门</title>
    <link href="http://luhao.wiki/posts/3GDXTCB/"/>
    <id>http://luhao.wiki/posts/3GDXTCB/</id>
    <published>2023-08-30T16:58:13.000Z</published>
    <updated>2023-08-30T17:14:34.895Z</updated>
    
    <content type="html"><![CDATA[<p>OpenAI注册闭坑、GPT Api调用指南<span id="more"></span></p><h3 id="注册-OpenAI">注册 <a href="https://openai.com/">OpenAI</a></h3><p>跟这个教程操作即可：<a href="https://www.awyerwu.com/9829.html">ChatGPT最新注册教程</a></p><p>核心问题是两个：</p><ol><li>借助 VPN 绕过 OpenAI 的IP检测封控，直接挂美国</li><li>借助 <a href="https://sms-activate.org/">sms-activate</a> 接收外国手机的验证码</li></ol><h3 id="调用-GPT-Api">调用 <a href="https://platform.openai.com/docs/api-reference">GPT Api</a></h3><p>开发环境使用 <code>python3</code>，通过 <code>pip3 install openai</code> 安装依赖包。<br>注意生产环境也要挂VPN，下面是一段测试代码：</p><pre><code class="language-python"># -*- coding: utf-8 -*-import openaiopenai.api_key = "***********************"completion = openai.ChatCompletion.create(  model="gpt-3.5-turbo-0613",  messages=[    {      "role": "user",       "content": "解释厄尔尼诺现象",    }  ],  temperature = 0.7)print (completion.choices[0].message.content)</code></pre><h3 id="开源推荐">开源推荐</h3><ul><li><a href="https://github.com/zhayujie/chatgpt-on-wechat">chatgpt-on-wechat</a></li></ul><p>微信聊天机器人，支持GPT3.5/GPT4.0/文心一言/讯飞星火模型，支持个人微信、公众号、企业微信，支持文本、语音和图片的处理。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenAI注册闭坑、GPT Api调用指南&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="http://luhao.wiki/categories/AI/"/>
    
    <category term="AI" scheme="http://luhao.wiki/categories/AI/AI/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【量化】数据专题</title>
    <link href="http://luhao.wiki/posts/quant-data/"/>
    <id>http://luhao.wiki/posts/quant-data/</id>
    <published>2023-08-29T15:40:15.000Z</published>
    <updated>2023-09-19T15:49:55.842Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>交易需要与 <strong>哪些数据</strong> 打交道？</li><li>如何高效地 <strong>存储、读写、计算</strong> 数据？</li></ul></div><h2 id="一图胜千言">一图胜千言</h2><p>交易数据可以分为三类（从左到右）：</p><p><img src="/images/quant-data-chart.png" alt=""></p><p>换一个角度理解：Bar是Tick数据的重要性采样（有点像光栅化），K-Line是Bar数据的可视化展现（有点像Pixel-Shading）。<br>在这个处理流程中，信息的原貌是不断被丢失的，因此<strong>越原始的数据，价值含量越高</strong>，就像《舌尖上的中国》所说：高端的食材，往往只需最简单的烹饪。</p><p>同时也不能忽略 图形化展示的意义，因为：</p><ul><li><strong>主观交易</strong> 依赖 K线图、技术指标 等作出趋势性、预测性地判断</li><li><strong>量化交易</strong> 往往需要借助 Tick数据 去解读更多的市场微观信息。</li></ul><div class="admonition warning"><p class="admonition-title">如何理解Tick数据?</p><ul><li>交易所收发交易数据的<strong>最小间隔</strong></li><li>可能是每一笔撮合成交（A股），也可能是每500毫秒的交易快照（商品期货）</li></ul></div><h2 id="金融数据分类">金融数据分类</h2><p>狭义理解的金融数据，大概只有 成交量 和 价格 等关键值，但真正的金融市场是错综复杂、影响纷繁的，需要从如下几个领域考量：</p><ul><li><font color="#ef6d3b"><strong>Fundamental Data</strong></font></li></ul><p><strong>基本面数据</strong>，主要是企业的营收、财报等宏观信息，传统投资领域中的分析师，往往是对着海量的财报作出投资决策的。</p><ul><li><font color="#ef6d3b"><strong>Market Data</strong></font></li></ul><p><strong>市场数据</strong>，主要是市值、市盈率、股价、成家量等金融数据，特点是 频率高、时效性强、噪声大，提取有价值信息的难度也非常大。</p><ul><li><font color="#ef6d3b"><strong>Analytics Data</strong></font></li></ul><p>（第三方）<strong>分析数据</strong>是很宽泛的概念，可能是机构的研报、社交舆情的数据，甚至是相关政策的颁布、天气信息的变幻等等。特点是获取难度大、归纳提取有效信息难度更大。</p><hr><p>考虑到数据获取的难度因素，我们一般基于 <code>Market Data</code> 的数据进行提炼和研究，这部分信息获取公开、透明、平等，且能得到的数据量也是最大的。<br>下面介绍一些常见的市场数据的提供商（获取渠道）。</p><h2 id="金融数据提供商">金融数据提供商</h2><p>这里推荐三个具有性价比的渠道，相较于个人投资者（爱好者）而言：</p><table><thead><tr><th style="text-align:center">渠道</th><th style="text-align:center">价格</th><th style="text-align:center">准确度</th><th style="text-align:center">覆盖度</th></tr></thead><tbody><tr><td style="text-align:center">taobao</td><td style="text-align:center">低</td><td style="text-align:center">差<br>（都是个人清洗得到）</td><td style="text-align:center">齐全</td></tr><tr><td style="text-align:center"><a href="http://www.jinshuyuan.net/">金数源</a></td><td style="text-align:center">中<br>（部分低频数据免费）</td><td style="text-align:center">高</td><td style="text-align:center">齐全</td></tr><tr><td style="text-align:center"><a href="https://shinnytech.com/">天勤量化</a></td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">无股票数据</td></tr></tbody></table><p>如果你的策略有所起色，甚至扭亏为盈了，后面可以考虑向专业的数据提供商（如<a href="https://www.wind.com.cn/mobile/WDS/zh.html">Wind</a>、同花顺）购买昂贵但准确的市场数据，有句话说得好：贵的东西总有贵的道理！</p><h2 id="金融数据格式">金融数据格式</h2><p>金融数据是高度序列化的，偏向于使用矩阵（数组）类结构存储，这点不同于游戏行业的策划数值表。因此需要衡量如下几点：</p><ul><li>易于 <code>Python/C++</code> 开发</li><li>读取速度快</li><li>存储空间小</li></ul><hr><p>推荐使用<code>feather</code>进行数据的读写，查阅文档 <a href="https://pandas.pydata.org/pandas-docs/version/1.4/user_guide/io.html">pandas IO tools</a></p><p>为了对比各种格式的特点，下面选取截止<code>2022-12-31</code>的 所有A股日线数据：</p><ul><li><code>26415674 rows x 8 columns</code></li><li>8列分别是：<code>code,time,open,high,low,close,volume,amount</code></li></ul><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">占用空间</th><th style="text-align:center">读取耗时</th><th style="text-align:center">可读性</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">1.5G</td><td style="text-align:center">20s</td><td style="text-align:center">类似excel</td></tr><tr><td style="text-align:center">pickle</td><td style="text-align:center">1.8G</td><td style="text-align:center">3.5s</td><td style="text-align:center">二进制</td></tr><tr><td style="text-align:center">feather</td><td style="text-align:center">0.9G</td><td style="text-align:center">2s</td><td style="text-align:center">二进制</td></tr></tbody></table><h2 id="复权">复权</h2><p>在理解为什么要复权之前，先理解几个金融市场的基本概念：</p><ul><li><p><strong>分红：每10股派发6元</strong><br>本质是将股票市值中的6元兑换成现金，发放到你的账户，等同于套现</p></li><li><p><strong>拆股：每1股拆分为5股</strong><br>本质是因为股价过高作拆分，单只股票价格也会变成五分之一</p></li></ul><p>金融数据中的市场价格（包括开盘价、收盘价），往往都是不考虑分红、拆股的背景条件，因此经常见到股价突然腰斩 <code>90%</code> 的情况，其实并不是股价跌这么多，而是因为该上司公司拆股了。</p><p>因此，复权价格就是为了<strong>抹除非市场因素带来的涨跌，让价格保持平滑、连续性</strong></p><div class="admonition note"><p class="admonition-title">前复权和后复权</p><ul><li>前复权：以 <strong>第一天</strong> 的价格为基准，推算后面的价格</li><li>后复权：以 <strong>最后一天</strong> 的价格为基准，推算之前的价格</li><li><a href="https://www.zhihu.com/question/31004373">知乎: 通俗易懂的解释前复权，不复权和后复权有什么区别？</a></li></ul></div><h2 id="Pandas">Pandas</h2><p><a href="https://pandas.pydata.org/">Pandas</a> 是 应用最广泛的 Python数据处理库，在量化交易、数据清洗中非常重要。</p><h4 id="性能相关">性能相关</h4><ul><li><a href="https://numba.readthedocs.io/en/stable/user/5minguide.html"><font color="#1A9BFF"><em><strong>numba</strong></em></font></a></li><li>读取较多个csv文件耗时较长, 如何用 <font color="#1A9BFF"><em><strong>multiprocess + pandas</strong></em></font> 读取?</li></ul><pre><code class="language-python">from multiprocessing import Pooldef read_csv(file_name):    return pandas.read_csv(file_name)file_list = [...]with Pool(processes=6) as pool:    df_list = pool.map(read_csv, file_list)    df_all = pd.concat(df_list, ignore_index=True)    """ 推荐在read_csv里将数据写到一个全局的dict """</code></pre><h4 id="内存相关">内存相关</h4><p>为了节省runtime内存, DataFrame默认读取的是<code>float64</code> &amp; <code>int64</code>格式, 占用内存大且浪费</p><ul><li><code>np.dtype('int32')</code>: 表示int32类型</li><li><code>np.iinfo('int64').max</code>: 获取int64的最大值</li><li><code>np.finfo('float64').max</code>: float64</li><li><code>int64: 64 bits = 8 byte</code></li></ul><p>建议如下:</p><ul><li>不考虑负数, 用uint代替int</li><li>能用<code>int16</code>, 就不要用<code>int32</code></li><li><font color="#FF1E10"><strong>为什么<code>float64</code>比<code>int64</code>表示范围大? 占内存是一样的</strong></font></li></ul><h4 id="时间相关">时间相关</h4><p>这里要写很多篇幅, 先介绍Pandas自带的转化:<br><font color="#FF1E10"><strong><code>TODO</code></strong></font><br><code>pandas.to_datetime(df)</code>: 返回类型是pandas的timestamp, 可以访问.date(), .day</p><h4 id="注意项">注意项</h4><ul><li><p>读取中文报错: <code>pd.read_csv(file_name, encoding = "gbk")</code></p></li><li><p>UserWarning: Pandas doesn’t allow columns to be created via a new attribute name</p><ul><li>正确写法: <code>df['name'] = xxx</code></li><li><s>错误写法: <code>df.name = xxx</code></s></li></ul></li></ul><h4 id="复杂操作">复杂操作</h4><ul><li><p><strong>groupby</strong></p><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html?highlight=groupby#pandas.DataFrame.groupby">Pandas Groupby</a></li><li><a href="https://zhuanlan.zhihu.com/p/101284491">知乎</a></li><li><code>DataFrame.groupby(by=None)</code>: 按照by这一column筛选</li><li><code>Group.get_group()</code>: 获取指定的group, 返回DataFrame</li></ul></li><li><p><strong>merge</strong></p><ul><li>DataFrame, Series之间任意合并</li><li>注意<code>left</code>, <code>right</code>, <code>outer</code>等几种方式, 底层就是<code>SQL</code>的逻辑</li><li>merge完赋值如果不对齐，可以去重: <code>mf = mf[~mf.index.duplicated()]</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;交易需要与 &lt;strong&gt;哪些数据&lt;/strong&gt; 打交道？&lt;/li&gt;
&lt;li&gt;如何高效地 &lt;strong&gt;存储、读写、计算&lt;/s</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【名人访谈】BBC采访马斯克</title>
    <link href="http://luhao.wiki/posts/2YS1Y71/"/>
    <id>http://luhao.wiki/posts/2YS1Y71/</id>
    <published>2023-08-23T15:14:25.000Z</published>
    <updated>2023-08-24T13:40:44.713Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://www.youtube.com/watch?v=donC2VuVTtM"><strong>Youtube采访视频 2023年4月21日</strong></a></li><li><a href="https://www.bilibili.com/video/BV18F411y7ac"><strong>B站解说视频</strong></a></li><li>马斯克的核心技能：屌爆的思维逻辑 + 烂熟的辩论技巧</li><li>这一派还有个大佬是罗永浩，可以看他锤王自如的视频</li><li><font color="#FF1E10"><strong>TODO:</strong></font> 文章排版不满意，等录个视频锻炼口头表达</li></ul></div><h2 id="采访背景">采访背景</h2><h3 id="马斯克方面">马斯克方面</h3><blockquote><p>阅读材料：<a href="https://zh.wikipedia.org/zh-hans/%E5%9F%83%E9%9A%86%C2%B7%E9%A9%AC%E6%96%AF%E5%85%8B%E6%94%B6%E8%B4%AD%E6%8E%A8%E7%89%B9%E6%A1%88">维基百科 埃隆·马斯克收购推特案</a></p></blockquote><p>马斯克与 <strong>2022年10月</strong> 以 <strong>440亿美金</strong> 价格，收购美国社交巨头 <em><strong>Twitter</strong></em>，其过程经历三个阶段：</p><ul><li>【提出】马斯克提出收购，遭到Twitter和市场反对</li><li>【后悔】马斯克发现Twitter用户数据造假，尝试放弃收购计划</li><li>【被迫】马斯克迫于法律诉讼，被迫收购Twitter</li></ul><p>收购 <em>Twitter</em> 后，马斯克主要实行四大措施：</p><ul><li>大量裁员（8000人-&gt;1500人）</li><li>开源 <em>Twitter</em> 内容推荐算法</li><li>删除垃圾机器人</li><li>退出收费认证服务</li></ul><h3 id="BBC方面">BBC方面</h3><p>其次，BBC的采访素来以 <strong>尝试刁难采访者，角度狠辣，制造爆点话题</strong> 为主，围绕收购案本身，（从BBC角度）有如下几点值得 <strong>埋坑</strong>：</p><ol><li>【道德角度】接手公司后大量裁员</li><li>【媒体角度】Twitter充斥越来越多的虚假信息</li><li>【决策角度】收费认证被所有人吐槽</li></ol><p>所以，这次采访不是一个歌颂丰功伟绩的 “单口相声”，而更像是互相博弈的 “双人对线”，可以说火药味十足。</p><h2 id="采访正题">采访正题</h2><ul><li><font color="#ef6d3b"><strong>❓BBC: 聊聊Twitter收购案</strong></font></li></ul><p>这里马斯克谈了两点，【1】为什么停止收购，【2】强调最终收购是迫不得已。</p><blockquote><p>在谈【1】时，马斯克举了一个非常形象的例子：</p><ul><li>你想购买一袋大米，本来约定允许10%的米是坏的，最后发现30%的米都是坏的。这显然无法接受。</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【进攻三连】：1. 你解雇大量员工，2. 你裁员的行为很随意，3. 你毫无同情心</strong></font></li></ul><p>这里有三个观点，分别是【事实】-&gt;【表象】-&gt;【推断】，层层推进，层层致命。</p><blockquote><p><strong>马斯克的回复很经典</strong>，其实核心是马保国的 <strong>接化发</strong> （太极）：</p><ul><li>【接】：部分认同，但留有余旋 （Musk：确实裁员了…）</li><li>【化】：转移到对自己有利的话题 （Musk：公司账面只能4个月，不裁员所有人都死…）</li><li>【发】：用刁钻假设，反问对方（Musk：换做你怎么做? <a href="https://zhuanlan.zhihu.com/p/338604183">有轨电车难题</a>…）</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【换角度进攻】：你是世界首富，为什么不自己掏钱帮自己公司?</strong></font></li></ul><blockquote><p>这里马斯克没有技巧，全靠<strong>真诚+卖惨</strong>：我贱卖了很多特斯拉的股票才能买下Twitter（别再道德绑架俺…）</p></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【问句埋坑】：你是否后悔裁员？</strong></font></li></ul><p>这是记者经典的疑问圈套，不论回答是否都是下策。</p><blockquote><p>回答是：马斯克认错了！亲口承认裁员不明智<br>回答否：马斯克心狠手辣！裁员毫无愧疚</p></blockquote><p>因此马斯克直接不回答该问题，而是侧面讲了两个自己的观点：</p><blockquote><p>【1】公司有自己的运转规律<br>【2】卖特斯拉股票很困难，它还导致其市值暴跌（寻求弱势低位）</p><ul><li>但如果光说第一点还不够，因为是 <strong>贱卖股票</strong> 让马斯克把自己放到了一个弱势地位，有效阻止记者继续纠缠。</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【聊政治，埋坑】：Twitter被你收购后解封了Trump，他何时回归?</strong></font></li></ul><p>政治是敏感话题，在西方也是如此。因此马斯克直截了当地说 <strong>不知道</strong>。<br>到这里还没完，高手厉害之处就是，<strong>抓住任何机会宣传自己的企业</strong>，于是他说：</p><blockquote><p>我在选举投了Biden，但解封了Trump，说明 <strong>Twitter是自由发声的地方</strong></p></blockquote><p>牛逼！但BBC也是高手，顺着自由发声的话题，立刻谈到Twitter的一些负面问题 ↓</p><ul><li><font color="#ef6d3b"><strong>❓BBC【开始抨击】：Twitter强调言论自由，是否助长错误信息（言论）?</strong></font></li></ul><p>再一次经典的疑问圈套，马斯克作为高手，自然不会落入俗套。他直接反问记者：<strong>谁定义错误信息？</strong>，<strong>BBC难道没有发布过错误信息？</strong></p><ul><li><font color="#ef6d3b"><strong>❓BBC【开始抨击】：Twitter裁掉整个内容审核部门，是否助长仇恨言论?</strong></font></li></ul><blockquote><p>这里介绍一个背景，大部分的社交媒体，都是通过人工（为主）+AI（为辅）过滤仇恨言论（如政治、宗教、法律），但马斯克背其道而行之（裁掉部门）。</p></blockquote><p>马斯克仍然 <strong>以反问起手</strong>：什么是仇恨言论？你用过Twitter吧（必然用过）。那举一个你见过的仇恨言论的例子。</p><blockquote><p>【若记者举了】可以逐点反驳击破，因为很多仇恨言论是片面的，如LSBT，且没法在公开场合说<br>【若记者不举】根据 “谁主张 谁举证” 的规则，其不攻自破</p></blockquote><h2 id="马斯克传达的观念">马斯克传达的观念</h2><p><strong>俗手总是去证明自己，高手往往是在表达自己</strong></p><p>抛开辩论技巧，大佬传达的观念也是值得学习的，马斯克在一个小时的采访中主要传达了这几个观点:</p><ul><li><p>【方法论】想生存? 降本增效</p><ul><li>一方面裁员，一方面裁设备（虽然导致服务崩溃）</li><li>拉回旧的广告商，提高收入</li></ul></li><li><p>【方法论】开源核心算法</p><ul><li>就像餐厅把自己的后厨公开到幕前。</li><li>只有公开透明的算法，才能让民众感到安心（尤其是社交领域）</li></ul></li><li><p>【价值观】社交媒体的意义</p><ul><li>马斯克不在乎赚钱（前提是企业能活下去）</li><li>好的社交媒体，是人们信赖的真相的来源，且人们会自发去评判和追求事物的真相</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=donC2VuVTtM&quot;&gt;&lt;strong&gt;Youtu</summary>
      
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【C++11】lvalue &amp; rvalue (references)</title>
    <link href="http://luhao.wiki/posts/rvalue/"/>
    <id>http://luhao.wiki/posts/rvalue/</id>
    <published>2023-08-20T14:53:43.000Z</published>
    <updated>2023-09-20T15:46:24.295Z</updated>
    
    <content type="html"><![CDATA[<p><code>C++</code> 左值、右值引用<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://www.internalpointers.com/post/understanding-meaning-lvalues-and-rvalues-c"><em><strong>Understanding the meaning of lvalues and rvalues in C++</strong></em></a></li><li><a href="https://www.internalpointers.com/post/c-rvalue-references-and-move-semantics-beginners"><em><strong>C++ rvalue references and move semantics for beginners</strong></em></a></li><li><a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html"><em><strong>Move semantics and rvalue references in C++11</strong></em></a></li></ul></div><div class="markmap-container" style="height:200px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;左值和右值&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#左值-→-右值\&quot;>左值 → 右值</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#右值-→-左值\&quot;>右值 → 左值</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;右值引用&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#move语义-🔥\&quot;>move语义</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#std-move\&quot;>std::move</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#std-remove-reference\&quot;>std::remove_reference</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#三种传参\&quot;>三种传参</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#1-const-T\&quot;>const T</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#2-const-T\&quot;>const T&amp;amp;</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#3-T\&quot;>T&amp;amp;&amp;amp;</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="前言">前言</h2><p>从接触、学习、运用 <code>C++</code> 至今，左右值引用一直是自己困惑的点。伴随着现代C++的发展，它们开始扮演越来越重要的作用（如 <code>std::move</code>、<code>std::remove_reference</code>…）。<br>这篇争取彻底搞懂他们。</p><p>先看 <code>gcc</code> 一个编译报错，为什么 <code>666 = x</code> 的语法是错误的？<br><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as left operand of assignment</em></p><p>编译器是在说：<strong>赋值符号 <code>=</code> 的左操作数，必须是左值 <code>lvalue</code> ! 换句话说，这里的 <code>666</code> 不是一个左值。</strong></p><pre><code class="language-c">int x;666 = x;</code></pre><h2 id="左值和右值">左值和右值</h2><p>如何区分 左值 和 右值？</p><ul><li><strong><code>lvalue</code>：指向明确的内存地址</strong>，又称 <code>variable</code></li><li><strong><code>rvalue</code>：没有明确的内存地址</strong>，又称 <code>literal constant</code></li></ul><p>下面看几个示例：</p><ul><li><code>int x = 666</code>：<code>x</code> 是 <code>lvalue</code>，<code>666</code> 是 <code>rvalue</code></li><li><code>int* y = &amp;x</code>：<code>x</code> 是 <code>lvalue</code>，<code>y</code> 是 <code>lvalue reference</code></li></ul><p>编译规则，赋值<code>=</code> 和取地址<code>&amp;</code> 的左边必须是 <code>lvalue</code>，不然会报如下错误：</p><blockquote><p><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as left operand of assignment</em><br><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as unary ‘&amp;’ operand`</em></p></blockquote><div class="admonition warning"><p class="admonition-title">区分 左值 和 左值引用</p><ul><li><code>int x = 1</code>：x是左值</li><li><code>int&amp; y = x</code>：y是左值引用</li></ul></div><h3 id="function-reference">function reference</h3><p>函数的返回值可以是 左值，也可以是 右值。</p><ul><li>右值 ×</li></ul><pre><code class="language-c">int setValue() { return 6; };setValue() = 3; // error: lvalue required as left operand of assignment</code></pre><ul><li>左值 √</li></ul><pre><code class="language-c">int x = 100;int&amp; setValue() { return x; };setValue() = 1;</code></pre><h2 id="左值-→-右值">左值 → 右值</h2><p>左值 经常会被转化为 右值，如下示例：</p><ul><li><code>x, y</code> 都是 左值</li><li><code>x + y</code> 被转化为 右值</li></ul><pre><code class="language-c">int x = 1;int y = 3;int z = x + y;   // ok</code></pre><p>上面经历了一次 <strong>lvalue -&gt; rvalue</strong>  的隐式转换，很多操作符（<code>+, -, /</code>）都会提供。</p><h2 id="右值-→-左值">右值 → 左值</h2><p>右值 到 左值 的转换是被禁止的，如下代码是非法的：</p><pre><code class="language-c">int&amp; x = 10;// error: cannot bind non-const lvalue reference of type 'int&amp;' to an rvalue of type 'int'</code></pre><h2 id="右值引用-🔥">右值引用 🔥</h2><p>C++ 的一条重要编译规则是：<strong>你无法绑定一个 右值 的地址，除非绑定到一个 <code>const</code> 类型</strong>，例如：</p><pre><code class="language-c">int&amp; x = 666; // error: cannot bind non-const lvalue reference of type 'int&amp;' to an rvalue of type 'int'const int&amp; x = 666; // OKstd::string s1 = "Hello ";std::string s2 = "world";const std::string&amp; s3 = s1 + s2;s3 += " luhao";  // error: no match for 'operator+=' (operand types are 'const std::string'</code></pre><p>但是上面的写法有个弊端，<strong>即无法再修改 <code>s3</code> 的值</strong>。<br>为了能够修改右值（即临时变量），<code>C++11</code> 正式引入右值引用（<code>rvalue reference</code>），其符号是 <code>&amp;&amp;</code>：</p><pre><code class="language-c">std::string s1 = "Hello ";std::string s2 = "world";std::string&amp;&amp; s3 = s1 + s2;s3 += " luhao"; // OK</code></pre><p>上面的示例看出来用处不大，<strong>因为 <code>rvalue reference</code> 真正大展拳脚的地方，是在 移动语义（<code>move semantics</code>）。</strong></p><h2 id="move语义-🔥">move语义 🔥</h2><p>阅读资料</p><ul><li><a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html"><em><strong>Move semantics and rvalue references in C++11</strong></em></a></li></ul><p><strong>移动语义 是一种利用右值引用的技术，来避免拷贝临时变量的优化手段。</strong></p><h3 id="为什么需要-move-semantics-💡">为什么需要 move semantics? 💡</h3><p>假设 <code>class Holder</code> 是一个(内存)非常繁重的类，考虑到如下的构造和拷贝构造函数。<br>当调用 <code>Holder h1(h)</code> 时，因为 <code>std::copy</code> 造成巨大的内存拷贝开销，如果后文中 <code>h</code> 也不再继续使用，为什么不尝试将 <code>h</code> 转交给 <code>h1</code> 呢?</p><pre><code class="language-c">class Holder{public:    Holder(int size) {        m_data = new int[size];        m_size = size;    }    Holder(const Holder&amp; other)    {        m_data = new int[other.m_size];        std::copy(other.m_data, other.m_data + other.m_size, m_data);        m_size = other.m_size;    }    ~Holder() { delete[] m_data; }private:    int*   m_data;    size_t m_size;}int main(){    Holder h(10000);    Holder h1(h); // 调用 std::copy 带来非必要开销    return 1;}</code></pre><p>借助移动语义，可以优化掉上面的拷贝。注意到下面使用了 <a href="#std-move"><em><strong>std::move</strong></em></a>，它能将左值转化为右值，是C++标准库的成员函数，后面有介绍。</p><pre><code class="language-c">Holder(Holder&amp;&amp; other){    // 赋值    m_data = other.m_data;    m_size = other.m_size;    // 清空other的状态    other.m_data = nullptr;    other.m_size = 0;}int main(){    Holder h(10000);    Holder h1(std::move(h));    return 1;}</code></pre><h3 id="std-move">std::move</h3><p>阅读材料：</p><ul><li><a href="https://en.cppreference.com/w/cpp/utility/move"><em>cppreference</em></a></li><li><a href="https://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-api-4.5/a00936_source.html"><em>libstdc++: move.h</em></a></li></ul><p>阅读 <code>std::move</code> 的源码，其实只是作了类型转化，将 任意形式的<code>_Tp</code> 转化成右值:</p><ul><li><code>std::remove_reference</code>：去掉引用</li><li><code>static_cast</code>：隐式转换</li></ul><div class="admonition note"><p class="admonition-title">std::move</p><ul><li><code>move</code> 右值：直接返回</li><li><code>move</code> 左值：转成右值，并返回</li></ul></div><pre><code class="language-c">  /**   *  @brief  Convert a value to an rvalue.   *  @param  __t  A thing of arbitrary type.   *  @return The parameter cast to an rvalue-reference to allow moving it.  */  template&lt;typename _Tp&gt;    constexpr typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;    move(_Tp&amp;&amp; __t) noexcept    { return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t); }</code></pre><h3 id="std-remove-reference">std::remove_reference</h3><p><code>remove_reference</code> 顾名思义，就是去除任意类型的引用，借助模板实现。<br>核心是对于 <code>_Tp&amp;</code> 和 <code>_Tp&amp;&amp;</code> 这两种带引用的传参，需要去掉其引用的部分，只获取其类型（通过 <code>::type</code> 获取）</p><pre><code class="language-c">  template&lt;typename _Tp&gt;    struct remove_reference    { typedef _Tp   type; };  // 特化  template&lt;typename _Tp&gt;    struct remove_reference&lt;_Tp&amp;&gt;    { typedef _Tp   type; };  // 特化  template&lt;typename _Tp&gt;    struct remove_reference&lt;_Tp&amp;&amp;&gt;    { typedef _Tp   type; };</code></pre><h2 id="三种传参">三种传参</h2><h3 id="1-const-T"><code>1. const T</code></h3><p>常量值传递，默认有一次拷贝开销。<br>如果是 <code>builtin-types (int、float ...)</code> 推荐使用这种传递方式</p><h3 id="2-const-T"><code>2. const T&amp;</code></h3><p>常量引用传递，<code>&amp;</code> 避免拷贝带来的开销，<code>const</code> 避免被修改。<br>但会将生命周期延续</p><h3 id="3-T"><code>3. T&amp;&amp;</code></h3><p>右值传递，避免拷贝带来的开销，推荐复杂结构体如 <code>std::vector ...</code><br>缺点是调用者必须传入右值，否则编译期间报错，如果是通用接口比较难受</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;C++&lt;/code&gt; 左值、右值引用&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【C++17】refl-cpp</title>
    <link href="http://luhao.wiki/posts/refl-cpp/"/>
    <id>http://luhao.wiki/posts/refl-cpp/</id>
    <published>2023-08-17T16:27:58.000Z</published>
    <updated>2023-08-20T13:40:16.985Z</updated>
    
    <content type="html"><![CDATA[<p>品读<code>C++</code>经典反射库<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>源码：<a href="https://github.com/veselink1/refl-cpp"><em><strong>veselink1/refl-cpp</strong></em></a></li><li>blog：<a href="https://veselink1.github.io/blog/cpp/metaprogramming/2019/07/13/refl-cpp-deep-dive.html"><em>refl-cpp — A deep dive into this compile-time reflection library for C++</em></a></li><li>这篇博客大致是英文版的 直译 + 自己理解，旨在提高对 <code>templates</code> + <code>reflections</code> 的掌握</li><li>精读blog ➜ 理解源码 ➜ 上手仿造</li></ul></div><h2 id="目录">目录</h2><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#compile-time%E5%8F%8D%E5%B0%84">compile-time反射</a></li><li><a href="#%E6%9E%84%E5%BB%BA%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98">构建类的成员</a></li><li><a href="#%E4%BD%BF%E7%94%A8-macros-%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81">使用 <code>macros</code> 组织代码</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%8D%E5%B0%84">函数反射</a></li><li><a href="#%E9%81%8D%E5%8E%86%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98">遍历类的成员</a></li></ul><h2 id="前言">前言</h2><p><code>refl-cpp</code> 的设计初衷是：</p><ul><li>支持 在 <strong><code>C++17</code></strong> 及更高版本 <strong>提供编译期反射（Compile-time）</strong> 的方法。</li><li>支持 <code>enumeration</code>，<code>introspection</code><ul><li><code>enumeration</code>：类似 <code>Python dir()</code> 枚举对象所有的属性</li><li><code>introsection</code>：类似 <code>Python getattr</code> 访问对象的指定属性</li></ul></li><li>支持 类型模板、成员模板</li><li>支持 <code>attributes</code> <font color="#FF1E10"><strong>TODO</strong></font></li></ul><p><code>refl-cpp</code> 的设计避免如下：</p><ul><li>避免 使用宏魔法</li><li>避免 <code>Private</code> 私有成员的反射</li><li>避免 运行时 按名称查询类型信息</li></ul><h2 id="compile-time反射">compile-time反射</h2><p>首先 <code>refl-cpp</code> 是一个 <code>compile-time</code> 的反射库，这意味着它不会维护一个 runtime 的数据结构来实现反射目的，例如下面是不可取的：</p><pre><code class="language-c">struct TypeInfo {    std::string name;           // 对象的类型名称    std::vector&lt;?&gt; members;     // 对象的所有成员    std::vector&lt;?&gt; attributes;  // 对象的所有成员取值}// ↓ 维护一个全局的反射数据结构std::unordered_map&lt;std::string, TypeInfo&gt; s_typeRegistry;</code></pre><p>相反，<code>refl-cpp</code> 的做法是，通过 cpp模板特化 以一种类相关的方式（<code>type-dependent</code>）来存储 <code>metadata</code>，例如下面的做法：</p><pre><code class="language-c">template &lt;typename&gt; struct TypeInfo {};// ↓ Point类的编译期信息template &lt;&gt;struct TypeInfo&lt;Point&gt; {  static constexpr char name[] = "Point";  ??? members = {};  ??? attributes = {};};</code></pre><h2 id="构建类的成员">构建类的成员</h2><p>上一节提供了存储 类信息 的方法，但是如何存储 其成员变量（和方法）呢？<br><code>refl-cpp</code> 使用一种新颖的方式来存储：</p><pre><code class="language-c">template &lt;size_t N&gt;struct MemberInfo;/* 第0个成员的模板特化 */template &lt;&gt;struct MemberInfo&lt;0&gt; {  /* ... */};/* 第1个成员的模板特化 */template &lt;&gt;struct MemberInfo&lt;1&gt; {  /* ... */};static constexpr size_t MemberCount = 2;</code></pre><p><code>MemberInfo</code> 是类成员的模板特化，因此将其添加到 <code>TypeInfo</code> 的作用域（如下）。<br><code>typename Dummy</code> 是因为C++不允许成员完全模板特化，而部分成员的模板特化是允许的。<font color="#FF1E10"><strong>TODO</strong></font></p><pre><code class="language-c">template &lt;&gt;struct TypeInfo&lt;Point&gt; {  template &lt;size_t N, typename Dummy&gt;  struct MemberInfo;  /* 第0个成员的模板特化 */  template &lt;typename Dummy&gt;  struct MemberInfo&lt;0&gt; {    /* ... */  };  /* 第1个成员的模板特化 */  template &lt;typename Dummy&gt;  struct MemberInfo&lt;1&gt; {    /* ... */  };  static constexpr size_t MemberCount = 2;};</code></pre><h2 id="使用-macros-组织代码">使用 <code>macros</code> 组织代码</h2><p>上一节提供了粗略的 类 + 类成员 的反射方案，那么如何声明它们呢？<br>答案是借助 <code>macros</code> 实现（作者不是不建议使用宏么😂…）</p><ul><li><code>__COUNTER__</code> 是非标准库的宏，每次调用增加<code>1</code>，且从<code>0</code>开始</li><li>宏展开后的代码，可看示例：<a href="https://gist.github.com/veselink1/f4e2fa94bda0514631753f13a9b93f9b"><em>refl-cpp-deep-dive-5-generated.cpp</em></a></li><li>另外每个 <code>TypeInfo</code> 和 <code>MemberInfo</code> 还应该包含如下内容：<ul><li><code>static constexpr char name[] = …</code></li><li><code>static constexpr std::tuple&lt;…&gt; attributes = {…}</code></li><li><code>static constexpr auto* pointer = &amp;Type::MemberName</code></li></ul></li></ul><pre><code class="language-c">template &lt;typename T&gt;struct TypeInfo {};#define REFLECT_TYPE(TypeName) \  template&lt;&gt; struct TypeInfo&lt;TypeName&gt; { \    template &lt;size_t, typename&gt; struct MemberInfo; \    static constexpr size_t MemberIndexOffset = __COUNTER__ + 1; #define REFLECT_FIELD(FieldName) \  template &lt;typename Dummy&gt; struct MemberInfo&lt;__COUNTER__ - MemberIndexOffset&gt; \  {}; \#define REFLECT_END \    static constexpr size_t MemberCount = __COUNTER__ - MemberIndexOffset; \  };// Usage:REFLECT_TYPE(Point)   REFLECT_FIELD(x)   REFLECT_FIELD(y)REFLECT_END</code></pre><div class="admonition note"><p class="admonition-title">Tips: 借助 VisualStudio 查看宏展开</p><ul><li>鼠标悬停在宏上，点击 <code>Expand Inline</code><img src="/images/vs-macros-expand.png" alt=""></li></ul></div><h2 id="函数反射">函数反射</h2><p><code>refl-cpp</code> 还提供反射函数的功能。</p><p>为了区分成员（是变量还是方法），每个 <code>MemberInfo</code> 有一个公共的 <code>typedef</code>，它等同于 <code>refl::members::field</code> 和 <code>refl::members::function</code> 两者之一。而考虑到 函数的重载和模板，这部分功能（相对于反射成员）会更加复杂。</p><p><code>refl-cpp</code> 通过如下方法：<font color="#FF1E10"><strong>TODO</strong></font></p><pre><code class="language-c">template &lt;typename R, typename... Args&gt;auto resolve(R(*fn)(Args...), Args&amp;&amp;... args) -&gt; decltype(fn);/*   Imagine 12 more overloads of resolve for different pointer-to-member   combinations (plain, &amp;, &amp;&amp;, const, volatile qualifiers)*/template &lt;typename... Args&gt;static constexpr decltype(detail::resolve(&amp;Type::MemberName, std::declval&lt;Args&gt;()...)) pointer { &amp;Type::MemberName };</code></pre><p>↑ 上面这段代码理解起来较为困难，我们可以将其功能拆解一下，它是为了解决什么问题？</p><p>想象类型 <code>A</code> 具有两个函数重载：</p><ul><li><code>f(int)</code></li><li><code>f(const std::string)</code></li></ul><p>当拥有一个指向f的函数指针（<code>&amp;f</code>）时，编译器怎么知道调用哪个？<br><code>refl-cpp</code> 实际会帮助编译器 推导出正确的重载函数（通过将 <code>&amp;f</code> 作为参数传递给另一个函数的方式，来直接触发函数）。<br><code>resolve</code> 没有任何定义，它只是一个 <code>prototype</code>，作用是作为编译器的一个提示。</p><p>这种方法总结起来是：<strong>传递函数性质的参数（由 <code>std::decalval</code> 产生）</strong>。它的好处是：所有的参数类型转换都适用，即我们可以通过 <code>MemberInfo&lt;?&gt;::pointer&lt;int&gt;</code> 并得到一个 <code>void(*)(long)</code> 类型的指针作为结果。</p><h2 id="遍历类的成员">遍历类的成员</h2><p>前面讲了如何创建和存储类成员的 <code>metadata</code>，这节介绍如何遍历它们（<code>compile-time</code>）。<br>核心思想是 借助可变参数模板，创建一个 <code>TypeList</code> 的类型成员列表，并提供枚举的方法。</p><pre><code class="language-c">template &lt;typename... Ts&gt;struct TypeList {};</code></pre><p>!!! NOTE 这块讲的不是很细，没搞懂…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;品读&lt;code&gt;C++&lt;/code&gt;经典反射库&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【cpp】Templates</title>
    <link href="http://luhao.wiki/posts/templates/"/>
    <id>http://luhao.wiki/posts/templates/</id>
    <published>2023-08-13T17:47:03.000Z</published>
    <updated>2023-08-30T17:19:34.685Z</updated>
    
    <content type="html"><![CDATA[<p>C++模板、meta-programming<span id="more"></span></p><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Function Templates&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#模板基础\&quot;>模板基础</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#编译检查\&quot;>编译检查</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#参数推导\&quot;>参数推导</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#多参数\&quot;>多参数</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#函数重载\&quot;>函数重载</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Class Templates&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#模板特化\&quot;>模板特化</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;偏特化&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#模板特化-代码示例\&quot;>代码示例</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;SFINAE <font color=#FF1E10><strong>TODO</strong></font>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;std&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#⭐std-max\&quot;>std::max</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#⭐std-pair\&quot;>std::pair</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#⭐type-traits\&quot;>type_traits::is_integral</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;/posts/rvalue/#std-move\&quot;>std::move</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;反射 <font color=#FF1E10>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;/posts/refl-cpp/\&quot;>refl-cpp</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Function-Templates">Function Templates</h2><h3 id="模板基础">模板基础</h3><p>下面是一个最简单的函数模板示例：</p><pre><code class="language-c">template &lt;typename T&gt;T max (T a, T b){    return b &lt; a ? a : b;}</code></pre><ul><li><code>T</code> 是定义类型的变量，它可以是 <code>int</code>、<code>float</code>、任何class…</li><li><code>typename</code> 是关键字，<code>template&lt;class T&gt;</code> 是兼容 C++98 的一种正确写法</li><li>上面有两个潜在约束：1. <code>T</code>必须支持<code>&lt;</code>操作符，2. <code>T</code>必须支持拷贝构造函数，为了<code>return</code></li></ul><p>下面是简单的模板使用实例：</p><pre><code class="language-c">::max(7, 8);          // 8::max(1.2, 1.5);      // 1.5::max("abc", "abcd"); // abcd</code></pre><p>当调用上者时，模板会自动实例化为：</p><pre><code>int max(int, int);double max(double, double);char const* max(char const*, char const*);</code></pre><h3 id="编译检查">编译检查</h3><p>模板的编译检查分为两个阶段（<code>Two-Phase Translation</code>）</p><ul><li>定义阶段</li><li>实例化阶段</li></ul><pre><code class="language-c">template &lt;typename T&gt;void foo(T t){    undeclared(); // 未定义函数，定义阶段报错    undeclared(t); // 引用了T，所以实例化阶段才报错}</code></pre><h3 id="参数推导">参数推导</h3><p>编译器会根据传入参数的类型，自动推导 <code>T</code> 的取值</p><ul><li>若引用传递：不允许类型转化</li><li>若值传递：只允许退化（<code>decay</code>），<code>const</code>和<code>volatile</code>会被忽略。引用会被转化成引用的类型。</li></ul><pre><code class="language-c">int const c = 42;int i = 1;::max(i, c); // OK: (int, int)::max(c, c); // OK: (int, int)int&amp; ir = i;::max(i, ir); // OK: (int, int)int arr[4];::max(&amp;i, arr); // OK: (int*, int*)</code></pre><h3 id="多参数">多参数</h3><p>模板允许定义多组不同的参数，以如下函数示例，其<strong>返回值的类型是不确定的</strong>：</p><pre><code class="language-c">template&lt;typename T1, typename T2&gt;T1 max (T1 a, T2 b){    return b &lt; a ? a : b;}</code></pre><ul><li><font color="#ef6d3b"><strong>返回类型推断</strong></font></li></ul><p>从<code>C++14</code>开始，允许使用 <code>auto</code> 声明函数的返回值，即让编译器自己决定。</p><pre><code class="language-c">template&lt;typename T1, typename T2&gt;auto max (T1 a, T2 b){    return b &lt; a ? a : b;}</code></pre><p>在<code>C++11</code>中，<code>auto</code>必须配合 <code>trailing return type</code> 使用，否则编译报错如下：</p><div class="admonition error"><p class="admonition-title">error: 'xxx' function uses 'auto' type specifier without trailing return type</p></div><pre><code class="language-c">template&lt;typename T1, typename T2&gt;auto max (T1 a, T2 b) -&gt; decltype(b&lt;a?a:b);</code></pre><ul><li><font color="#ef6d3b"><strong>类型萃取</strong></font></li></ul><pre><code class="language-c">#include &lt;type_traits&gt;template&lt;typename T1, typename T2&gt;std::common_type_t&lt;T1,T2&gt; max (T1 a, T2 b)</code></pre><div class="admonition note"><p class="admonition-title">Trick: C++如何获取变量x的类型?</p><ul><li><code>#include &lt;typeinfo&gt;</code></li><li><code>typeid(x).name()</code></li></ul></div><h2 id="Class-Templates">Class Templates</h2><h3 id="模板特化">模板特化</h3><ul><li>这篇中文资料说得通俗易懂：<a href="https://sg-first.gitbooks.io/cpp-template-tutorial/content/jie_te_hua_yu_pian_te_hua.html"><em><strong>深入理解特化与偏特化</strong></em></a></li><li>源码 推荐阅读： <a href="#%E2%AD%90type-traits"><em><strong>type_traits</strong></em></a></li></ul><p>模板特化的作用是，<strong>针对模板的参数类型，从而定义不同的实现</strong>。<br><font color="#ef6d3b"><strong>只要你教得好，它可以 “见人说人话，见鬼说鬼话”</strong></font><br>（有点类似 函数重载 和 虚函数继承 的思想）</p><p>模板特化实现思路是：</p><ul><li>先定义基本模板（能说话）</li><li>再针对每种参数实现特例（能见人下菜碟）</li></ul><p>下面仿照 <code>Python</code> 实现 <code>C++</code> 的 <code>type</code> 函数:</p><pre><code class="language-c">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;template&lt;typename T&gt;class TypeId{public:    static constexpr char const* type = "NULL";    TypeId(T t) {}};template&lt;&gt;class TypeId&lt;int&gt;{public:    static constexpr char const* type = "INT";    TypeId(int t) {}};template&lt;&gt;class TypeId&lt;std::string&gt;{public:    static constexpr char const* type = "STRING";    TypeId(std::string t) {}};int main(){    ::cout &lt;&lt; TypeId(1).type &lt;&lt; "\n";                   // INT    ::cout &lt;&lt; TypeId(std::string("abc")).type &lt;&lt; "\n";  // STRING    return 1;}</code></pre><h3 id="模板特化-规则">模板特化 规则</h3><p>模板特化 符合 函数重载 的两个条件之一：</p><ul><li>参数数量相同、类型不同</li><li>参数数量不同（<strong>特化只能少于等于</strong>）</li></ul><p>否则出现报错：</p><div class="admonition error"><p class="admonition-title">error: too many template arguments for class template xxx</p></div><p>示例如下：</p><pre><code class="language-c">template &lt;typename T, typename U&gt; struct X            ;    // 0 // 原型有两个类型参数// 所以下面的这些偏特化的实参列表// 也需要两个类型参数对应template &lt;typename T&gt;             struct X&lt;T,  T  &gt; {};    // 1template &lt;typename T&gt;             struct X&lt;T*, T  &gt; {};    // 2template &lt;typename T&gt;             struct X&lt;T,  T* &gt; {};    // 3template &lt;typename U&gt;             struct X&lt;U,  int&gt; {};    // 4template &lt;typename U&gt;             struct X&lt;U*, int&gt; {};    // 5template &lt;typename U, typename T&gt; struct X&lt;U*, T* &gt; {};    // 6template &lt;typename U, typename T&gt; struct X&lt;U,  T* &gt; {};    // 7template &lt;typename U, typename T&gt; struct X&lt;U,  T, T &gt; {};  // Error</code></pre><h3 id="模板特化-代码示例">模板特化 代码示例</h3><ul><li><a href="/code/refl-sum.cpp"><em><strong>refl-sum.cpp</strong></em></a></li><li><a href="/code/refl-factorial.cpp"><em><strong>refl-factorial.cpp</strong></em></a></li></ul><h2 id="std">std</h2><h3 id="⭐std-max"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.9.2/libstdc++/api/a01226_source.html">⭐std::max</a></h3><ul><li><code>_GLIBCXX14_CONSTEXPR</code> 在 <code>C++14</code> 会被替换为 <code>constexpr</code></li><li>实际可以展开为：<code>constexpr inline const _Tp&amp; max(const _Tp&amp; __a, const _Tp&amp; __b)</code><ul><li><code>constexpr</code>无实质作用，重点是参数使用 <code>const &amp;</code></li></ul></li></ul><pre><code class="language-c">  template&lt;typename _Tp&gt;    _GLIBCXX14_CONSTEXPR    inline const _Tp&amp;    max(const _Tp&amp; __a, const _Tp&amp; __b)    {      // concept requirements      __glibcxx_function_requires(_LessThanComparableConcept&lt;_Tp&gt;)      //return  __a &lt; __b ? __b : __a;      if (__a &lt; __b)return __b;      return __a;    }</code></pre><!-- ### [⭐std::stack](https://gcc.gnu.org/onlinedocs/gcc-4.8.3/libstdc++/api/a01566_source.html) --><h3 id="⭐std-pair"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.9.2/libstdc++/api/a01240_source.html">⭐std::pair</a></h3><ul><li><a href="https://en.cppreference.com/w/cpp/utility/pair/pair"><em><strong>[cppreference] std::pair</strong></em></a></li><li><a href="https://stackoverflow.com/a/9270585/16823597"><em><strong>[stackoverflow] What is the purpose of std::make_pair vs the constructor of std::pair?</strong></em></a><ul><li>c++14及之前，<code>std::pair</code>需要显式指定类型，<code>std::make_pair</code>不需要</li></ul></li></ul><pre><code class="language-c"> template&lt;typename _T1, typename _T2&gt;    struct pair    : private __pair_base&lt;_T1, _T2&gt;    {      typedef _T1 first_type;    ///&lt; The type of the `first` member      typedef _T2 second_type;   ///&lt; The type of the `second` member      _T1 first;                 ///&lt; The first member      _T2 second;                ///&lt; The second member      _GLIBCXX_CONSTEXPR pair()      : first(), second() { }      // ...    }</code></pre><h3 id="⭐type-traits"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.7.4/libstdc++/api/a01417_source.html">⭐type_traits</a></h3><ul><li>以 <code>is_integral</code> 为例，判断是否为整型</li></ul><pre><code class="language-c">  template&lt;typename _Tp&gt;    struct is_integral    : public __is_integral_helper&lt;__remove_cv_t&lt;_Tp&gt;&gt;::type    { };</code></pre><ul><li><code>__is_integral_helper</code> 是一个标准的模板特化，<strong>非常简单</strong>！</li></ul><pre><code class="language-c">template&lt;typename&gt;    struct __is_integral_helper    : public false_type { };  template&lt;&gt;    struct __is_integral_helper&lt;int&gt;    : public true_type { };  template&lt;&gt;    struct __is_integral_helper&lt;char&gt;    : public true_type { };  // ...</code></pre><ul><li><code>true_type</code> 相关定义如下，其<code>value</code>变量就是一个bool类型的 <code>true</code></li></ul><pre><code class="language-c">  /// integral_constant  template&lt;typename _Tp, _Tp __v&gt;    struct integral_constant    {      static constexpr _Tp                  value = __v;      typedef _Tp                           value_type;      typedef integral_constant&lt;_Tp, __v&gt;   type;      constexpr operator value_type() const noexcept { return value; }      // ...    };  template&lt;typename _Tp, _Tp __v&gt;    constexpr _Tp integral_constant&lt;_Tp, __v&gt;::value;  /// The type used as a compile-time boolean with true value.  typedef integral_constant&lt;bool, true&gt;     true_type;  /// The type used as a compile-time boolean with false value.  typedef integral_constant&lt;bool, false&gt;    false_type;</code></pre><h2 id="反射">反射</h2><p>先看看什么是 <a href="https://en.wikipedia.org/wiki/Reflective_programming"><em><strong>reflection</strong></em></a>:</p><blockquote><p><em>reflection is the ability of a process to examine, introspect, and modify its own structure and behavior.</em></p></blockquote><ul><li>通俗解释，反射就是从一个对象(<code>object</code>)，能够反推其类型、成员和方法</li><li>以<code>Python</code>为例，<code>getattr</code> 就是经典的反射功能</li></ul><div class="admonition warning"><p class="admonition-title">为什么cpp没有反射?</p><ul><li>反射会导致编译后文件过大</li><li>cpp很少用到元编程（相对于C#)</li><li>cpp有模板，足够应付大部分需求...</li></ul></div><h2 id="阅读材料">阅读材料</h2><ul><li><p><a href="http://110.42.228.178/pdf/CPP_Templates_2nd.pdf">CPP-Templates-2nd 英文</a></p><ul><li><a href="https://github.com/wuye9036/CppTemplateTutorial">CPP-Templates-2nd 中文版翻译</a></li><li><a href="https://github.com/r00tk1ts/cpp-templates-2nd">cpp-templates-2nd 中文版翻译</a></li></ul></li><li><p><a href="https://github.com/wuye9036/CppTemplateTutorial">C++ Template 进阶指南</a></p></li><li><p><a href="https://veselink1.github.io/blog/cpp/metaprogramming/2019/07/13/refl-cpp-deep-dive.html">refl-cpp</a></p></li><li><p><a href="https://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/">What Does Haskell Have to Do with C++?</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++模板、meta-programming&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>日志：2023年8月</title>
    <link href="http://luhao.wiki/posts/2023/8/"/>
    <id>http://luhao.wiki/posts/2023/8/</id>
    <published>2023-07-31T16:35:13.000Z</published>
    <updated>2023-09-25T08:56:53.438Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="088c707709b995861e4e58c94a61b527368d8a83cfc58edb93edc304acbc9c56"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【vscode】vim定制化插件</title>
    <link href="http://luhao.wiki/posts/vscode-vim/"/>
    <id>http://luhao.wiki/posts/vscode-vim/</id>
    <published>2023-07-23T12:04:39.000Z</published>
    <updated>2023-07-29T18:41:03.599Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a> 是仿照vim的vscode插件</li><li>本文在其基础上添加一些额外的个性化功能</li></ul></div><h3 id="VSCodeVim">VSCodeVim</h3><p>vscode vim主流插件有两款，分别是:</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a>：仿vim的插件，功能不全</li><li><a href="https://github.com/vscode-neovim/vscode-neovim">VSCode Neovim</a>：基于Neovim，功能较全，但依赖nvim环境且配置复杂</li></ul><p>笔者一直使用前者，因此本文全部围绕 VSCodeVim展开。</p><h3 id="缺陷-😞">缺陷 😞</h3><p>VSCodeVim Github 拥有 1.5k 未处理的 Issues，作者的维护迭代速度非常慢，因此有很多缺陷和功能不足之处：</p><ul><li>不支持 vimscript function</li><li>不支持 vim bash</li><li><font color="#FF1E10"><strong>【bug】</strong></font>经常Esc失效，弹窗报错 <code>vim.Escape is undefined</code>… 需要重装插件</li></ul><h3 id="亮点-🎉">亮点 🎉</h3><p>打开 <code>"vim.statusBarColorControl": true</code>，可以使底部 <code>statusBar</code> 跟随 vim模式 而改变颜色。<br>本文希望进而改变 Cursor 和 当前行 的颜色、高亮显示，并支持 config 配置，效果图如下：</p><p><img src="/images/vim-mode-demo.png" alt=""></p><h3 id="改进-💡">改进 💡</h3><ul><li><p><strong>支持配置 StatusBar, Highlight 等颜色配置</strong></p></li><li><p><strong>支持区分 Normal, Insert, Visual 三种模式的颜色</strong></p></li><li><p>下载链接:<br><a href="https://github.com/593413198/Vim/releases/tag/vim-mode-1.0">https://github.com/593413198/Vim/releases/tag/vim-mode-1.0</a></p></li><li><p>配置文件:</p></li></ul><pre><code>    "vim.statusBarColorControl": true,    "vim.alpha": "80",    "vim.statusBarColors.visual": "#005f5f",    "vim.statusBarColors.insert": "#5f0000",</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VSCodeVim/Vim&quot;&gt;VSCodeVim&lt;/a&gt; 是仿照vim的vsc</summary>
      
    
    
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/"/>
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/VSCode/"/>
    
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>随手记</title>
    <link href="http://luhao.wiki/posts/idea/"/>
    <id>http://luhao.wiki/posts/idea/</id>
    <published>2023-07-21T19:15:33.000Z</published>
    <updated>2023-09-20T15:07:48.866Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0a83b12d347276c6b48be36d19fb7a90e9b9f08328e20eee7cae8501da71b380">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475debb79baf718116b8398ebb7a36965f5712db04a990a04196bf7d89b9188d2f5969b089300c199c887ad4490953d1810357cd375ac06e732d356d4ec27b642aa2d46c8fdf198d48a4b9620936f8c18efa99cd53c0e6c5befbd6da9ebb0e8d473ba88daf9814bf097589053470cd244c49759b29258898ae147d3b92406541ecc1426781b7f965d69488f8227468d25ace43c6b69c8a19f97354453e8ff96435fa7c142eabaa7418866597b071d73575a4fa98f09916a3b6256959c82764411afd8c8baf90fb4965fdfacbf4695b2488acf5d7f161a49b796a0b1b992232c56c8393b9705588b441acf55138be81fe973cfb15be2e79a6f99afa38481729479c286ec6a02cc951fd7f863308221e3409f3e1974680d2f02c063980d44af8e06e16848b8bd660fed16d9b5d1445f1619d498731bec635a5437f3f2dd0b389fbb52905c7c24ebbf54885173e06c7c5b2e3915335e700578626ce7eac45b801a88360b8431a63f02f909f337c51c8aca522afdfb179a032059d1b0c60d82a39c9101894591c99a69d4788c0964ffdf8c8bd340d4f4d0c40c91f0d7b04f33253a142ee29a844e5b7eca56476ebd534d90b54953c9f26a98bfd690dc70f043a224f68814d251f07166ef0cdd195c05dc74eb39f54b5345f809b762a7889cd161f77be58e0d1a2d473e983209035a731b88905105060112483e9324a6df5104a9d6be63f87da391c0963d4f09a7cab737a5ca573dff5ec065ea9642b56a99496dd5fe07d79eb01e764bc4981b18d44febaa69e990ce3840e68e11608c429372dbac1cecfc2038b49f670674000de8678222faf16653011af599b7041a4666b42fca2b7016c0114615a9e48daada73380ebb1f0a77014f98e73fd91211be9915441e020f684b6ab5fd16aa83172ca300b67e8313958aec28449d5dc25d1523684b6f37ea6dc82c9a79dabee1db6927aa5204d3d2c69b5783054fed11c03e30edb770916c755250727b3a9b1e2d0724fc5e999674b55a3bde26b5b75c99484bb61d59db3ac19a34e3562c2669858e1bccb64b4b066a053b42267d80283066fe124cfc8c0b84cdb820ff3e763d7fe2e584018a7e6910444f322a9bcd6fd01e356b76f5e2e17459c783c1e0ac90e0d4f44b68f8e10c288575faef4a2bf6e70112ef8169031fa6263fd119737a704f32d1053b20442b8148288f3fcd1786588a4c8c188c7898b44a13e11328262f126dc83386e15d703265ea5731c2b7222a1895c0faa6b9e769e574bb4f9dd0235f3e54666c06af8f64f758c54f797e0f8c55a352fb8d294a80b7379829017ed98c006a6d965f4c3c067c2a193b069ee1600eb66ef68557485fd2b322659b094d75be93644172990a8464ddf01bd1ca97bed5ffc6bfd34809d01d623d3e4c80137bdef33281c6e8dbaee57dd6665e19e81cb9a8e962c7e3e0993908623211e743468ed2f8272e996f72492fa2edbd9d60c460150643fd33a70d81d9f3e258c4084b090da6d3154754e7f30c89f01dd4b6cbdf22e2df82d8317dc49637c8efb83fe9ba4679b8bd728928049798c7bf41747e3f0bdadd127110835b9325f056a89f0354dbc9505f5bc9a56b5fc8f89d6bbf453393f313aa937a157d2d1e36f322be64212908ed3e9a5ed75cde60341498d7a0db49f50b2a2ad930322847aa0a5450b0cc8c344b3c2e951d1555a7c496d9d667fc700fabbf8038e4056135ffbeebbafcd33781ee377c27a1b2bffdc11285b589cd57162cc4c3cf9ad267a6979755e9a1db3ac1dad7f7d6de146499e02cc11f708ef708bb24c704cb113772279ad22a90bab2249929051a6b8bdf8ae92054c3ca5a516d7b60939b4a2edca3a861e6111047dbac8b7ab5feb9c41208c25de091003cc7b7ccd9eff88409875ca81c06299c9db0d032fabb7dd7c964d604639f84c821eb6c32fa7932e677d97b7f2f3232fc507de587d0d34b2355474b831c8c532e68e3f32f90b30fe8f8ad97972e53ede9c169ca869656710293dbb91b332b38e3ccf06cd1baad43b2e3a763f326db3d930e7da2b0d92d466546908ca2878429724cd02c0ea9ce53f06073deb20975a6f5ca9158df0d8b98d0ed463b733a90d6f976321a0ff69bd2df35f6bb4b8c4f0b8a0d446835dba8e5a12ac6fe00049fe85f253d6ac60a6a021faf68370cdbe2ea6432e24a56f7276119632c30149bbc9a43f1602da504d19e21328610e1f30fea1ad03604f346ab4561bd1636b8941c031af4296ae1ea23a62077f3cffc87892e402d657f143d63895a14e2fc33c9fa56502dbc418fb6e4acdba82bcfbd2ae96f4d8606fb7b9e4c228068b6841b508e64a4ac80d2ebdf32402c438c416424937c7056f5334e4c7077db5430ddcbaad8b916b214f98ba07081f74e418f075680a27ba72408d1308b9f438796ce2f57256c490ffc278a27720bdacb5fd41c8d85d7f323e74b705201340dd8c3d85742bb6f02eb4ff81ebd2504c63bd80c85f4dab48d216e642414f623e04d9ff75ac241cb4c762b3e5afccdb4f31b7a45f37ab241439bbab7e1d9e874d5177d620fbe26681e09e066552837df3312e28b11497c76506834e104b411d8010511655577cf0d0293aa009424564efe6b176f814313031c7b1122d9ca56008dd5c614670a3fc21a3da5942a71dd3ede7f811248ef4471b99deaf14c9c3f777c44650ba8e971e169997d87972f39244f6ac4eaced8e9961adef79372db0058c94ea21075f5419db88bce072d5d5bdac057d1fa91289eb104d52c6b67432e97ffea07a8237916356eac83b5ef2b3a1d893032174a3df95f018b0a3b792be73bc5a465744a8dbb9221e47968342162b728fd8c47c69a8e9a9caee530ac953fe5e8efced16c331333fddea344ebe384d8ad2206ba00f2c0dbc77710b0e839fdb71223f2e4c9caf586bb0b11542893ed0a2253c0691960b2091b8f855036fc50a6ef94a7c4bca3840997813ed84dfdddcfb17784b6f3957162569bf8f0ff70918ba83da5728c9a3982eb1ca3720a5508dbfd62312c2c83266e46be6dd3db2c944b984f768ded894fe54115deafffed56b4f9d2860766e5e45ad4bc40edaf6925fb458b8393a643d768fdd6645f2b712024b16ef9475e5f64325a5b198a3bb9f6a05108317e165de5a2135bb246afb1a721d0d4f1cdfa0f4fb2086a91e34a676b531585fc955f86f3cce9fbdfd95bb39340273bc0f0047a6e72cc0cb5c7506d609edd60910524e2584dcd0e3cf639b53f2b69431383eaa0304eee0cfdaab1cbc2a3c6da814c859202908fc785f5ec2110613d2cd37fa65a3ae0d40707cc4c51d7ca2756876261a8b5f5aa9eb54c05d77e2c01493a807aadee320e1ab455e3e3184a9549b4d992c8f276808c984afa69c1dc12769d4fc0be71f93dd75ca3ffd0dbeab9ed302b92d01eaf5f5d08c0f658f492d28a6a7b6999081d7aa634dd76b91a559e07436185a5ee3f42a40893065adb7263db752909fe5b0de2820da0031d9db2441a3f4695e81809e3acf597e586b939e38af2eb3ee588a9010d5dfdd855ff83c517fd47d3c8ddac0788e78460313221ba45917a9ab3cf2fc65f8c2a358e068df219a841ae30086f1e497e81c8217c5e04f69609f059eeaf3b23e285383d48615ce12c604d8f514cefbcbc7e27f6a75ff7f56bd1a1c1ddf30966d23b321f7abb64fc2364c209b53f54c0cc6486a4f74807f9befb1f9bc0e5a5b7d753fa361e30e8a434ef6bd63bba42dd4bad3a809188f56bb59f5beaed7c18b85d6c57687712060b3e5f606037bd6904922823d5bd4e2028b5f6a5ae05fdeb3e2c735f8a7a6cea670daaf81a041fc78cc487e1f1fe5d5135a74a0cad2c4cc7f3f0dbd13f44421b67b02a4e627477c75eaacad64652c8b82ecc21659b4c66f552110dd2dc8654f8fa490fa3f350751fcf077655ca25b5cb4c0c274ba2f36620a5cfb7fc2bf18d7fa5071d0a69305e7c4b9fc7f084e6f488e1956e9eb093dc2d3cc70f9ef0cb2c577f5977575d7451a51ea145c9011803f398f502bd58fd18b69fead7c11f70184c3e7bc2f633223cecbfb5e18e1e3e1e871189d522710f45d513a704f25a6e59faa8e95799c2f845048b3bc02e9cca1d15144556fe5062e4ffdbd343fc690db44e3090ff91ea2dea472dd0f22bbf3f3be8c522088fb12908381262b8ac7704218b7e28a309ffb40abddf1783edc0599ec9f8f3dab9150c9dd732fc7ddfee7ed26671d80de193d2df8e81d1f9353aa496958842436789bce7fca3d1be47e8239b4b587768633bb11b9876a864f5722e2249b0e04eff44862002babc873f9d6c70d743d1e0e8c2b5f586a8f1eed6bd9b609bfda61a29c0b8d0a4957141a3f66c4eb46146c6a99c02281e8b889927e651fb76cc1ca8b210f04c6d6e9003ad815bf96db5a8ad80242f305498f7df09a8ff3954668e1d8035b2d72d46818b233d238b4aa7baf075514bc8d6e3e38cae9aa96ab69ac269c7844a39d15f168280d630f2fa33786cece62efb20ffacb4d9aca947fbfeaab460d127563c99ecc207879e2202d53a3282b1da4c215bf0a195bd79e358b94858ea4a10fd84c03521d4f5a0771b6a9acf8dd61a3e25a145022467ed9cd1882ba2eb6b7f3efe9b41e56c6c969e06cb2e56a544fdf84d308c3499a4a52691</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【表达技巧】跟罗永浩学演讲</title>
    <link href="http://luhao.wiki/posts/talk/"/>
    <id>http://luhao.wiki/posts/talk/</id>
    <published>2023-07-09T16:52:35.000Z</published>
    <updated>2023-08-31T02:26:35.047Z</updated>
    
    <content type="html"><![CDATA[<p><code>罗永浩15堂演讲私教课</code>学习总结<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>B站视频：<a href="https://www.bilibili.com/video/BV1PP411T7fv">【演讲】罗永浩15堂演讲私教课</a></li><li>知乎：<a href="https://zhuanlan.zhihu.com/p/619973080">【学习笔记】罗永浩演讲私教课</a></li></ul></div><h2 id="前言">前言</h2><p>开这篇是因为近期，有一个在公司内部分享的计划。<br>因为不是技术类型的讲座，技巧因素占比就会很低（而技术分享更注重将东西解释清楚）。所以萌生学习这类演讲 + 表达技巧的念头。<br>认识罗永浩，最初是 6个亿 的负债梗，更深入的是在 脱口秀大会 作为嘉宾时期的发言，对其有几个认识：</p><ul><li><p><strong>听感</strong>：表达清晰连贯，但嗓音条件恶劣（据本人调侃是老太监音色）</p></li><li><p><strong>逻辑</strong>：知识涉猎广泛，且临场反应迅速（后者是幽默感 + 经验累积）</p></li><li><p><strong>内核</strong>：善于制造一句<strong>核心话题</strong>，并反复洗脑callback（如脱口秀的“大局观”，如演讲课的“因为大脑就是被这样设计的”…）</p></li></ul><h3 id="关于这个教程">关于这个教程</h3><p>基于罗老师 <strong>“演讲都是有套路和技巧”</strong> 的观点，将其演讲课的套路总结如下三点：</p><ul><li><p><strong>为什么要这样?（赢得认同）</strong></p></li><li><p><strong>如何达到这样?（方法论）</strong></p></li><li><p><strong>举例、类比论证（深入人心）</strong></p></li></ul><h2 id="十三个要素">十三个要素</h2><p>这些技巧比较多，难以短时间记忆和掌握，因此先记录一下核心观念，剩下的在实践中掌握和理解。</p><div class="markmap-container" style="height:350px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;让观众听下去&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<strong>讲笑话</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;吹牛逼&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;装逼&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;让观众容易理解&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;讲故事&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<strong>作类比</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<strong>三段式</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;提问题&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;具有说服力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;有逻辑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;有数据&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;让观众产生共鸣&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;有激情&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;有情感&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<strong>升华境界</strong>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;核心&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<strong>有画面</strong>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h3 id="精华摘要">精华摘要</h3><ul><li><p>开始一场演讲的最好方式，就是<font color="#ef6d3b"><strong>讲笑话或讲故事</strong></font>。（千万不能讲道理）</p></li><li><p>对于晦涩或陌生的事物，要<font color="#ef6d3b"><strong>巧用类比</strong></font>，如 谈判就是找交集。</p></li><li><p>开始主体内容前，用<font color="#ef6d3b"><strong>三段式</strong></font>介绍提纲。（思维导图）</p></li><li><p>讲故事的三要素：冲突（吸引注意力） + 行动（故事的发展） + 结局（表达的内涵）</p></li></ul><h2 id="其他技巧">其他技巧</h2><h3 id="1-用坐标系描述事物">1. 用坐标系描述事物</h3><p>举例，如何看待 <strong>“量化交易”</strong>?</p><p>首先，一个交易策略的评判标准有两个维度，分别是：</p><ul><li>Interpret：（金融底层的）解释能力</li><li>Predict：（金融市场的）预测能力</li></ul><p>因此，引入一个二维坐标系，甚至可以类比不同事物在其分布，例如：</p><ul><li>进化论：能解释为什么猿猴进化到人类，但无法预测人类未来进化的趋势</li><li>地心说：能预测太阳东升西落，但底层科学原理是错的</li></ul><p><img src="/images/interpret-predict.png" alt=""></p><p>最后，根据 量化交易 预测能力强，但无法自圆其说的特点，可以将它放在类似进化论的位置。</p><p><strong>该方法论可以让听众直观清晰地了解事物的多维度特征。</strong></p><hr><h3 id="2-结尾升华主题">2. 结尾升华主题</h3><ul><li><p>几天过后，观众未必会记得你讲了什么，但他们或许能从情感上认同你。</p></li><li><p>这很大程度上，来源于结尾的几句升华。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;罗永浩15堂演讲私教课&lt;/code&gt;学习总结&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【cpp】Memory</title>
    <link href="http://luhao.wiki/posts/memory/"/>
    <id>http://luhao.wiki/posts/memory/</id>
    <published>2023-07-04T17:01:35.000Z</published>
    <updated>2023-07-22T13:03:25.859Z</updated>
    
    <content type="html"><![CDATA[<p>C++的内存分配与管理<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>理论偏：<a href="/posts/virtual-memory/">【CSAPP】Virtual Memory</a></li><li>本篇结合 C/C++ 了解内存分配相关领域知识</li><li>ptmalloc，tcmalloc，jemalloc ...</li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;malloc / free&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;new / delete&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;system-call&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#brk-sbrk\&quot;>brk / sbrk</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#mmap\&quot;>mmap</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;c-malloc&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#ptmalloc\&quot;>ptmalloc（glibc）</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;tcmalloc（google）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;jemalloc（facebok）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;mimalloc（microsoft）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;c++&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;std::allocator&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="malloc-free">malloc/free</h2><ul><li>阅读文档：<a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li>使用的时候多查阅文档，注意 <code>malloc</code> 使用时要判断 <code>NULL</code> 避免内存分配失败</li></ul><pre><code class="language-c++">#include &lt;unistd.h&gt;void *malloc(size_t size);void *calloc( size_t num, size_t size );void *realloc( void *ptr, size_t new_size );</code></pre><ul><li>分配过程：↓</li><li>需要考虑字节对齐，注意被释放后的内存也可能重复利用，这也解释了为什么野指针的 <code>undefined behavior</code></li></ul><p><img src="/images/malloc-demo.png" alt=""></p><h2 id="new-delete">new/delete</h2><p><a href="/posts/virtual-memory/#u-class-black-mallco-free-u">malloc / free</a> 前面有介绍过。</p><p><strong>以 <code>A* a = new A</code>为例，通过 <a href="https://gcc.godbolt.org/">godbolt</a> 查看汇编代码，发现其有两段逻辑组成：</strong></p><ul><li>调用 <code>new operator</code></li><li>调用 <code>class's constructor</code></li></ul><pre><code class="language-asm">call    operator new(unsigned long)mov     rbx, raxmov     rdi, rbxcall    A::A() [complete object constructor]</code></pre><p><strong>相应的 <code>delete</code> 方法，也对应如下的两段逻辑：</strong></p><ul><li>调用 <code>class's destructor</code></li><li>调用 <code>delete operator</code></li></ul><p>下面重点展开对 <code>new / delete</code> 两个操作符的学习（推荐阅读 <a href="https://www.programiz.com/cpp-programming/operators">C++ Operators</a> 和 <a href="https://en.cppreference.com/w/cpp/language/operators">cppreference operator overloading</a>）</p><p><strong>先看 libc 的 <a href="https://codebrowser.dev/llvm/libcxx/src/new.cpp.html">源码实现</a>，可以看到是对 <code>malloc</code> 的一层封装。</strong><br>如果类自定义了 <code>new /delete</code>，则优先调用它们。</p><pre><code class="language-C++">void *operator new(std::size_t size) _THROW_BAD_ALLOC{    if (size == 0)        size = 1;    void* p;    while ((p = ::malloc(size)) == nullptr)    {        // If malloc fails and there is a new_handler,        // call it to try free up memory.        std::new_handler nh = std::get_new_handler();        if (nh)            nh();        else#ifndef _LIBCPP_HAS_NO_EXCEPTIONS            throw std::bad_alloc();#else            break;#endif    }    return p;}voidoperator delete(void* ptr) noexcept{    ::free(ptr);}</code></pre><h2 id="System-Call">System Call</h2><p>程序中的内存分配有三个层次，如下图。<br>最终调用的还是Linux/Windows中的操作系统API：如sbrk, mmap… 因此需要重点掌握这些系统调用。</p><p><img src="/images/memory-call.png" alt=""></p><h3 id="brk-sbrk">brk, sbrk</h3><blockquote><p><em>change data segment size</em></p></blockquote><p>参考阅读  <a href="https://www.cnblogs.com/sylar5/p/11508821.html">cnblog: brk 和 sbrk 区别</a></p><p>linux man 手册中描述两者的作用是改变 <code>data segment</code> 的结束地址。<br>通俗地理解就是，<code>brk</code>函数会重新设置 <code>heap</code> 的高位地址，而 <code>sbrk</code>函数会根据大小来调整 <code>heap</code> 的容量。</p><p>两个函数的定义如下：</p><pre><code class="language-C++"> #include &lt;unistd.h&gt;int brk(void *addr);void *sbrk(intptr_t increment);</code></pre><h3 id="mmap">mmap</h3><blockquote><p><em>map (or unmap) files or devices into memory</em></p></blockquote><pre><code class="language-C++">#include &lt;sys/mman.h&gt;void *mmap(void *addr, size_t length, int prot, int flags,            int fd, off_t offset);int munmap(void *addr, size_t length);</code></pre><h2 id="ptmalloc">ptmalloc</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++的内存分配与管理&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>日志：2023年7月</title>
    <link href="http://luhao.wiki/posts/2023/7/"/>
    <id>http://luhao.wiki/posts/2023/7/</id>
    <published>2023-06-30T16:23:22.000Z</published>
    <updated>2023-09-25T08:56:10.142Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="97e14be9e854e1b3237cbaf95d9dc3cf8f8b75fab2a1a1bc54fde494d8cb23cd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Google评分卡💯及自评</title>
    <link href="http://luhao.wiki/posts/grade/"/>
    <id>http://luhao.wiki/posts/grade/</id>
    <published>2023-06-27T16:40:51.000Z</published>
    <updated>2023-08-16T17:08:18.021Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>Google将技术能力划分为 0~11 的等级</li><li>自我评估技术，判断下一步需要作出的努力</li></ul></div><h2 id="↓-Self-Evaluation">↓ Self-Evaluation</h2><table><thead><tr><th style="text-align:left">↓ 基础要求</th><th style="text-align:center">grade</th></tr></thead><tbody><tr><td style="text-align:left">熟悉数据结构与算法</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟练使用 C++11</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">熟悉并掌握 C++高级特性 (14/17/20)</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟练使用 Python 等脚本语言</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left">熟悉batch、Shell、Linux常见指令</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉MySQL等数据库的设计、优化</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">熟悉编译原理、编译优化</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉 vscode、sublime、vim 等IDE、Editor</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">熟悉 Jenkins、TeamCity 等 CI&amp;CD 平台</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉 ChatGPT、CodeMaker 等 AI工具</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉Linux内核，如进程管理、内存管理、文件系统等</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉网络协议和网络编程，熟悉websocket、HTTP、socket、TCP/IP等</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">↓ <strong>C/C++领域</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">内存管理、内存分配、ASan原理、内存错误及排查</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">模板、SFINAE、type traits、metaprogramming</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">并发、memory order、同步、互斥、boost::asio</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">编译优化、SIMD、ISPC、CPU性能分析</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">C++编码规范</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">↓ <strong>Python2/3领域</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Todo</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">↓ <strong>工具/pipline领域</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Jenkins 日常工作使用，无阻碍</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">VSCode 日常开发使用、多个插件开发经验</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Vim 熟练使用、vimrc配置</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left">Git 基本的GUI、CMD操作</td><td style="text-align:center">2 ~ 3</td></tr><tr><td style="text-align:left">↓ <strong>加分项</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">具备内存优化经验、熟悉linux内存分配</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉GPU使用，或有底层基础库（CUDA，mkl、openblas等）优化经验</td><td style="text-align:center">0 ~ 1</td></tr><tr><td style="text-align:left">良好的系统设计能力，如 performance、reliability、availability 多维度考量程序</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉机器学习平台相关工具，比如k8s，kubeflow，mlflow，automl等</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">有视频解码和渲染开发经验者优先</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">有存储系统、分布式系统等底层开发经验</td><td style="text-align:center">0</td></tr></tbody></table><br>## ↓ Google-Standards<table><thead><tr><th style="text-align:center">等级</th><th style="text-align:left">标准</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">You are unfamiliar with the subject area</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">一窍不通</td></tr><tr><td style="text-align:center">1</td><td style="text-align:left">You can read/understand the most fundamental aspects of the subject area</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">理解基本概念</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">Ability to implement small changes,understand basic principles and able to figure out additional details with minimal help</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">能够实现一些小改动，在别人帮助下钻研更多细节</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">Basic proficiency in a subject area without relying on help</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">基本掌握和熟练使用</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">You are comfortable with the subject area and all routine work on it</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">足够精通，足够应对所有日常工作</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">An even lower degree of reliance on reference materials. Deeper skills in a field or specific technology in the subject area.</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">深耕某个细分领域</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">Ability to develop large programs and systems from scratch</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">独立开发大型系统</td></tr><tr><td style="text-align:center">7~10</td><td style="text-align:left">脚踏实地慢慢来吧…</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Google将技术能力划分为 0~11 的等级&lt;/li&gt;
&lt;li&gt;自我评估技术，判断下一步需要作出的努力&lt;/li&gt;
&lt;/ul&gt;
&lt;/d</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>【网络】HTTP协议进阶</title>
    <link href="http://luhao.wiki/posts/http/2/"/>
    <id>http://luhao.wiki/posts/http/2/</id>
    <published>2023-06-26T12:51:27.000Z</published>
    <updated>2023-07-01T17:08:49.171Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE">专栏：透视HTTP协议</a> 墙裂推荐 ⭐</li><li><a href="/posts/http-1/">HTTP协议入门</a></li></ul></div><div class="markmap-container" style="height:500px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTTP数据编码&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#MIME-type\&quot;>MIME-type</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;&amp;quot;Accept&amp;quot;&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;&amp;quot;Content-Type&amp;quot;&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;HTTP大文件&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;数据压缩&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;chunked传输&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;HTTP连接&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;短连接&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;长连接&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#队首阻塞\&quot;>队首阻塞</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie\&quot;>Cookie</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie原理\&quot;>Cookie原理</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie生命周期\&quot;>Cookie生命周期</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie作用域\&quot;>Cookie作用域</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Cookie应用&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie应用：身份识别⭐\&quot;>身份识别</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie应用：广告追踪\&quot;>广告追踪</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP代理\&quot;>HTTP代理</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#代理字段\&quot;>代理字段</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#代理协议\&quot;>代理协议</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#负载均衡\&quot;>负载均衡</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;Cache&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#Cache：浏览器\&quot;>浏览器cache</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#Cache：服务器\&quot;>服务器cache</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;<a href=\&quot;#Chrome调试\&quot;>Chrome调试</a>&quot;}],&quot;p&quot;:{}}"></svg></div><h2 id="HTTP数据编码">HTTP数据编码</h2><p><font color="#FF1E10"><strong>todo</strong></font></p><h3 id="MIME-type">MIME-type</h3><p>使用svn更新的时候有一栏会标注 <code>Mime type</code>，可以观察到除了常见代码文件外，都是以 <code>application/octet-stream</code> 格式传输，它代表未知的二进制数据。</p><p><img src="/images/svn-mime-type.png" alt=""></p><h2 id="HTTP大文件">HTTP大文件</h2><p><font color="#FF1E10"><strong>todo</strong></font></p><h2 id="HTTP连接">HTTP连接</h2><p><a href="/posts/http-1/#TCP">前面说过</a>，HTTP协议 是运行在 TCP/IP协议 之上，因此每一次新的HTTP连接，都需要经过TCP协议的 <strong>“3次握手 &amp; 4次挥手”</strong>，这无形中降低了HTTP协议连接的代价。</p><p>因为 TCP位于传输层，HTTP位于应用层，所以可以用如下的类比来理解连接的代价：</p><ul><li>开关机：TCP连接</li><li>使用电脑办公：HTTP连接</li></ul><p>每次使用电脑办公，都需要打开电脑，在使用完毕后又需要关闭电脑。这就好比 <strong>HTTP 短连接</strong>。而更常规地做法是，保持电脑的始终开启，这样利于随时使用，这就好比 <strong>HTTP 长连接</strong>。</p><p><img src="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/assets/57b3d80234a1f1b8c538a376aa01d3b4.png" alt=""></p><h3 id="Connection字段">Connection字段</h3><p>当HTTP请求采取长连接时，在响应报文的 “Connection” 字段会标记为 <strong>keep-alive</strong>，此时服务器不会在短时间内断开连接，但是为了降低服务器的无效占用，Web-Server 往往会在一段时间内若没有任何数据收发，便会主动断开连接，断开后会收到 “Connection: close” 的字段。</p><h3 id="队首阻塞">队首阻塞</h3><p>因为 HTTP协议 采取 “一问一答” 的模式，即典型的 <strong>FIFO</strong> 结构，当队首的请求因为处理太慢而耽误时间，那么队列后面的所有请求也会相应地被阻塞，这就是 <a href="https://en.wikipedia.org/wiki/Head-of-line_blocking"><strong>Head-of-line blocking</strong></a>。</p><p>类比理解为：食堂排队打饭，每次刷卡是一次 Request，每次领到饭是一次 Response，每处理完一次成对的 Request-Response，队伍才能往前推进一步。只要前面打饭的慢了，后面所有人都会受影响。</p><p>解决方案是：并发连接，即增加打饭的窗口。这里不详细介绍。</p><h2 id="Cookie">Cookie</h2><p>前面说过 <strong>HTTP连接 是无状态的，即没有任何记忆</strong>。即使某个请求会让服务器出现500的错误，下次请求时服务器依然会 “热情招待”。这迫切得需要一种缓存的机制，Cookie应运而生。</p><blockquote><p>Cookie 是服务器委托浏览器存储的一些数据，让服务器有了“记忆能力”</p></blockquote><h3 id="Cookie原理">Cookie原理</h3><p>Response报文中，<strong>利用 <code>Set-Cookie</code>字段发送多个 “key=value” 形式的 cookie值</strong>，这些会由浏览器负责记录下来。当浏览器下次访问同样的地址时，Request报文会自动利用 <code>Cookie</code>字段将本地缓存的 cookie 发送给服务器，这样服务器就知道自己的身份了。</p><p>因为 Cookie 是与浏览器绑定的，如果你换个浏览器或者换台电脑，就会丢失之前的 Cookie记录，此时服务器也会重走一遍新的 <code>Set-Cookie</code> 流程。</p><h3 id="Cookie生命周期">Cookie生命周期</h3><p>Cookie拥有自己的生命周期，它通过 <code>Expires</code> 或 <code>Max-Age</code> 两个字段实现。当超过标记的有效期后，浏览器会自动在本地删除记录，不会再通过HTTP请求发送给服务器。</p><ul><li><code>Expires</code>：记录“过期时间”，如 <code>Fri, 07-Jun-23 20:00:00 GMT</code></li><li><code>Max-Age</code>：记录“保质期”，单秒是秒。将浏览器收到相应的时间加上 <code>Max-Age</code>，即得到 <code>Expires</code></li></ul><h3 id="Cookie作用域">Cookie作用域</h3><p>浏览器会存储大量的Cookies，因此需要标记其作用域，即发送给哪个服务器或者URL，常用字段是：（不清楚的推荐阅读 <a href="/posts/http-1/#URL">HTTP协议之URL</a>）</p><ul><li><code>Domain</code>：域名</li><li><code>Path</code>：路径</li></ul><h3 id="Cookie应用：身份识别⭐">Cookie应用：身份识别⭐</h3><p>登录taobao等电商网站时，浏览器会自动保存你的登录账户（或密码），就便是利用cookies实现的。它同时还会记录你的浏览记录和购物车。</p><p>大概格式为：<code>name=xxxxx....</code></p><h3 id="Cookie应用：广告追踪">Cookie应用：广告追踪</h3><p>当你浏览各种网站时，它们会根据你的访问喜好作行为分析，然后定向推荐一些图片广告给你，这就是利用cookies的原理。<br>这部分成为 “第三方Cookie”，属于搜集用户隐私的行为，浏览器经常会弹出确认框以请求权限。</p><h2 id="HTTP代理">HTTP代理</h2><p>传统的HTTP请求是 <code>Client-Server</code>，现在常常有“第三者插足”，即在中间会引入一个 <strong>代理服务器（Proxy Server）</strong>，它的角色是双面的：</p><ul><li>面对上游：充当客户端，发送请求</li><li>面对下游：充当服务端，响应请求</li></ul><div class="admonition note"><p class="admonition-title">类比：消费者（浏览器）—— 便利店（代理）—— 源服务器（批发市场）</p></div><div class="admonition note"><p class="admonition-title">定理：计算机领域的任何问题，都可以通过引入一个中间层来解决</p></div><p><img src="/images/proxy-server.png" alt=""></p><h3 id="代理字段">代理字段</h3><p><strong>代理服务器 通过字段 <code>Via</code> 标明代理的身份</strong>，在HTTP请求的链路中，每当报文经过一个代理节点，代理服务器就会将自身的信息追加到 <code>Via</code>字段的末尾。<br>另通过如下字段标明其他信息：</p><ul><li><code>X-Forwarded-For</code>：追加代理的域名</li><li><code>X-Real-IP</code>：客户端真实IP</li></ul><p><img src="/images/proxy-process.png" alt=""></p><h3 id="代理协议">代理协议</h3><p>针对代理的HTTP请求，<a href="https://www.haproxy.org/">HAProxy</a> 公司推出了专门的代理请求协议，The Proxy Protocol。<br>其基本格式为：开头必须是“PROXY”五个大写字母，然后是“TCP4”或者“TCP6”，表示客户端的 IP 地址类型，再后面是请求方地址、应答方地址、请求方端口号、应答方端口号，最后用一个回车换行（\r\n）结束。</p><pre><code>PROXY TCP4 1.15.115.4 110.42.228.178 32200 80\r\n</code></pre><h3 id="负载均衡">负载均衡</h3><p>当一个区域所有的消费者，都蜂拥而至一个批发市场购物，就会造成堵塞排场对的现象。<br>因此 “负载均衡” 的解决方案是，在每个居民集中地地区设置一个小商超，或者经销商，而自己只负责货物的批发和调配。消费者 择近择闲 选择小商超去购物即可。</p><p><strong>通过中间的代理服务器，将请求均匀合理地分散到多台源服务器</strong>，能够有效提高系统的响应速度和利用率，这就是 负载均衡 的基本原理。</p><p>而如何挑选转发的服务器，有如下的思路：</p><ul><li>哈希：如尾数单号的去A服，尾数双号的去B服</li><li>轮询：对于新请求，分配一个最空闲的Server去处理</li></ul><h2 id="Cache">Cache</h2><div class="admonition note"><p class="admonition-title">两句话讲清楚Cache</p><ul><li>浏览器Cache：消费者家里囤（上次买的）货</li><li>服务器Cache：小商超囤（上次卖的）货</li></ul></div><h3 id="Cache：浏览器">Cache：浏览器</h3><p>当浏览器频繁每秒请求同样的数据时，如果服务器不厌其烦的依次发送，会造成很大的性能和流量浪费。因此需要客户端（即浏览器）的缓存。</p><p><strong>一个带Cache的HTTP请求流程是：</strong></p><ul><li><p>浏览器检查cache，若有则直接读取，若无则发送新的HTTP请求；</p></li><li><p>服务器响应请求，并返回资源，同时标记资源的有限期；</p></li><li><p>浏览器接受请求，并缓存资源；</p></li></ul><p>而<strong>标记资源的有效期字段是 <code>max-age</code></strong>，即cache的生存时间（秒），过期则被浏览器自动销毁。<br>其他常见字段有：</p><ul><li><code>no_store</code>：不允许缓存，如一些高频的秒杀字段</li><li><code>no_cache</code>：使用缓存前，检查是否有最新版本</li><li><code>muster-revalidate</code>：不过期则直接使用缓存</li></ul><h3 id="Cache：服务器">Cache：服务器</h3><p><font color="#FF1E10"><strong>Todo</strong></font>，与HTTP协议关系不大，可以了解 Redis、Varnish 等缓存技术。</p><h2 id="Chrome调试">Chrome调试</h2><p>Chrome浏览器提供了丰富而强大的调试功能，按下 <code>F12</code> 或者右键点击“检查” 以进入调试页面。</p><img src="/images/chrome-http-debug.png" height="400">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%</summary>
      
    
    
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/"/>
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Networking</title>
    <link href="http://luhao.wiki/posts/network/"/>
    <id>http://luhao.wiki/posts/network/</id>
    <published>2023-06-22T12:18:00.000Z</published>
    <updated>2023-06-26T17:48:59.056Z</updated>
    
    <content type="html"><![CDATA[<p>计算机网络大纲，HTTP/TCP/UDP…<span id="more"></span></p><div class="markmap-container" style="height:425px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Network Model&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;TCP/IP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;OSI&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;Protocol&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;HTTP&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;/posts/http-1/\&quot;>HTTP协议入门</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;/posts/http-2/\&quot;>HTTP协议进阶</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;TCP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;UDP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;KCP&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;Web Server&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;Apache&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Nginx&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;Performance&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;RPS：每秒处理数&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;TPR：平均响应时间&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;Concurrency：并发量&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;Tools&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;Telnet&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#/posts/2G7VBZ2/#curl\&quot;>curl</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;wireshark&quot;}]}],&quot;p&quot;:{}}"></svg></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;计算机网络大纲，HTTP/TCP/UDP…&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/"/>
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>【网络】HTTP协议入门</title>
    <link href="http://luhao.wiki/posts/http/1/"/>
    <id>http://luhao.wiki/posts/http/1/</id>
    <published>2023-06-21T16:15:09.000Z</published>
    <updated>2023-07-01T17:08:46.323Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE">专栏：透视HTTP协议</a> 墙裂推荐 ⭐</li></ul></div><div class="markmap-container" style="height:480px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTTP&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#Hypertext\&quot;>Hypertext</a>（html）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;text&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;media&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;hyperlink&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#Transfer\&quot;>Transfer</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;client&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Chrome, Edge&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;Telnet&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;server&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;https://nginx.org/\&quot;>Nginx</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;https://httpd.apache.org/\&quot;>Apache</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;CDN（内容分发）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\&quot;>负载均衡</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;加速访问&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;#Protocol\&quot;>Protocol</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#TCP-IP\&quot;>TCP/IP</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#IP\&quot;>IP</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#TCP\&quot;>TCP</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#DNS\&quot;>DNS</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#域名解析\&quot;>域名解析</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#DNS缓存\&quot;>DNS缓存</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#URL\&quot;>URL</a>（网址）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#URL\&quot;>示例⭐</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP抓包\&quot;>HTTP抓包</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;wireshark&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP报文\&quot;>HTTP报文⭐</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;start-line&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;headers&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;body&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP方法\&quot;>HTTP方法⭐</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;GET, HEAD&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;POST&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP状态码\&quot;>HTTP状态码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP特点\&quot;>HTTP特点</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;.&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;.&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;可靠传输&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;明文传输&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;无状态&quot;}]}]}]}],&quot;p&quot;:{}}"></svg></div><h2 id="HTTP协议">HTTP协议</h2><p>HTTP 协议是 <a href="https://en.wikipedia.org/wiki/HTTP"><em><strong>HyperText Transfer Protocol</strong></em></a> 的缩写，它是一种用于超媒体信息传输的应用层协议，是互联网通信的基础。</p><p>如何通俗地理解 HTTP协议 呢？</p><div class="admonition todo"><p class="admonition-title">如何理解新概念?</p><ol><li>任何技术思想，在现实生活中都能找到映射</li><li>巧用 “类比” 的手段</li></ol></div><h3 id="Hypertext">Hypertext</h3><p>在互联网早期，传输的信息只有简单的字符文字，即 <code>Text</code>。随着信息爆炸式地增长，网络需要传输的信息被扩展为 图片、音频、视频等等，这些就是超文本。<br>超文本的核心是 <a href="https://en.wikipedia.org/wiki/Hyperlink">超链接 Hyperlink</a>，通过互相引用而形成复杂的网状信息结构。</p><h3 id="Transfer">Transfer</h3><p>HTTP 是一种 <code>Request-Response</code>协议，即将信息在 A、B 两个点之间双向传输，因此有两类参与方：</p><ul><li><code>client</code><br>http请求的发起方，通常指浏览器（如Chrome、Edge）</li><li><code>server</code><br>http请求的接收方，又称为 <code>Web Server</code>，如 <a href="https://nginx.org/">Nginx</a>、<a href="https://httpd.apache.org/">Apache</a> 都是常见的服务器框架</li><li><code>CDN</code><br>client和server之间通常不会直连，而是经过 <code>CDN</code>(<a href="https://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Network</a>) 这个中间商。它能够实现安全防护、负载均衡等常见功能。</li></ul><h3 id="Protocol">Protocol</h3><p>HTTP 是众多网络协议中的一个，先理解什么是协议?<br>以毕业生签署的“三方协议”为例，参与对象是多元的（自己、学校、企业），同时协议还会规定各方需履行的义务，以及该做什么和不该做什么。因此协议的核心要素是：</p><ul><li><p>多方参与<br>client、server、中转者…</p></li><li><p>通信规范<br>如规定 <code>Get</code>、<code>Post</code> 的请求报文格式，如请求的错误处理等等</p></li></ul><p>在 HTTP 的发展历程中，也经历过很多大版本的迭代，如 <code>HTTP/0.9</code>、<code>HTTP/1.0</code>、<code>HTTP/2</code>、<code>HTTP/3</code>等等。</p><h2 id="TCP-IP">TCP/IP</h2><p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP协议</a> 是整个互联网的标准通信协议，它实际上是一系列协议的统称，其中最核心的是 TCP 和 IP，这里篇幅有限只作简单介绍。</p><h3 id="IP">IP</h3><p><strong>IP协议（<a href="https://en.wikipedia.org/wiki/Internet_Protocol">Internet Protocol</a>）主要解决寻址和路由问题</strong>，它提出 <strong>IP地址</strong> 的概念来定位互联网上的每一台计算机。因此可以将其类比为电话号码，而整个运营商的拨号系统就是一个 IP协议。</p><p>IP协议又分为 IPv4 和 IPv6，大部分仍在使用前者，即IP地址是4个用冒号分割的数字，例如 <code>1.15.115.4</code>。之所以出现 IPv6，是因为v4分配的地址已经捉襟见肘，不够整个互联网的使用。</p><h3 id="TCP">TCP</h3><p><strong>TCP协议（<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol</a>）是一种 传输控制协议</strong>，它基于 IP协议 之上，提供可靠的、字节流形式的通信，也是HTTP协议得以实现的基础。</p><p>之所以了解TCP/IP协议，是因为HTTP运行在前者上，因此又称为 <code>HTTP over TCP/IP</code>。</p><h2 id="DNS">DNS</h2><p>在TCP/IP协议中，通常使用纯数字的 IP地址 来标记计算机，这非常不利于用于的使用和记忆。<br>因此 <strong>DNS（<a href="https://en.wikipedia.org/wiki/Domain_Name_System">Domain Name System</a>）域名系统</strong> 应运而生，它使用具有实际含义的名称来替代IP地址（即英文+数字的组合，也可以是汉字），例如：<code>95.211.80.227</code>是IP地址，<code>nginx.org</code>是其域名，两者指向的是同一个web服务器。</p><h3 id="域名解析">域名解析</h3><p>以 <code>www.apple.com</code> 这个域名为例，当用户尝试访问该域名时，会经过至少3次的DNS域名解析服务器：</p><ul><li><em>Root DNS Server</em>：管理 <code>com</code>, <code>cn</code>, <code>net</code>等顶级域名的IP地址。</li><li><em>Top-level DNS Server</em>：管理 <code>apple.com</code> 的IP地址。</li><li><em>Authoritative DNS Server</em>：管理 <code>www.apple.com</code>的IP地址。</li></ul><h3 id="DNS缓存">DNS缓存</h3><p>目前全世界有 13组 <code>Root-DNS-Server</code> 提供顶级域名的解析服务，但因为全世界的网民都在请求，会造成系统的拥挤并降低访问速度，优化手段之一就是利用 <em>DNS缓存</em>。</p><p>当你已经访问过 <code>www.apple.com</code>，操作系统就会在某个文件（如下↓）<strong>缓存解析后的IP地址</strong>，这样下次访问时，就不再需要经过 DNF解析服务器了。</p><ul><li>linux: <code>/etc/hosts</code></li><li>windows: <code>C:\WINDOWS\system32\drivers\etc\hosts</code></li></ul><h2 id="URL">URL</h2><p>通过 TCP/IP协议 加上 DNS 的组合，我们实现了访问互联网中任意一台机器，但是每台机器上的资源仍然有很多，如何对他们加以区分呢？</p><p><strong>URL（<a href="https://en.wikipedia.org/wiki/URL">Uniform Resource Locator</a>）含义是 统一资源定位符，即俗称的网址</strong>，如下是其组成格式：</p><p><img src="/images/URI.svg" alt=""></p><ul><li><code>scheme</code>：指定http、https、ftp等协议<ul><li><code>file</code>：本地文件</li><li><code>ftp</code>：文件传输</li><li><code>ssh</code>：加密登录</li></ul></li><li><code>://</code>：约定俗成的分隔符</li><li><code>user:passwd@</code>：明文身份信息，已被弃用</li><li><code>host:port</code>：省略端口会用默认值，如 HTTP 80，HTTPS 443</li><li><code>path</code>：资源的在主机的路径，也可能是服务路径</li><li><code>?query</code>：查询参数</li><li><code>#fragment</code>：仅浏览器使用，用于锚点跳转</li></ul><h2 id="HTTP抓包">HTTP抓包</h2><p>“纸上得来终觉浅”，我们通过在windows下快速搭建一个最小化的HTTP模拟环境，借助抓包工具 wireshark 来对 HTTP 的细节一探究竟。</p><blockquote><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/07%20%20%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%EF%BC%8C%E6%90%AD%E5%BB%BAHTTP%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83.md">搭建http本地实验环境</a></li><li><a href="https://zhuanlan.zhihu.com/p/82498482">知乎: Wireshark抓包指南</a></li></ul></blockquote><p>在启动本地web服务器后，尝试在浏览器输入 <code>127.0.0.1</code> 访问该server，然后按下回车，wireshark抓包（限制<code>http/tcp port 80</code>）抓包的结果如下：</p><ul><li>前三个包：TCP协议的 “三次握手”</li><li>中间四个包：HTTP协议发送了一个 <code>GET /HTTP/1.1</code> 的请求报文，Server回复OK</li><li>后四个包：HTTP协议发送了请求 <code>/favicon.io</code> 的请求报文，Server回复404</li></ul><p>通过http抓包，基本清楚了http协议的工作流程，<strong>核心是 “Requst-Response”，即 “一问一答”的模式</strong>。</p><p><img src="/images/wireshark-http.png" alt=""></p><h2 id="HTTP报文">HTTP报文</h2><p>通过wireshark也可以清楚看到http请求发送的报文内容，其全部由 ASCII文本 组成，非常容易肉眼阅读。</p><p>HTTP协议的 requet报文 和 response报文 的组成机构基本相同，由三个部分组成，每个部分由一个空行 “CRLF（0x0D0A）” 隔开:</p><ul><li>请求报文</li></ul><div class="markmap-container" style="height:220px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Request-line&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Method&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;URI&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;http-version&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;Request-header&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Key-Value&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;eg. Host: 127.0.0.1&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;eg. Connection: keep-alive&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;eg. User-Agent: xxxxxx&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Request-body（空）&quot;}],&quot;p&quot;:{}}"></svg></div><ul><li>回复报文</li></ul><div class="markmap-container" style="height:180px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Response-line&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;http-version&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;Status-code&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;200：成功&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;404：查找失败&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Reason（描述原因）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Response-header（同上）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Response-body&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;eg. name=luhao&amp;amp;password=1234&quot;}]}],&quot;p&quot;:{}}"></svg></div><ul><li>报文示例<br><img src="/images/http-request.png" alt=""></li></ul><h2 id="HTTP状态码">HTTP状态码</h2><p>既然 HTTP协议 采用 “一问一答” 的模式，那么响应报文内应该包含请求的结果信息，即状态码（Status Code）。<br>目前 RFC标准 规定状态码是三位数，即取值范围是 000 到 999，其从设计之初也有具体的含义区分：</p><ul><li>1xx：提示信息</li><li>2xx：成功<ul><li>200 OK</li></ul></li><li>3xx：重定向</li><li>4xx：客户端请求报文错误<ul><li>400 Bad Request</li><li>403 Forbidden</li><li>404 Not Found</li><li>408 Request Timeout</li></ul></li><li>5xx：服务端内部错误<ul><li>500 Internal Server Error</li><li>502 Bad Gateway</li></ul></li></ul><h2 id="HTTP特点">HTTP特点</h2><p>作为本篇的收尾总结，HTTP协议可以概括为三大特点：</p><ul><li><p>可靠传输<br>注意，“可靠”只是确保 Request方 的必定传输，由于一些网络原因未必能确保 Response方 的成功接收。</p></li><li><p>明文传输<br>HTTP报文的所有信息都回暴露在 “光天化日之下”，HTTPS协议实现了加密版本的HTTP传输。</p></li><li><p>无状态<br>区分于 TCP协议 的状态，HTTPS协议 是没有状态的，即 “没有记忆能力”。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%</summary>
      
    
    
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/"/>
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/Network/"/>
    
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【GAMES101】Shading</title>
    <link href="http://luhao.wiki/posts/shading/"/>
    <id>http://luhao.wiki/posts/shading/</id>
    <published>2023-06-13T15:42:19.000Z</published>
    <updated>2023-07-01T17:10:20.591Z</updated>
    
    <content type="html"><![CDATA[<p>Lambertian、Blinn-phong、shading-tech<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">GAMES101 Shading</a></li><li><a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/schedule.html">CS130 Shading</a></li><li><a href="https://www.cs.toronto.edu/~jacobson/phong-demo/">WebGL demo</a></li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Factors&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2],&quot;f&quot;:true},&quot;v&quot;:&quot;光源&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3],&quot;f&quot;:true},&quot;v&quot;:&quot;平行光&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4],&quot;f&quot;:true},&quot;v&quot;:&quot;点光&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5],&quot;f&quot;:true},&quot;v&quot;:&quot;聚光灯&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6],&quot;f&quot;:true},&quot;v&quot;:&quot;相对位置&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7],&quot;f&quot;:true},&quot;v&quot;:&quot;距离衰减&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;角度（Lambert’s cosine law）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;材质&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;Ambient&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[10,11],&quot;f&quot;:true},&quot;v&quot;:&quot;Diffuse&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[11,12],&quot;f&quot;:true},&quot;v&quot;:&quot;Specular&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Shading-Reflection⭐&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#font-color-750000-Lambertian-Reflection-⭐-font\&quot;>Lambertian</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#font-color-750000-Blinn-Phong-Reflection-⭐-font\&quot;>Blinn-Phong</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Shading-Tech&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#1-Flat-Shading\&quot;>Flat</a>（poly）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#2-Gouraud-Shading\&quot;>Gouraund</a>（vertex）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#3-Phong-Shading\&quot;>Phong</a>（pixel）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;Shading-Normal&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#1-顶点法线\&quot;>Vertex-normal</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#2-像素法线\&quot;>Pixel-normal</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Shading">Shading</h2><p><a href="https://en.wikipedia.org/wiki/Shading">Wikipedia: Shading</a><br>维基百科对于 shading 的定义非常清楚，即对3维场景中模型 <strong>着色</strong> 的过程，且着色的效果取决于如下几个因素：</p><h3 id="1-光源">1.光源</h3><p>推荐阅读：<a href="https://learnopengl.com/Lighting/Multiple-lights">LearnOpenGL</a>，<a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/content/Lecture12.pdf">CS130-Lecture12</a></p><ul><li><p>Ambient lighting<br>环境光照，即使在最黑暗的情况下，存在一些微弱的光亮使得物体呈现出一些颜色。</p></li><li><p>Directional lighting<br>平行光，也称作天光，在固定的光源方向上无任何衰减。</p></li><li><p>Point lighing<br>点光，向四周照射，随距离衰减。</p></li><li><p>Spotlighting<br>聚光灯，呈一个锥形范围照射，随距离衰减。</p></li></ul><h3 id="2-相对位置">2.相对位置</h3><ul><li><p>距离关系<br>光照强度一般随 <strong>距离的平方</strong> 衰减，$ ~ I / r^{2}$</p></li><li><p>角度关系<br>根据 <a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Lambert’s cosine law</a>，$\vec {n} * \vec {l}$ （结合后面的 Lambertian Reflection 理解）</p></li></ul><h3 id="3-材质">3.材质</h3><ul><li><p>Roughness<br>粗糙度越高，镜面反射能力越强，典型代表如镜子。</p></li><li><p>Metallic<br>金属度越高，漫反射越弱。</p></li><li><p>Translucent<br>具有透光属性，如典型的 <a href="https://en.wikipedia.org/wiki/Subsurface_scattering">SSS</a>。</p></li></ul><h2 id="Local-Shading">Local Shading</h2><p>现实中的光照，需要考虑各种直接光、间接光的反射、吸收效果，想要在图形引擎中模拟它们非常不现实。因此一些大佬提出局部的着色算法，以模拟 <strong>一个独立点的shading计算</strong>，这里统称为 local-shading。<br>我们需要了解 <code>Lambertian Reflection</code> 和 <code>Blinn-Phong Reflection</code>。</p><h3 id="font-color-750000-Lambertian-Reflection-⭐-font"><font color="#750000">Lambertian Reflection ⭐</font></h3><p><strong>Lambertian模型</strong> 一般用来模拟 diffuse光，核心影响分别是：距离、角度。<br>距离基本的衰减关系，前面讲过了。角度根据 <a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Lambert’s cosine law</a> 计算得一个光照强度的系数，其中 $max(0, n \cdot l)$ 表示任何大于90度的夹角，光照强度都为0。</p><p><img src="/images/lambert-shading.png" alt=""></p><hr><h3 id="font-color-750000-Blinn-Phong-Reflection-⭐-font"><font color="#750000">Blinn-Phong Reflection ⭐</font></h3><p><strong>Blinn-Phong模型</strong> 在前者的基础上引入了 <strong>Ambient 环境光</strong> 和 <strong>Specular高光</strong>，它是一个叫<code>Blinn</code>的教授拓展了<code>Phong</code>的光照模型，其计算方式分别为：</p><ul><li><strong>Specular</strong></li></ul><blockquote><p>$L_{s} = K_{s}(I/r^{2}) max(0, n \cdot h)^{p}$<br>引入一个 <strong>半程向量 $h (=\frac{v+l}{|v+l|})$</strong>，实际含义为入射角和观察角的二分之一夹角。此时衡量 $h$ 和 $n$ 的接近程度，即点乘 $n \cdot h$（<code>Phong</code>模型选取的是 $cos(\alpha)$，$\alpha$是夹角）， $n, h$ 越接近 则点乘值越大，则高光越强烈。<br><br>其中的 p 衡量 <strong>高光随夹角的衰减速度</strong>，p值越大，则呈现高光的范围越小（如下图）。</p><ul><li>p = 5 … 10：塑料</li><li>p = 100 … 200：金属<br><img src="/images/blinn-phong-demo-all.png" alt=""></li></ul></blockquote><ul><li><strong>Diffuse</strong></li></ul><blockquote><p>同 Lambertian模型</p></blockquote><ul><li><strong>Ambient</strong></li></ul><blockquote><p>$L_{a} = k_{a}I_{a}$<br>环境光假设任何点来自环境的 <strong>光照强度是一致的</strong>，即 $I_{a}$，它与实际光照方向无关。<br>笔者粗暴地理解为自发光、固有色。</p></blockquote><p><img src="/images/blinn-phong.png" alt=""><br><br></p><h2 id="Shading-Tech">Shading Tech</h2><p>推荐阅读：<a href="https://en.wikipedia.org/wiki/Shading">Wikipedia</a>，<a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/content/Lecture14.pdf">CS130-Lecture14</a></p><p>前面讨论光照模型的计算，但是忽略了一个重点：<strong>以什么对象（或粒度）进行Shading?</strong><br>基于前面的知识得到，任何 mesh 都是由顶点和三角形（或Poly）组成，因此自然想到如下几种方案：</p><ul><li>Tri（Poly）：基于三角面的 Flat Shading</li><li>Vertex：基于顶点的 Gouraud Shading</li><li>Pixel：基于像素的 Phong Shading</li></ul><p><img src="/images/shading-tech.png" alt=""></p><h3 id="1-Flat-Shading">1. Flat Shading</h3><p>对<strong>每个三角形（或Poly）</strong> 计算出一个法线，可以通过叉乘得到，并基于法线作光照计算。此时三角形内的Shading结果是一样的。可以理解为 <code>Low-Poly</code> 的渲染风格。</p><h3 id="2-Gouraud-Shading">2. Gouraud Shading</h3><p>对<strong>每个顶点</strong>作计算（假设顶点没有自己法线，可以根据周围几个三角面的法线求均值）。可以理解为 <code>Vertex-Shader</code>。</p><p><img src="/images/gouraud-shading.png" alt=""></p><h3 id="3-Phong-Shading">3. Phong Shading</h3><p>对<strong>每个像素</strong>插值出单独的法线，基于此作光照计算。因为是全像素的，所以性能开销高。可以理解为 <code>Pixel-Shader</code></p><h3 id="三种方案对比">三种方案对比</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Flat</th><th style="text-align:center">Gouraud</th><th style="text-align:center">Phong</th></tr></thead><tbody><tr><td style="text-align:center">光照粒度</td><td style="text-align:center">poly</td><td style="text-align:center">Vertex</td><td style="text-align:center">pixel</td></tr><tr><td style="text-align:center">表现</td><td style="text-align:center">劣</td><td style="text-align:center">中</td><td style="text-align:center">优</td></tr><tr><td style="text-align:center">性能需求</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">需要顶点法线</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><h2 id="Normal">Normal</h2><p>Shading的着色计算非常依赖 <strong>法线</strong>，下面介绍两种常见的法线计算方式：</p><h3 id="1-顶点法线">1. 顶点法线</h3><ul><li><p>模型自带，例如 <code>obj</code> 格式可以指定逐顶点的法线</p></li><li><p>计算顶点周围 <code>Poly</code> 的法线均值</p></li></ul><p><img src="/images/vertex-normal.png" alt=""></p><h3 id="2-像素法线">2. 像素法线</h3><ul><li>通过两个顶点的法线插值，记得归一化！</li></ul><p><img src="/images/pixel-vertex.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Lambertian、Blinn-phong、shading-tech&lt;/p&gt;</summary>
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】Virtual Memory</title>
    <link href="http://luhao.wiki/posts/virtual-memory/"/>
    <id>http://luhao.wiki/posts/virtual-memory/</id>
    <published>2023-06-13T12:33:56.000Z</published>
    <updated>2023-07-04T18:18:36.861Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟内存、cache、内存分配、内存泄漏…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="http://1.15.115.4/CSAPP-3rd.pdf">CSAPP 第9章：Virtual Memory</a>（已读完，通俗 &amp; 受益匪浅）</li><li><a href="/posts/3RBTN4W/">汇编（一）：计算机架构入门</a>（站内文章，硬件基础知识）</li><li><a href="https://fengmuzi2003.gitbook.io/csapp3e/dixzhang-xu-ni-nei-cun">CSAPP重点解读：虚拟内存</a></li><li><a href="https://people.freebsd.org/~lstewart/articles/cpumemory.pdf">What Every Programmer Should Know About Memory</a>（114页pdf）</li><li><a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li><a href="https://www.usna.edu/Users/cs/roche/courses/s19ic221/lab05.html">IC221 Lab 05: Memory Leaks</a></li></ul></div><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;What，Why&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;physics-memory 及弊端&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;virtual-memory&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;virtual page&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#PTE\&quot;>页表 PTE</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Cache&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#page-hits-✔\&quot;>页命中</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#page-faults-❌\&quot;>缺页</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#locality\&quot;>Locality</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;时间局部性&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;空间局部性&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#memory-allocator\&quot;>memory allocator</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#衡量标准\&quot;>衡量标准</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;1. 分配&amp;amp;释放速率&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;2. 内存利用率&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Explicit allocator&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#u-class-black-mallco-free-u\&quot;>malloc &amp;amp; free</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;new &amp;amp; delete&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;Implicit allocator&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#垃圾回收\&quot;>垃圾回收</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#memory-leaks\&quot;>memory leaks</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#Valgrind\&quot;>Valgrind</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#ASan\&quot;>ASan</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#memory-bugs\&quot;>memory bugs</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#引用坏指针❌\&quot;>引用坏指针</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;<a href=\&quot;#未初始化的堆内存❌\&quot;>未初始化的堆内存</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;<a href=\&quot;#缓冲区溢出❌\&quot;>缓冲区溢出</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="virtual-memory">virtual memory</h2><p>物理内存有什么问题？1. 内存空间不够，2. 产生内存碎片，3. 没有内存保护。从这个角度看，<strong>虚拟内存是一个中间层，本质是到物理内存的一层映射关系</strong>。<br>并非所有系统都会使用虚拟内存，一些古老or简单的系统就会直接使用物理内存。</p><p>物理地址和虚拟地址的对比如下：</p><ul><li><p><strong>Physical-Address</strong>：物理地址，从0开始每个byte递增1<br>物理地址可以直观反应内存大小，且是连续的，例如 <code>0x0000 ~ 0xFFFF</code> 表示 <code>64KB</code> 的内存。</p></li><li><p><strong>Virtual-Address</strong>：虚拟地址，是一种到物理地址的映射（<a href="https://en.wikipedia.org/wiki/Memory_management_unit">MMU</a>）<br>使用虚拟地址，可以节省地址总线的位数，且利于cache实现。</p></li></ul><p><img src="/images/virtual-memory.png" alt=""></p><h2 id="cache">cache</h2><p><strong>存储器</strong> 是计算机用来存储数据的器件，即通常所说的磁盘。其根据读写特性又可以分为两类：</p><ul><li><p><strong>ROM（Read-Only-Memory）</strong><br>只读，一般是显卡、网卡上的默认系统，如<code>BIOS</code></p></li><li><p><strong>RAM（Random-Access-Memory）</strong><br>可读可写，显卡上的RAM又成为显存</p></li></ul><p>为了提高CPU读写数据的速度，现代计算机在 CPU和RAM之间又增加了 <strong>速度更快、内存更小、造价更高的</strong> <em><strong>L1, L2, L3 Cache</strong></em>，这部分称为 SRAM（Static）。<br>作为对比，DRAM（Dynamic） 一般用作虚拟内存的cache。<font color="#FF1E10"><strong>（???）</strong></font></p><p>至于为什么 SRAM 速度要比 DRAM 快很多？这需要从硬件制造上理解，参考阅读：<a href="https://rf.eefocus.com/article/id-336795">存储技术SRAM详解</a></p><h2 id="page">page</h2><p>计算机内存会被划分为固定大小的 <strong>页（page）</strong>，划分页是为了实现缓存的功能。</p><p>对于虚拟内存而言，任何一个 <strong>虚拟页（virtual page, VP）</strong> 中的内存只能处于如下三种状态：</p><ul><li>unallocated：未分配内存（即不在物理内存中）</li><li>cached：已缓存（但在物理内存中）</li><li>uncached：未缓存（但在物理内存中）</li></ul><h3 id="PTE">PTE</h3><p>为了描述 虚拟页 和 DRAM 之间的缓存关系，操作系统引入 <strong>页表 PTE（Page Table Entry）</strong> 的概念。通常情况下，它有一个有效位和一个n位地址 组成：</p><ul><li><strong>有效位</strong>：对应的虚拟页是否 cached</li><li><strong>地址位</strong>：若cached，则对应 DRAM 的物理地址</li><li>其他许可位：如可读、可写、可在内核运行等</li></ul><p>配合下图理解，一段虚拟内存被分为 8个虚拟页，对应着左侧的 8个PTE，其中的虚拟页1、2、4、7已经在物理内存中被缓存，同时在PTE中存储了对应地址。</p><p><img src="/images/virtual-page.png" alt=""></p><div class="admonition note"><p class="admonition-title">虚拟内存访问页的两种情形</p><ul><li>已缓存，即 page hits</li><li>未缓存，即 page faults</li></ul></div><h3 id="page-hits-✔">page hits ✔</h3><p>页命中，即虚拟页已经在DRAM中被缓存，读取时只需根据 PTE 找到对应的物理地址。</p><h3 id="page-faults-❌">page faults ❌</h3><p>页缺失，即虚拟页 <code>cache miss</code>，这是它在 PTE 中的有效位是0，即代表其在 DRAM 中未缓存。<br>此时内核会选择一个已经被缓存的 “无辜儿” 去替换成该页，这个无辜儿又称为 <strong>牺牲页（victim page）</strong>，同时进行如下两个操作：</p><ol><li>（物理内存中）用 查找页 替换 牺牲页</li><li>（页表PTE中）交换 查找页和牺牲页 的 cache有效位</li></ol><p>注意这里的 <a href="https://forum.huawei.com/enterprise/en/thread/667215004455288832?page=1">替换策略</a> 很重要，主要有如下两种（实际应用会更复杂）：</p><ul><li>write-through：直写，发生改变时更新cache和内存</li><li>write-back：回写，发生改变时只更新cache</li></ul><p>DRAM 为了性能考虑，采取的是 <code>write-back</code> 方案。</p><h2 id="locality">locality</h2><p>虚拟内存、分页之所以能达到非常好的cache优化，是因为程序的局部性原理 <a href="https://en.wikipedia.org/wiki/Locality_of_reference">Locality of reference</a></p><ul><li><p><strong>时间局部性</strong>：一个刚刚被访问的内存地址，在未来有更大概率被再次访问</p></li><li><p><strong>空间局部性</strong>：被访问的内存地址，其周围的内存更容易被访问</p></li></ul><h2 id="memory-allocator">memory allocator</h2><p>实际开发中，当需要申请一段内存时，其大小往往不是固定的（与runtime有关），此时有如下两种内存分配到方式：</p><ul><li><code>int arr[10000];</code> 静态定义偏 <code>hard-code</code>，浪费较多内存</li><li><code>int* arr;</code> <strong>需要时动态分配内存⭐，本章重点介绍</strong></li></ul><p>C++ 提供一种在 <strong>堆(heap)</strong> 上动态分配内存的方法，一个 <code>runtime</code> 程序的内存划分如下：<br><img src="/images/section.png" alt=""></p><p>C++ 的动态内存分配器有两种类型，区别在于<strong>如何释放内存</strong>：</p><ul><li><p><font color="#ef6d3b"><strong>Explicit allocator</strong></font><br>显示分配器，要求程序自己去释放掉申请的内存，C-Style的方法是 <code>malloc/free</code>，Cpp-Style的方法是 <code>new/delete</code>；<br>当程序没有正确或及时地释放内存，就会造成 <em><strong>Memory Leaks</strong></em>。</p></li><li><p><font color="#ef6d3b"><strong>Implicit allocator</strong></font><br>隐式分配器，它会自动检测未被释放的内存块，并主动去释放掉，它有一个通俗的名称叫 <strong>Garbage Collector（垃圾回收）</strong>；<br>诸如 Java、Python 等拥有自己的垃圾回收（这部分不作讨论）。</p></li></ul><h3 id="u-class-black-mallco-free-u"><u class="black">mallco &amp; free</u></h3><ul><li>阅读文档：<a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li>使用的时候多查阅文档，注意 <code>malloc</code> 使用时要判断 <code>NULL</code> 避免内存分配失败</li></ul><pre><code class="language-c++">#include &lt;unistd.h&gt;void *malloc(size_t size);void *calloc( size_t num, size_t size );void *realloc( void *ptr, size_t new_size );</code></pre><ul><li>分配过程：↓</li><li>需要考虑字节对齐，注意被释放后的内存也可能重复利用，这也解释了为什么野指针的 <code>undefined behavior</code></li></ul><p><img src="/images/malloc-demo.png" alt=""></p><h3 id="衡量标准">衡量标准</h3><p>动态内存分配器的实现有很多种（<code>malloc</code>是非常普遍的一种），一个优秀的分配器应该兼顾如下两种性质：</p><ul><li><p><strong>分配&amp;释放的速率</strong><br>即每秒可以进行多少次的内存分配 和 释放操作，又称为吞吐率。</p></li><li><p><strong>内存利用率</strong><br>即内存的实际利用率，受牵制与内存中的小碎片。</p></li></ul><h2 id="垃圾回收">垃圾回收</h2><p>垃圾回收（Garbage Collection）是现代高级语言的常见特性，它最早可追溯于 1960s Lisp语言，如今也已经发展为 Java、Python 等语言的重要部分。</p><h3 id="What-is-Garbage">What is Garbage?</h3><p>正所谓知己知彼方能百战百胜，欲消灭“垃圾”，先搞清楚“垃圾”的定义。<br>阅读下段代码，其中的指针<code>p</code>在函数<code>garbage</code>内部没有被释放掉，因此函数调用返回后，这就是一段内存垃圾，也称为<strong>内存泄漏</strong>。</p><blockquote><p>因此垃圾回收，就是自动释放 泄漏的内存</p></blockquote><pre><code class="language-c++">void garbage(){    int *p = (int *)Malloc(15213);    return; /* Array p is garbage at this point */}</code></pre><ul><li>实际的垃圾做法比较复杂，这里简要提一下其实现原理。</li></ul><p>垃圾回收器 会维护一个内存块的有向图，其中 <code>Reachable</code>节点就是有指针指向的，可以被手动释放；而 <code>Unreachable</code>节点就是无内存泄漏的节点，垃圾回收就是去释放它们。</p><p><img src="/images/memory-garbage.png" alt=""></p><h2 id="memory-leaks">memory leaks</h2><p>关于内存泄漏的定义，<a href="#What-is-Garbage">上面有提到</a>。这里重点介绍两种检测内存泄漏的工具。推荐阅读这篇材料: <a href="https://www.usna.edu/Users/cs/roche/courses/s19ic221/lab05.html">IC221 Lab 05: Memory Leaks</a></p><h3 id="Valgrind">Valgrind</h3><ul><li><code>valgrind ./a.out</code>：跟踪内存泄漏</li><li><code>valgrind --leak-check=full ./a.out</code>：查看更详细的内存泄漏信息</li><li><code>LEAK SUMMARY</code>：该标签，就是潜在的泄漏部分</li></ul><pre><code class="language-c++">==2392771== HEAP SUMMARY:==2392771==     in use at exit: 0 bytes in 0 blocks==2392771==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated</code></pre><h3 id="ASan">ASan</h3><p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer"><strong>AddressSanitizer</strong></a> 已集成到 gcc、clang 等编译器，添加 <code>-fsanitize=address</code> 的编译选项 并运行即可。</p><ul><li><code>g++ -fsanitize=address -g main.cp</code></li></ul><pre><code class="language-c++">===================================================================2392472==ERROR: LeakSanitizer: detected memory leaksDirect leak of 5 byte(s) in 1 object(s) allocated from:</code></pre><h2 id="memory-bugs">memory bugs</h2><p>内存bug 相对于其他类型的bug，往往更难以定义和排查。这篇文章 <a href="/posts/2F2QH5R/#Bug%E4%BA%A7%E7%94%9F%E5%8E%9F%E7%90%86">调试理论与实践</a> 指出：<strong>程序代码错（Bug）到 可观测错（Failure）之间的跨度距离，决定一个bug排查的难易程度</strong>，而内存bug的跨度尤长。</p><blockquote><p>换言之，不论是时间还是空间上，内存的错误 往往距离错误源有较长一段距离。</p></blockquote><h3 id="引用坏指针❌">引用坏指针❌</h3><p>错误表现是 <code>segmentation fault</code>，错误原因有：</p><ul><li>访问非法内存地址，如读取 <code>0x0000001</code> 地址的值；</li><li>对 “只读内存” 进行写操作，如 <code>scanf("%d", val)</code></li></ul><div class="admonition warning"><p class="admonition-title">WARNING</p><ul><li><code>scanf("%d", val)</code> 会将 <code>val</code> 的值解释为一个地址</li><li>如果该地址只读，会出现 <code>segmentation fault</code></li><li>如果该地址可写，程序会覆盖这段内存，造成无法预测的后果...</li></ul></div><h3 id="未初始化的堆内存❌">未初始化的堆内存❌</h3><p>对于 <code>.bss</code> 的静态内存，加载器会将其初始化为0，但是堆内存的值是无法预测的。</p><p>如下 <code>y</code> 数组的值不一定都为0，请手动为其赋值。<br><code>int *y = (int *)malloc(5 * sizeof(int))</code></p><h3 id="缓冲区溢出-❌">缓冲区溢出 ❌</h3><p>这类bug使用中文有点别扭，实际是 <code>Stack (Buffer) Overflows</code>，即写内存时超出原本的大小限制。如下当输入超过 64 bits 就会出现 <code>segmentation fault</code>：</p><pre><code class="language-c++">char buf[64];scanf("%s", &amp;buf);</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;虚拟内存、cache、内存分配、内存泄漏…&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://luhao.wiki/categories/Linux/"/>
    
    <category term="Linux" scheme="http://luhao.wiki/categories/Linux/Linux/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
</feed>
