<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luhao&#39;s Blog</title>
  
  <subtitle>luhao wiki</subtitle>
  <link href="http://luhao.wiki/atom.xml" rel="self"/>
  
  <link href="http://luhao.wiki/"/>
  <updated>2023-10-19T17:33:16.730Z</updated>
  <id>http://luhao.wiki/</id>
  
  <author>
    <name>Luhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode</title>
    <link href="http://luhao.wiki/posts/leetcode/"/>
    <id>http://luhao.wiki/posts/leetcode/</id>
    <published>2023-10-19T17:31:47.000Z</published>
    <updated>2023-10-19T17:33:16.730Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="52809598307c9d2d069360126ba1bfd3cd94bdee5ad874e6ba75288f4262f7d7">9f2b9e3585d2f45282fcbae6e5d2f979e1fcebfc392f5685d7a100c522052fdd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://luhao.wiki/categories/Algorithm/"/>
    
    <category term="Algorithm" scheme="http://luhao.wiki/categories/Algorithm/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>【SIGGRAPH23】Large Scale Terrain Rendering in Call of Duty</title>
    <link href="http://luhao.wiki/posts/2JP3GCC/"/>
    <id>http://luhao.wiki/posts/2JP3GCC/</id>
    <published>2023-10-19T16:55:34.000Z</published>
    <updated>2023-10-19T17:25:45.581Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/siggraph23-cod-ppt-demo.png" alt=""></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>这篇 SIGGRAPH 主要描述 COD 中的大规模地形渲染，并大量引用了之前GDC的技术分享</li><li>NETEASE WARNING: 已脱敏、与工作无关</li></ul></div><h3 id="技术参考">技术参考</h3><ul><li><a href="https://advances.realtimerendering.com/s2023/index.html#CODTerrain">SIGGRAPH 2023: Large Scale Terrain Rendering in Call of Duty</a></li><li><a href="https://research.activision.com/publications/2021/09/boots-on-the-ground--the-terrain-of-call-of-duty">GDC 2021: The Terrain of CoD</a></li><li><a href="https://www.gdcvault.com/play/1025480/Terrain-Rendering-in-Far-Cry">GDC 2018: Terrain Rendering in Far Cry 5</a></li><li><a href="https://www.gdcvault.com/play/1021761/Adaptive-Virtual-Texture-Rendering-in">GDC 2015: Adaptive Virtual Texture Rendering in Far Cry 4</a></li></ul><h3 id="大纲">大纲</h3><ul><li><a href="#Why-New-Terrain">Why New Terrain</a></li><li><a href="#Render-Process">Render Process</a></li><li>Virtual Texture</li><li>Color Remap</li><li>Displacement Decal</li><li>Cliff Shading</li><li>Stiching Fix</li><li>Summary</li></ul><h3 id="Why-New-Terrain">Why New Terrain</h3><p>作者阐述，之所需要开发新的地形系统，是因为传统的地形系统无法满足 现有的游戏需求（即策划不满意）。而传统地形主要有如下两个特征：</p><ol><li>地形范围小（如室内地面装饰）</li><li>依赖手动编辑（如魔兽争霸地图）</li></ol><p>作为对比，新的地形系统提出如下三个要求和挑战：</p><ol><li>Lerge-Scale（水平 + 垂直两个维度）   -&gt; 解决性能问题 runtime</li><li>画面多样性、细节保证                 -&gt; 解决表现问题 bugfix, tradeoff</li><li>依赖程序化生产                       -&gt; 解决工具问题 PCG</li></ol><p><img src="/images/siggraph23-cod-new-terrain.png" alt=""></p><h3 id="Render-Process">Render Process</h3><p>作者展示如何在forward管线下绘制一个朴素的地形：</p><ul><li><p>VS Input</p></li><li><p>VS Offset</p></li><li><p>PS Shading</p></li></ul><p><font color="#FF1E10"><strong>TODO</strong></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/siggraph23-cod-ppt-demo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;这篇 SI</summary>
      
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
  </entry>
  
  <entry>
    <title>csv, hdf5, feather 三种数据性能对比</title>
    <link href="http://luhao.wiki/posts/data-perf/"/>
    <id>http://luhao.wiki/posts/data-perf/</id>
    <published>2023-10-12T14:06:39.000Z</published>
    <updated>2023-10-13T17:39:42.134Z</updated>
    
    <content type="html"><![CDATA[<p>用于量化金融数据，分析读、写、磁盘、内存性能<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="/posts/quant-data/">这篇blog</a> 介绍了金融相关的数据特性，它对于读写和存储性能有极高要求</li><li>本篇blog 会结合跑测数据，分析三种格式的性能</li></ul></div><h2 id="测试结论">测试结论</h2><p>结论放在最前面，测试数据见 <a href="#%E6%80%A7%E8%83%BD%E6%B1%87%E6%80%BB">文末</a></p><ul><li>数据量小，无脑使用 csv</li><li>数据量大，如果坚持 csv，请使用 <strong>zip</strong> 参数压缩（尽管这会降低读写速率）</li><li>百M级别以上数据，推荐使用 hdf5（而不是feather）<ul><li>性能强于 csv，<strong>读写快5~10倍</strong></li><li>hdf5 对于 Python/C++ 的API支持较好</li><li>feather 虽然性能更强，但限制更多 TODO</li></ul></li><li>切记！ <strong>此结论并不适用于所有类型的数据样本</strong>，最好自己针对性跑测，找到最适合自己数据的格式！<ul><li>对于期货 tick 数据（由于大量重复值），csv.zip 压缩比率能达到 15%，feather 能达到 30%</li></ul></li></ul><h2 id="基本介绍">基本介绍</h2><h3 id="csv"><a href="https://en.wikipedia.org/wiki/Comma-separated_values">csv</a></h3><p><code>csv</code> 全称是 <code>Comma-separated values</code>，<strong>即以逗号分隔的纯文本格式</strong>，常用后缀是 <code>*.csv</code>。<br>正因为其纯文本的性质，常见的编辑器（或者excel）都可以预览csv文件，所以它的优点是 <strong>简单直观</strong>。<br>然而事物都具有两面性，就像 <code>json</code> 存储格式，直观的代价往往是性能的损失。</p><h3 id="hdf5"><a href="https://en.wikipedia.org/wiki/Hierarchical_Data_Format">hdf5</a></h3><p>全称是 <code>Hierarchical Data Format version 5</code>，<strong>即高度层次化的二进制格式</strong>，常用后缀是 <code>*.h5</code>。<br>hdf5格式从设计之初，就是服务于大型数据。</p><h3 id="feather"><a href="https://arrow.apache.org/docs/python/feather.html">feather</a></h3><p>feather 是一种用于存储数据的 <strong>快速地、轻量级的二进制格式</strong>，常用后缀是 <code>*.fea</code>。<br>它早起就是为 Python(Pandas) 和 R 这两种编程语言所设计的。<br>目前广泛使用的其实是 feather v2 版本，它区别于早期的 v1 版本，这个不用过多了解。</p><h2 id="测试标准">测试标准</h2><p>主要从四个维度测量性能：</p><ul><li>1.写入速度</li><li>2.读取速度</li><li>3.磁盘大小</li><li>4.读取内存 (TODO)</li></ul><p>同时考虑到金融数据的存储格式，大多是 <code>int64</code>、<code>float64</code> 和 <code>timestamp</code>，因此也会分别考量 在这三种格式下的性能表现。</p><h3 id="压缩性">压缩性</h3><p>因为写入的csv文件较大，所以考虑 csv 结合各种压缩算法测试（压缩本质是牺牲性能、换取空间）。<br><code>df.to_csv('', compression)</code> 可以传入 <code>zip</code>、<code>gz</code>、<s><code>bz2</code></s> 等等参数。</p><h3 id="benchmark">benchmark</h3><p>使用 800w x 10 的DataFrame数据，取值范围是 0 ~ 16亿，格式是 <code>np.int64</code>。<br>数据大概长这样：</p><pre><code class="language-csv">0                d0                d1                d2                d3                d4                d5                d6                d70  5680658661046001  6886564689964211   777947290120004  6223515736992396  2823728071993317  8416657213663291  3500805963228465  10097481526053971  8952870328278778   306015862731108  9726241400443289  4237512935832667  2875425479333067  6311517969042662   878720088161354  87871182730650332  6858523177136352  1733196075769152   840572662722070  8438133907754012  6671944540650125  1147224095855703  1583106816125259  27980685687731413  2940819554234759  3142545317839947  4641209159206074  8194125756197731  4958881218032026  4405637321734842   500692399773906  35316179424621364  8149680042981168  6793238579260437  3891639455885689  3690167863144449  7552248224604567  6411717840330018  9556078695826276  4851668202438122......[8000000 rows x 9 columns]</code></pre><h3 id="测试源码">测试源码</h3><pre><code class="language-python">class DataPerf(object):    """ 数据 性能测试    """    @staticmethod    def get_random_datas(rows, cols):        """ 随机生成 rows行 x cols列 的DataFrame数据        :param rows: 行        :param cols: 列        """        data = np.random.randint(low=0, high=pow(10, 16), size=(rows, cols), dtype=np.int64)        df = pd.DataFrame(data, columns=[f'd{i}' for i in range(cols)])        return df        @staticmethod    def perf_write_speed():        """ 测试写入速度        """        df = DataPerf.get_random_datas(800 * 10000, 8)        PERF_TIME()        df.to_hdf('perf.h5', 'data')        PERF_TIME('hdf5')        df.to_feather('perf.fea')        PERF_TIME('fea')        df.to_csv('perf.csv')        PERF_TIME('csv')        df.to_csv('perf.csv.gz', compression='gzip')        PERF_TIME('csv (gz)')        df.to_csv('perf.csv.zip', compression='zip')        PERF_TIME('csv (zip)')        @staticmethod    def perf_read_speed():        """ 测试读取速度        """        PERF_TIME()        d1 = pd.read_csv('perf.csv')        PERF_TIME('csv')        d2 = pd.read_csv('perf.csv.gz', compression='gzip')        PERF_TIME('csv (gz)')        d3 = pd.read_csv('perf.csv.zip', compression='zip')        PERF_TIME('csv (zip)')        d4 = pd.read_hdf('perf.h5')        PERF_TIME('hdf5')        d5 = pd.read_feather('perf.fea')        PERF_TIME('fea')if __name__ == '__main__':    dp = DataPerf()    dp.perf_write_speed()    dp.perf_read_speed()</code></pre><h2 id="测试数据">测试数据</h2><h3 id="1-写入速度">1. 写入速度</h3><p>注意：因为 追加、覆盖 等模式会影响性能，所以重复测试前，记得删除已写入的数据。</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">write time (s)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">33.5</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">135</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">128</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">1.8</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">1.3</td></tr></tbody></table><h3 id="2-读取速度">2. 读取速度</h3><p>测试接口，全部选择 <code>pandas read_***</code> 系列，会全部转化为 DataFrame 格式。</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">read time (s)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">10.8</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">15.0</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">14.1</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">4.2</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">2.0</td></tr></tbody></table><h3 id="3-磁盘大小">3. 磁盘大小</h3><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">file size (GB)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">1.10</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">0.53 (48%)</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">0.53 (48%)</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">0.55 (50%)</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">0.49 (44%)</td></tr></tbody></table><h2 id="性能汇总">性能汇总</h2><ul><li>以下统计的是 <strong>相对得分</strong>，数值越高说明性能越好</li></ul><iframe src="/html/data-perf-echart.html" 替换这里的html="" height="600" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe>]]></content>
    
    
    <summary type="html">&lt;p&gt;用于量化金融数据，分析读、写、磁盘、内存性能&lt;/p&gt;</summary>
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【量化】爬虫获取东财数据</title>
    <link href="http://luhao.wiki/posts/spider-easymoney/"/>
    <id>http://luhao.wiki/posts/spider-easymoney/</id>
    <published>2023-10-05T14:40:04.000Z</published>
    <updated>2023-10-12T17:06:08.632Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>这部分主要讨论<strong>基本面数据</strong>，获取<strong>行情数据</strong>看<a href="http://localhost:4000/posts/quant-data/#%E6%95%B0%E6%8D%AE%E6%8F%90%E4%BE%9B%E5%95%86">这篇文章</a></li><li>详细的爬取标准文档见这篇：<a href="/posts/cores/datasource/#Eastmoney">cores/datasource</a></li><li><strong>NOTE</strong>: <a href="https://akshare.xyz/index.html"><strong>akshare</strong></a> 已收录所有内容，不要重复造轮子啦</li></ul></div><div class="markmap-container" style="height:190px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;<a href=\&quot;#爬虫基础\&quot;>爬虫基础</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#爬取规则\&quot;>爬取规则(东财)</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;功能实现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#功能实现\&quot;>源码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#处理json\&quot;>处理json</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#数据存储\&quot;>数据存储</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#数据应用\&quot;>数据应用</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#示例一：寻找-“A股大鳄”\&quot;>示例一：寻找“A股大鳄”</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#示例二：财报公布后股价走向\&quot;>示例二：财报公布后股价走向</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><hr><h3 id="爬虫基础">爬虫基础</h3><p>本章要爬取的东方财富，数据结构非常简单，在爬虫领域中属于入门级别，使用 <code>request</code> 库即可。<br>下面代码示例，爬取 贵州茅台<code>600519</code> 的一些基础操盘信息：</p><pre><code class="language-py">import requestsimport jsonurl = 'https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/PageAjax?code=%s'res = requests.get(url % 'SH600519') # 贵州茅台info = json.loads(res.text) # dict</code></pre><h3 id="爬取规则">爬取规则</h3><p>东方财富的数据（<a href="https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/Index">示例链接</a>）主要有两个特点：</p><ul><li>优点：链接条理清晰，便于爬取</li><li>缺点：采用拼音缩写的命名，贼坑（例如 <code>yjbg</code> 表示<code>研究报告</code>）…</li></ul><hr><p>先分析信息页的基本结构，<strong>第一层级</strong>是下图红框部分，<strong>东财将它分为十六个板块</strong>。<br>我们会挑选需要的数据板块来爬取。</p><p><img src="/images/eastmoney-head.png" alt=""></p><hr><p>以 <strong>股东研究</strong> 为例，<strong>内部还会细分为多个第二层级</strong>，例如：</p><ul><li>股东人数：每隔一段时间公布股东数量</li><li>十大股东：前十大持股的对象，包含增减比例</li><li>机构持仓：有哪些公募、私募基金的持仓</li><li>…</li></ul><p><img src="/images/eastmoney-partners.png" alt=""></p><hr><h3 id="功能实现">功能实现</h3><p>源码: <a href="https://github.com/593413198/Alpha-Bet/blob/master/cores/datasource/Eastmoney.py"><em>cores/datasource/Eastmoney.py</em></a></p><p>先实现一个基础的爬取指定 url + code 的函数：</p><pre><code class="language-py">def crawl_base(self,                code,                url,                fields):    """ 根据指定规则爬取    :param code: 股票代码，如SH600519 (str)    :param fields: 爬取的键值，映射到中文 (dict)    :param url: 爬取的链接，股票代码用%s代替 (str)    """    url = url % code    res = requests.get(url)    info = json.loads(res.text)    info = { fields[k] : v for k, v in info.items() if k in fields}    return info</code></pre><p>后面依次实现爬取不同模块的函数，并选取有价值的字段 …</p><ul><li>操盘必读 板块</li><li>股东研究 板块</li><li>其他略 …</li></ul><pre><code class="language-py">def _crawl_cpbd(self, code):    """ 【操盘必读】    需要字段如下：        √ tszb: 特殊指标        √ ssbk: 所属板块        √ zxzbhq: 最新指标    https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/Index?type=soft&amp;code=SH600519#    """    fields = {        'tszb'  : '特殊指标',        'ssbk'  : '所属板块',        'zxzbhq': '最新指标',    }    url = 'https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/PageAjax?code=%s'    return self.crawl_base(code, url, fields)def _crawl_partner(self, code):    """ 【股东研究】    需要字段如下：        √ gdrs: 股东人数，通常股东数越少，代表股价越集中，则更容易上涨        √ sdgd: 十大股东，包含持股数和变动比例            sdltgd: 十大流通股东            jgcc: 机构持仓            jjcg: 基金持股    https://emweb.securities.eastmoney.com/PC_HSF10/ShareholderResearch/Index?type=soft&amp;code=SH600519#    """    fields = {        'gdrs' : '股东人数',        'sdgd' : '十大股东',    }    url = 'https://emweb.securities.eastmoney.com/PC_HSF10/ShareholderResearch/PageAjax?code=%s'    return self.crawl_base(code, url, fields)# 其他省略 ...</code></pre><hr><h3 id="处理json">处理json</h3><p>写入 <code>json</code> 文件时，需要注意中文编码问题，下面是一个万能模板：</p><pre><code class="language-py">with open(json_path, 'w', encoding='utf8') as f:    # infos是要写入的 dict    content = json.dumps(infos, ensure_ascii=False, indent=4)    f.write(content)</code></pre><h3 id="数据存储">数据存储</h3><p>结合多进程爬取五千多只股票池，注意处理空数据、网络错误等情形，最后分别以 <code>json</code> 格式存储在本地。</p><p><img src="/images/eastmoney-json.png" alt=""></p><hr><h3 id="数据应用">数据应用</h3><p>量化金融追求一个实用注意，那么获取这些数据究竟有什么用途?<br>除了常见的<strong>用作策略因子</strong>外，下面展示几个与众不同的用法：</p><h3 id="示例一：寻找-“A股大鳄”">示例一：寻找 “A股大鳄”</h3><p>股票市场的股权拥有者，一般有两种，要么是个人，要么是企业/地方政府/国家。</p><p>下面我们尝试统计 5000 多支股票的十大股东（从东财爬取的数据），然后稍作拟合，再按照持有数值（也可以是持有公司数量）排名，便得到如下图表（绘图来自 pyecharts）:</p><blockquote><ol><li>带 <strong>香港结算</strong> 字样的主体(及HKSCC)，一般香港/外国投资者通过港交所购买的股份，即所谓的 “北向资金”</li><li>实际持仓最多的是 <strong>中国财政部</strong>，他基本持有了各大银行的股份</li><li>其他排名高的主体，基本分布在 <strong>石油、保险、电信、证券</strong> 等国有行业</li></ol></blockquote><iframe src="/html/sort_by_amout.html" 替换这里的html="" height="500" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe><hr><p>看这些国有巨头的数据没啥意思，下面尝试筛选个人持股的排名。（筛选条件很简单，长度 <code>&lt;=3</code> 的便当做个人）</p><p>排名第一的大哥叫 <strong>魏巍</strong>（竟然是28家上市公司的前十大股东…），冲浪查一下，发现他位列 <strong>牛散F4</strong> 之一。<br>而排名第二的 <strong>徐开东</strong>，也是A股赫赫有名的个人投资者，跪了！<br>靠一己之力的买买买，坐拥如此多的上市公司（虽然只是前十股份），其艰难程度可想而知！</p><iframe src="/html/sort_by_num_personal.html" 替换这里的html="" height="500" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe><hr><h3 id="示例二：财报公布后股价走向">示例二：财报公布后股价走向</h3><p><font color="#FF1E10"><strong>TODO</strong></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;这部分主要讨论&lt;strong&gt;基本面数据&lt;/strong&gt;，获取&lt;strong&gt;行情数据&lt;/strong&gt;看&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
  </entry>
  
  <entry>
    <title>日志：2023年10月</title>
    <link href="http://luhao.wiki/posts/2023/10/"/>
    <id>http://luhao.wiki/posts/2023/10/</id>
    <published>2023-10-03T12:39:50.000Z</published>
    <updated>2023-10-19T15:32:44.376Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d12e3ad16ba7076d6cdcb933db2e0ce2db97cbeb5075e9dd96f8bb8a26c74bb">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475de0b1305a637ea913974dff7410a14ed4dbbb40a5278eb14bbac34e59e12a284c7a294ab69a495d47e11e78ad50feb1070946a0084538613a8500fde76ee182cdc92156f5cc629c04691a80beeb70e034667984a29cb1db27ea11974521ef316310dd65dbfbb2a0d60f2a8ce6cab9f6cd825044604fed45aadefb22ba2321e19dee0566e6736947a45ad09061320fc24648d670849625fc22b98d3df0b29e61884776134c17e3975cd787312cffeee2c525c85de8f56243719b51201d8706c0a15d049f08670adf2e7bc6b1a77500e4653531fa511ec0c5a2deb7b4863ccc165ca06bad1ce5b7f06e9883803062ea7fce4b73c8436bf1318a645e40ae104849913df2337a808555b8015aae4fbfb5b092aa91b157772a070db9d03e5125cdd275b3295362d9d2ef437441e680a3b115eb7848b53ecc65f016beb3eee55f1ef332f9a59127639ea102d24482a72c0968e0aa7ce708f6b4557524572f49c4add3c7b75236d56df44af85b6a3fceb55023aad2701030da3fb307625baf5645735c0af0fb442edd13c06ae844902914cdcbacdbe9ca3c6f637ec5ed1027d0a8d303b443f041bc8a4c5cedde860053efe20a334bac285c70285b0083abf9627cecbcbcef0d58ff4fef3b47b47773b59e7db7fbd3d610586e12e7c3e53067c12501791ed14860d6a0e4a0ac15cdcc709e2d4243d14d6f319372ba480bb5065e6888a6cf0a6ebe9eacebb63d68fe227df210155bb0afd22585b6932743ebf37ba9c3d9fe45a614b32dddb36ad6117cff196af6974bb343d9bf25e7a83d1aec791fb222d0e7fa64d5becf1b7a2d164cdbba40776072fc4c798d8a548d4ec2fa214eeb619ea4a1d0bfe32faffc558c2cc3ecd4e5ab6159b536549ef24049992d953ce7948c03458b3c882747b9023ae96f4cbc1c2bf47a7f335b19bea8a5498e55e4802e368895cdd8125d61cef083210d310d2365ee7dc869c08ba186e882390ae739f186cbead2e0d43900ee9be4e69f8f95b17a925dd9c0ce46507d2092d1f45ef24349437787e9890d823456485e7799e8711008a2ea141091b94855c522986856551c75f30830c77331cc7153d48550b4f7146e5cf6146c3bf3e61de19dced882a36373f6730cbc892c019d99a7b8e550099d85d6de2bb7c9bc60da9d7e80d7db05e69b63b51a7b558d4cda9d1c5a8fa9ee875485326c3c673536cf0faf8db54acc5925e2f49434914e8e3da422545edea75f5112483fd969e07c753dcf887a78b8ebfac978da3daa7348656c590069c858f458f75d7ef578f7b96561ca90058d0776a58281aab57deb3f7f6cb2fe892863bd9f70a0ba0ebd1488fbb561fdaf98f98b93a30727c3ccc9ad7c8fbe1d4b68c5f9ca7f5f24e631c16d8edf805fe4550e957e226139e67a7db06c80ea3eb6eb04d05e1e323a0b1e55e4f0560de1f64b7082456aadf33a234a709fea9e29d6b8697e4c69435dd3d3315acef0d9d29b717bd1432bed20c945e33d59791103e78a766165c01b27b483d5a81b65311e24eab09747b25be7ee547966d4843573fe3311548919c263a09cc268c8e065936dbba7f1ef2e6662f542e833977589068c2e187dc7ec774dbb0de07c79f2e70895a0fa760f71a3bbb41bdffdc94cd8c86acf53439df911b315f436c0fa430a57d262442232e326844c235b9fd0a83286b99d9fd10e708032938b1453fa675931559281aed778e79fb13dc8bff549399cf250caf99a6fb16ba5ad8c7143ccd08c2ff82d91acc06013410ba742236d1462c8dc1e05b227624137602003f06270e4ffa015edccc8f98a274847eab73fa9ac4591967dfe906255b3ed1f9d8e78428321c8c6109bf51660a12846586fa2f02a0044a4d715628664374fbc9ece1f9dfc72fe4edf94e9204b46ccfb7302e7e84b9e8b331757a916ddd425faf6fdc83f9aa52383c843cf17abe29768d7b22434bcc76c063c71d246881beaf19dc08ea3ae1f3149ead62156c65e86fee1204b3f541999e1a3535101e5a6d37a5ead054f166c649871d386eee4b522a0972547621f8294a3e4bc6faa00e9246a763a0693e88fbd6b9260e2ed4e2054f1dc42dcd6237756b09aafe26656fd6a220896e69328925cdea4d018bb1b3aa9e892c63c69866e8d80930a4286cca98f375a54e02423633e9fc805ce94d19ca6d7eba1b47368afdbe98fd920f34dcf3e18cd041328a5ddc5ae46e3f700aacfe14a3015dd87ecdba84ae5b305c685341ca7cc1ff4bdc727d6297de7a0525a02cde6143368a96468d3de864f51f49188fc33f68dd5d30c3f86f57c9fa112f9caa04c9b0557e7f1b8152db9a6c93c4ef7887090967e7746517aff46e8b28c5a927010e69c9074deed7860bbb6230d88681465cc7b41479425ae3f68e05d5e050ae6c0ac588349512a5921acbe76c69c6255c929c5d07eaae1e9147c26000f32e0c94278dfc5c5f6a0c7e79452859f7130bc634cea692d4a144383d698f31b5956710de943c5710e03015d0bf6b398f2d40fc6bfd910780e3ebb0c19c209167159ea3d22ef5674fd248c0091f80a61bfe163f78ebb9d3657ea59b0c87e6a8a73e5c13bf9f41aa1e07d9ae6bcfc34989a9b45755f272371acf1fc1a81d9fc963d7553def5e151d1fa2e0cdb1673dd1c975b66bf639a3ba0664ff55427044a25f388e04d9a397d28fcc54da06aa558e110d83a5d52f935ad3c95a2a3245313529a70f6b6298f76eddc4c2f89a24bafb1e54e700912aa005001b7ce09cdc685f124466cc5f9ca603774292c6d4e43f3e7b741b997879ce10383d031d49343d20bd2908c11b5c10fcd0a540fbb66586ff362ec2520d4276c554fc578aa4cc827919222d550a4dbdf1d2a089c06ddc5d4bfa91163b181eec189768f12b5abbd4595ee9623e6ecbc5ca9957553d7725a1df0c2ddae1b5800a383e2765277fe11780bd475989c659c4926dd4988c15f2b7e7d10524e2c09d9688319bb4f6328290282b14a88aa789e1d97efdce1c5c92d2d68ae6ca3d32c512ff7a1585a10564420d0f3059e97993ffb8cdaa815184261d5d633cf756db04e25c472a9772d02445dda24edc45f8673fc578c3f45ed28c5a0b6c656417dcee3e5a24be50794b6ec3c83b71f2db4fc12e28d515fa1accf844a544a5c5d99f819b7781a56efbfb47f4aa64f5b6de30fde873a62c62de288c0972de411d9995dbe6d9b778285ec7ad06ee44604314b329f298d1119d5c749dc1a5abe85454172f934f1455a4faeeb27d697e6a43428df39ce6efda32e703fdb021f42ec1291b4ccae1e581b2bb843763789da14fdab1f7e20504c29c69f732a4c9331e686287af295383742879d43a847dc14ba65b89c7245c54d50251a8b24c1986587c80727f22b844820c9489cf598071c942243dabaa7504c48d2621ebc74c758412831f5e1c4f52a98a9f9e181008daa1c0f6eec19c8d17c17dbc3a6196e4befb7201cc47d07653be4bbc3df74ec1ce7b009e7fd825452000449d7fc40a9ec2cbf2e198758b7f264fcc4b3ca2f50d97b7668827ebea5daf23ebac73e3398ed5f22baa242e7a9af19cb35eb59ac2b5d03e8e1e30a574732eb5e1d067f54a18e995e562058adb73a109cb5348bb5777fb4115b1fc545897f8ed9bcb3b89d4919f842ea3ce803760d7f4c04c180ed1d9a62bd1fd58bd6c05f0b3b3a0a3a5369959b149bea7821077194daab6ec8e2eab804ac6586587a663c3237cd4ed8d9cd06c95899c6053b1fb82f4a975e062e22c8c8b6d82081b5c959ed5a14a1c8852bd2cee3fda2def3d0b9959cd374391d0e06e8a3d8fe8366ea3d714a350a3c0d23ff63d091b776def5080f9348f4f3ec423b08d13bec49dd3a6a6c8933e3acea5fd56797770aae5b426f6e3a4ea7fd7d010c3f582e9e12459e614dfa6153d46f735970933b5ef052f2e51304ae7d106725221c5b76dd521a428e9b4975e890d70607babeaaf8a893dbadbed925a87075ada9ef02c191244a81b98ffd95371070e975fa102de99214010d913bf855ef5690ded565dfc3049132244b519edbf816acb36b07fa37f30ab69678af635272e8b5844e0d8f563d780c1dde848827fa24a3eb020c876a6dac2714b9b92049f74dff52044bdc452e1e99cfe7ad14ef0dc31627b73c1c5bbb61dfc191bbe0e6cac0520fdaab245a9aa8970ed473b66b8285eca15510f90d0f2092ae3f709e84d83e5b96b774197762eba786d9ccc189a4fa0d58bac2cc8cd2726e44a7f145afd1e9ee552cfbe66a643a9ac947eb41e72b8aa7929e8344aa80d1fe38b7aa6ac3b6f72247dcf37e2da0708a2004f3d560a94</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【AlphaBet】cores/datasource</title>
    <link href="http://luhao.wiki/posts/cores/datasource/"/>
    <id>http://luhao.wiki/posts/cores/datasource/</id>
    <published>2023-09-28T19:07:30.000Z</published>
    <updated>2023-10-07T15:21:31.913Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="337e4603dbf647d1e6be4b3d669adac67718d0c52142ef38e0f316c14b3a0de0">b3dc07a81f6459d120ce338ccca5504625d42614b93020ffae3fe33410b4b3b7b132d51143295cdac39b893eaf193f19c019943d7e59177912cd230786c73130f76d9215c2bfeb61246a440ea10f1093f8813644e0539c6bf43af0a466ef4a3869f03545f2371c4406e374164f0141df491302831c878c9bcf684755d710c17cb4b0117718299701c3e92d7e680e2d2efa6064966556690e77b81a309d85d8062be1c5b16f52b901b914a1111d41228d16b637e33b3fb8dfd796dd947c22ca30563139d3e404d882931db783f4126db99a7310744b338a985b524a9dac8083a2a5a5aa404a7c2aba3842b8f7170f7f93a7593facb8e80f8a87e073ace10df1f6817abad52038b81e62d6a1a3b5bc4d762953c1267b1f408b00733262f7146a94e3cc80d2df634050dee46a6355ee9af83995a7b5f4b80a5627ca71066f60f41aae74b02944fe44fae3e3890718da71a40dac85b3a4877d7fcc4da2b4de3a90168081f652bad4aa16c8811955fe8cc5f31d48e9e6b338f3a16d72afc12c1b30979360689fc8ffa09031579ecc5c27ead8281c37a80b03115545b47cd91d5c57bc6503fcf138d0842fb48ab0e4172b9d4698818bfb1ceb274eac3a0d6b9c3588d345b8728b191f6c2a76bc31b7cfd2696bae0070bdb02e358907df38197b78dcfe73ee8453a3b0e5fe968017f26b66fc424a40812601fc222a55e5611d4a8588216b604291816ee56365c21979ea5309e05fbe4406a199a103f743cac2b4f5490ed210d312f7892b3cd2200a2d21dfdb5da61de40922326ab8ba2ad850c74083ed76534b200289b9d29bce4d5386cdf542920306aebdb9c3f8c6298c1ae30e68a9c24dd7117c5df3fd9c7deea388325380c97ce330b91d3ebb1fb0b033257940b7290eb571146644e8a93ac55e78aff64e321aef22ec9b15358bec56c2b3fd8da25dcf16af0bce5d57d453df12ea5406d0a74b0eedaeb1a9c7e47305f5b02c5446a0c9e4274cfe77954f49a64ba12cf0bc45a1a2dbc0afbeec373af4d6afa3495d4a6b0ecae0de608b00b884fb1f557d13f85725e01671ea88d5ae21a0b9330dac467c4ba8da1717ddf53a28ed68df5660a0f8bebd570ac529decf18701148e894c18467465e42f493d8d8c001d57917e451508a2ace4118d39001de40361395a3531a11d097680b38a4007624078c15f34a4cb55f288905c349928d6835d288446ae3d5fc6d531cf78ec56cd77562d7d34ec90629b92aa74c7cde619188682a4c3a8d935328f7f592b577abd1736b6665ad22b05d87355899098d9a773fac03f33e74f683cd2788e5a48d9924788bab44530cc4252180e19c2dce27cdd741b4d68c4af08c9730801bb468143eb12c3e03683a42a89bc2b938d0e2406bf9674f7148ca36df459b8f28286b16fb2b19620b2310695282f23b856d60641cbe0fb0b0bbb295818dc3fc45b4822583aae177e1699996e564cd04dc83579dc50b32b2eab1ece7f11608513dbe33e92b6d8500df04b5bdaf3e2057484489d59fd2c202ce11e51071b0243fd98702c191eeeba49975046e2f0321274389f0ee38b38ba17dcc22269c6421c07295d978add3e4b39eb5c6bcedf8066cc32c710c6c7da9fc5465f8276a729e7f8964e04988ac671c3ed32a18efc6f0b257952b8062a4560a50c258d7ddf9e11586f0f247d73f8922fce8f0f85063e5639953a5e83c76861314ac570c4bfab80079b642eff679b77fcc7652081f53567ce6f738078aec6c0464e0757dac121c888324ab77d36b56d93ab474587f55ae7f9c7678b074fe74b67e705d849480785f48f626983f7e73b8914190c66c0acff9423b3ff018978d318b4116b966b96b2fc7cc01d378f3cbbe78c4c6cfa4564c5235abd487c8398a27a5d087521b2d286e146360c81aa211dadf8ab50e0504fe61c9f415dbb69baee0253c405994670ed499fc612dd3fadd774c09cb1b8c0146de7012530da18a36e23504aade93fb5965b42b0e338140f0e2d4843494e22d4ac97c29eaac4c8eee22ff610656d176994ebf8c849072c2b609af488ad23dd6d8b0afdb622d8bb88948fdf3c524155cfa5004b74077f3bcf763282ebd7cf35df8d78b5f8ea483e81aa99991e9c861eca205a7f232dc58ab2ead304f81f0853dcbaec534b69abc1fc7c9bc9bf07ffce250ce6332020fc0b0a3dbf86a86b8272fc119eb2d20f633698b3fb6caca8d8195e1129fca70aaa6488cec24af9aae5dec4ff98e616141a6dee7919163b05bdeac4c46d27c8527e45d18e7080b54af06dc001d7b31346fceaed2fd36ffd5aa12aab8bfbea72dc7cfa45b2c4f65910cdc1bb4154dda16197d7eaa50bd65d993af06f5f97559c11f8900ca12d4aa62b5fb42590d8be0bb28a9201d17fc68bb1efed243169fc47073686925da28fa41f770afc9c511ab59bef43040aa0e7720cd0cba71527c97b21523b87f59da4487cc883dee50543657cb35e293805af511b4546649e7c37378286a915a09174fda8b9f6f193a8f54b666f1e2226a1b4e59f3e2cc68407dfeb672a2dfab1377b50e225b8aa05622445b36f9a12f6971d7cc5c22c6273f758db0d42e0369d18ed1d715a55901a2032719ed1a993c835af9c6edc7e89eda5fddb0f393b3000dcdb279f70f8e66559fecc26a9af814fe3e441e701f38e3c0b59923f8a7a7aa0cc6f252be84de71a956e6c458ba1b695550c416ea425418acb4ee9e0dcebbef1dcea558ce829f443e537e783029899b9a910d874f268a71df3534f37d5de3230dedee42005c3cdd0f9dbd38cede9cfb313bef707f69baec26d1b313eb8ee0e319498899dbdbd4d9cbd7a4e711c28279137e845d77a90f46fd949d85aebcbad23bc66f60b878858fb261038c89eebd0e5cf75893ab5c7575e360ada4fbc37f055f0a641a5c8aa78a611e77e7a474401fa889bee27df70ebf99d39aca0a720a0e9ce38d7b26a0ea8d6de936969411faff90debdfa30994073f7c4fb37080ffdd18128cb8791254bf8646eb5e91dd18a91916f7bae949b880b98963ec899348ab4e892dd9cde88212de2318d8851e59823ccaa3b625a45b9c5a0dc768061292198089d2a19d876088644d6b3f597a1b0054b91a1e3eb0dbdb6831dd02a2116115ffd7d4687146fd668d9f663981abcb3f35ccfc1e5c3af87828d0d9d89bd0fbaf3626716bf9ee1d3b0702b9851b692d406dbc81d81b8739ba0f1188a55b65088087dc52a05543976d233fb3ac4992a8e5bda616d390190dde421d9441dc8316d554521b5ff63344ec00a9c082202deb541f7f5189d20ef9d540d08c7bf662aa8963246bfbe460ebf4384f4c05f62747f64c24ba6b71cb9bee2c06c705a268388b6327fd9e4202bcdaf5ef730fb79dfc30814d7225e73e95f0f767e52bb494fa47eed4e55e89136ed1bbabab3adeae620d75d36d0fc967003dc857349e39f13604b9576a79569368f01f20248cb4f278b0f119aefb6d1d56a125c8a4892ba0f84e4293834123cd575b97f3710db906771dbc13b8356b099b5f8a4f8bdd7538b4920ac2eefa79787c967832cc4d52da94d4870237f1c248c4f805dce115427ecc1665201b57ea482750d4b4da8d5bde11644603dc8ab6aa2665f08eb230d89bda28e510cc9fede06cc3cdae9a98962432aa9be99b4dce5120ff5be3493f578042e1b8d273f0224204f4f30b5e490b6af2363771f92e64f7e093e04fba243d7da82d3b4d4123ccfd428958c598a2799b22648a073bc6b4f9b6a2917a16e8d4ccd089600e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;p&gt;AlphaBet 数据模块&lt;/p&gt;</summary>
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>泡芙成长日记</title>
    <link href="http://luhao.wiki/posts/paofu/"/>
    <id>http://luhao.wiki/posts/paofu/</id>
    <published>2023-09-27T15:00:06.000Z</published>
    <updated>2023-09-27T15:33:58.374Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c78bd27c6bd0046deeaabc5c71061689e5d203c29ed3504ca7fdaf20daa5382b">b3dc07a81f6459d120ce338ccca55046d81ca386354419b6b77d6b55182b8ed301b3c2040d78f9d2f509a2f04ee45763854c7c389b18ca9301f9504a65415536caed1f6078a5933a1e86da75ab9d764257ebf175c8703c4a30d15bbbf7d92b3e403a1caef391b1614091ab770b4e4595b54cd1b310f8dbe1536409c8de8f79bc4348c1bc29c770dfa2315e36ce54739a172780106782350060c52eb57d286eb75fa04878f3cda90fb70f7cea791758878e87bd9cea4101225d90f42573e9709ba039eafbf4ac3e239721445477b2bafdcfe803cc6391fae439e7f1a958ddfc372c8c5d3d8d141fd4a6afb2f9e54b7b3b41df860024fd18e08c38f6e52b445e4d939b03c40370f1e6b774e3b96f4516cdaecfb256a2cf30b57347eb8cb5e55a971b8c485bb317b25d86f0bb77d12436a0c4580debbf73cb1ef658a04fa8e00e45bb46dfb81abd531bbbcb397b64220491dfceafb37390ae4c9f9163510289192df6b4a6344439d771050ceebbdcc97c64a6d10bd96f462781511c3392a795ce2ea09d63547e217b36f148524427d0e0479768f0474dd3236f3a4511c3af35a1ee4b63bb6a81ef4c7f23117aa444ed51ce8893dbb891ed914fbc62b39350da2622ac8cb9d5848e745e8ab58c01e69db620d0f75f64a2fe19aa7c1f1215ef04e78a6f32e4cc5d829e6e3e3a9ea1f833531299902c6be1ac12b99b1afde30b3718a25a9e5db3d02f6fbf37bd04f66720b67d5e989718f121b016ecc5dab29b54b1b92946fc4540d0ba419f5c57b90c085211c31391e5c10b025cd4fd6e3e9b3207259b277f1edc6437cc367f06b2a49aef1458648d2afd281e27ba5a3d143e5925818800faf5e622bc250d3d3a60f518d6583a63b4c7e16d65b4ef39a65e4a057a2c3b6e370a408964621073ba6f300667b6f1575d60f5d322cf642ef70e5cc1f1d7981482633e3b29eb99d2c2eaf62abce6c1c61cd3735ce383cac93be0ec97311acfded14c1ddbec0f5ef581f35ff2ac3d361086e3d5f93e8a370a7ed8953a4173</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>AlphaBet Engine</title>
    <link href="http://luhao.wiki/posts/alphabet/"/>
    <id>http://luhao.wiki/posts/alphabet/</id>
    <published>2023-09-26T14:33:32.000Z</published>
    <updated>2023-09-28T19:10:07.331Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1c644bfa2e3ead880da6e3ac62f5a16660a198adff326ad2ce42fdf3d98a1b30">b3dc07a81f6459d120ce338ccca5504603780459e0306826441972681af56d621023a3b1e87082893d7f9f5a9cfdcbb2d60925685910ad1c3f4c7c6703be17e884d98345b93e039e1a24d1a8ebed568715753ccb25d7df8c5c7bae546cb9dd2d7867d1d67996d19fd8b59c04551be490a583a1a45c65d3695787a511f866d3303b0cb5e321ad68da8c1ef4da903d3e648ede58035c1885789bf30ba933ca7e4f14435d2f066a07bf5e0a85980ce41972a9957a1b08d33989c6bbb481850b08c8011435cf746a31c7aa1c540ceb73d5f324e874511482d50b76c6fdeb25c7cc40b23444dfa998fe7d941d124645dcef994f823caa949e964f6c6ca7dd790db5d6273289337aa3cf4e96020fabb36c413aa93d7f8dbada47cc068065082033da5bc32a18b7f9043518cce839f66e6f1da77013912881d1c9da15b53c7edb06fb745bf474543fd299749c4db849f1f39d49a0d52044cf4f305220b72b0f7a0c8df6d39fc0b2f883f756e1ef9b8baa252f48fbd2a56901ced22b0cdec9099b37f293bd34f4ccff931396d57b0fc61a4535fe3c8bbc0ef66fcafb23d87de0be56947237d9bb89ddb050fa33288866c5e8c1a1d51d5d6c74f152e0fa6a7cacb824dc10370b850c541884aa4eb486b6430a92fd0d761cb9d9ca005754aced8c48ca64a0cfc4d690b3dbdf8e94d305ddfe0ce93b3a7b4ed5c5cd41fb2455a611c0f265aec0729761616b8c9bfc6eb1898eec51f3ef378e79a6b3e9add02a4052a05881b50cca21d04bce7158a0547ae526e5f5036bb6219215baf73a9c0613194c202f6e1bc28b62bbc857203209779ad53d641fb8089b40a3d4014f7b99d85866e3b1fb16428d271d84be292f834fd16343943e55f8ab72816d51bcee30b3bfbdbc99828ddb7761e30dabcdab4dcbc363a0865299397809922b1c5ef9ef33ab68ccc4135bcfe368388885e6bd538ccbe12c75f76f86465ce679fd5ddcb367357ebca26d005d0ec7ae9a55573cffee31aa694999fe819d902acaa79bea554e0caed9bd0e7f75d20ab6f271bf59731e0bd543cf01132f7dae23f82aff90e843c6583458ddce030fa08a3c57a47326a9dc565bb0c67d58f788605605663a0884ca243364bbb59f7d1e197d7026bd0179e0d148bbbb126521b54263088d034acb9f41c9c7c85a591e0a8cf079b4266f4ad40c10fe2ae4213095e0ffb5278c52e5ea151321c817a1ed8822e23f224d9b048f9851f28e5d7dcdf61fb15d5ac6b24bb524c40654</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【大纲】Unreal Engine</title>
    <link href="http://luhao.wiki/posts/ue/"/>
    <id>http://luhao.wiki/posts/ue/</id>
    <published>2023-09-20T15:58:28.000Z</published>
    <updated>2023-09-27T14:48:46.919Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/EpicGames/UnrealEngine"><strong>EpicGames/UnrealEngine</strong></a></li><li><strong>吾生有涯而知也无涯</strong>，因为学不完，所以学一点是一点</li></ul></div><h2 id="0-背景">0. 背景</h2><p>UE5 官网给到引擎的定位是：</p><blockquote><p>The world’s most open and advanced real-time 3D creation tool</p></blockquote><p>三个核心关键词是：Open、Advanced、real-time 3D。</p><ul><li>Open 区别于其他闭源且生态狭小的Unity，想改源码需要花大价钱雇团队修改</li><li>Advanced 区别于国内外其他商业引擎，UE的开发团队和社区是遥遥领先的</li><li>realtime 3D 区别于cocos-2dx和一些离线的渲染引擎，它是游戏开发最核心的要素</li></ul><h2 id="1-准备工作">1. 准备工作</h2><h3 id="编译运行">编译运行</h3><p>看 github README 很清楚，建议使用 VS2022 + Incredibuild，不然编译速度非常慢。<br>直接将 <code>UE5</code> 设置为启动项目，然后右键选择 Build，耐心等待即可。<br>中途出现一个编译报错，搜索许久无果，最终选择 Rebuild 解决…</p><blockquote><p><code>error MSB3075: 命令“D:\git_project\UnrealEngine\Engine\Build\BatchFiles\Build.bat -Target="ShaderCompileWorker Win64 Development" -Target="CTutorialEditor Win64 Development -Project=\"D:\ue_project\CTutorial\CTutorial.uproject\"" -WaitMutex -FromMsBuild”已退出，代码为 6</code><br>搜索过几个中文回答，说是通过改MSVC版本来解决，感觉纯粹扯蛋…</p></blockquote><h3 id="目录结构">目录结构</h3><blockquote><p>参考 <a href="https://docs.unrealengine.com/5.3/zh-CN/unreal-engine-directory-structure/">UE5.3 目录结构</a></p></blockquote><p>UE引擎目录 和 UE游戏项目的目录，注意这两者是不同的，重点关注如下目录：</p><ul><li>Templates：创建项目的模板</li><li>Engine：引擎源码<ul><li>Binaries：编译后的可执行文件</li><li>Build：编译所需文件（跨平台）</li><li>Intermediate：临时文件</li><li>Shader：着色器（.usf）</li><li><strong>Source：引擎的所有源码</strong><ul><li><strong>Editor：编辑器代码</strong></li><li><strong>Runtime：引擎代码</strong></li><li>Developer：编辑器/引擎 共同使用的代码</li><li>Programs：外部工具</li></ul></li></ul></li><li>Content：项目资产（项目特有）</li></ul><h3 id="Renderoc抓帧">Renderoc抓帧</h3><p>参考这篇文章：<a href="https://www.cnblogs.com/kekec/p/11760288.html">博客园: UE4中使用RenderDoc截帧</a></p><h2 id="X-计划">X. 计划</h2><ul><li>快速过一遍 <a href="https://docs.unrealengine.com/5.3/zh-CN/">UE5.3文档</a>，先俯瞰全貌</li><li>挑选出感兴趣的 <a href="https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/tabs/88-unreal-engine-5-3">UE功能模块</a>，并逐次深入</li></ul><p>【方法论】<br>可以先挑选在 <code>NeoX</code> 中熟络的模块，以观摩其在 <code>UE</code> 中的实现，并<strong>对比两者实现的异同优缺，思考有无借鉴糅合的可能性…</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/EpicGames/UnrealEngine&quot;&gt;&lt;strong&gt;EpicGam</summary>
      
    
    
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/"/>
    
    <category term="3D Engine" scheme="http://luhao.wiki/categories/3D-Engine/3D-Engine/"/>
    
    
  </entry>
  
  <entry>
    <title>日志：2023年9月</title>
    <link href="http://luhao.wiki/posts/2023/9/"/>
    <id>http://luhao.wiki/posts/2023/9/</id>
    <published>2023-08-31T16:40:43.000Z</published>
    <updated>2023-10-03T12:40:00.420Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cbf1ecc07e1f6a61d57168f47d8b137e542242d8be7f083ef46933f12f70f3f2">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475de0b1305a637ea913974dff7410a14ed4dbbb40a5278eb14bbac34e59e12a284c7a294ab69a495d47e11e78ad50feb1070a468302317925759b63d81d1a890d91bb247f88a2922744d34b0dccccece2ea7b156e500c0039cfd827310258914cf02387296f49579859a12f70fb57cd977715c82a3748c321a9a025e128a2cce7f1de3dc03b281972aa543ebeddc996b02a417d9199a94914424bfe81c44ba3eabf2c80e4e270af2ca8407ae2a85ff69b0c1fc536f95c6144a12dfa7ffb8ccdccd84134a688fc70c762745ffb27c1d7f5c04309f944cf5a21383babeb4809120af766173cd3913c8397f6e4c96eb7384f89954fa660cd52a67795cc60cbbdc39c1b58ae0a544dfa11a95645a948f05dae5f8e4a73672048fdc14fc952a5849dd401a3784b6c89bd951f0ab835ac1a4a9f70d444ae242f4dea85b2f9d8d9a7e9305be6ab28cad14ba0c2b7a571fa964999e0ffaa760a2fa7600eff40d891f5e0c65b1fc925a7af5120ff3379ed5731a4194270d519619feed43fd2b6a44c393002a33c3d67c746dee94be0af2ebd54e04a4b20731890f02c5682483b33ee0f28b7da3574f7d08c5f02bdfcf451a36a3333061975b30b4fe8d031b74c782518cab023906e9989aa95522ae03c37da39cda6fde3a576407660e733a7059c3a0f80e97991159b711d583d54f3289b252d70ab0038a7b288566f8903e8861af824a96f2fd0e681502bb84c68c7b026dbc1cdd48f77049005108be76f62fb72f817997c97f0a8f300c100eded8b35f427afd0b17a654dbfa3b8664dd933d00c755cdf46020a148ce26e82760da79b1455507d496518b8d707ff0bd13b0f0cae9e6b9150e6bd32060a04054c6c41140d97ff93653793ffe18ffdf7701d29c0df7b70ac5bd75df406b5d979447871f37bf928d3a76d46f5a28d7d625b444c0ce0e2f3cd6051830a7e1248d45e254e2e93a3f8570ffa7ecdb11e0084db744bbff2c61f2a851c84517e281db403919018b838efe44a580270d83c4ac3adf7aca236dfdb85b7fd93aafc866dc3671e7f15d4182c17043fd91ab23a517451a5e71a719c1324e7e3dfc13edca5bcbdd2c9b5d44300593869ea5e70b4eb2ff3631497ea992cf96107bb632236d00fbdb9c878d90beaaebbc8f45e1759d1ba4c940d200eb660b09a2d7a68b42600a23764e4725996059cd22d90473009bb50ef579822bb481b46b4cea1cf58ae2935fcb9ecbb2a88171e006ff6590583cdd66434631bd5139a8ed79443bb5c9801f184c9c03197e895989864722c465a8c92d88993a6ba26faac43ceac0f9d2522580fc5a24994c852b0e1d47360ca5dc0d1acdbff9c25629eade6fa687009be6397ce3048cf795071d7508e2648a2eb9a3ddb9d5be23570d89bed72fda368d04f427c23915628a2f5059728f3ff6e6c3a87c545465a0faefe26a2386232928017e481e7430a618cbd7c9103d7af6370f88110a6b8b9d62268d1cbff439e51921719ea9251416d227e8ba25874da2394926b328b29b3faca6fca6302468c78a87ef6bc4c01cb9f62a094255ea8246c27b6ce8a36f16e163ca3dc533f8a5f48fb144bffc910c17fc5a85963b6e1b858ac3a3132a05be5a976d78a9e6fb95f5f84845679039f951011c1f52454b4b1cbcc3f8c68549ac3b256431b44b945be0e8717e3a978636dbb454c22a3ba7ee90acc36290bf6dbcc507973d85ee7cce3db7ee3c55b722f813b509f5583b81643b46d9dae38a1eb98a81fe3165d046dc0038d9a2b098352bb655fbb1a7c6ee868de2e0d357748abd976dc89d3d9516473dea8143f4db516ef8c6266fb05d16357670eecf6f2214745bd9aed35dd3bd1612b1840885f22aac29f36731cba2b7c2756c3fdee8b3eda90fbf4b4d487b41128e61d60cf12927750a4b28cf4722a8c936fb7cf1f39a16ba7f0beffe31079dd0f0da462ec44d62270ce4b56fa66293ca95c218faff7b72ef70ef4a42d4ce50a65df10ed61eb32189e6d63bd178a84bef850852aeb50458b826c3fd2857b49428b1b630c83a660b88ed767bc7bd30cca9051f4f1d10ba700e3c969403170fb1372c610cb89a7e247e23f6e17a4a19fb93a0ac559f54e5860c613f6cbf5f52a99ab5493d8fb016cbd948c890e0ce001c3d8649f8a9f6a7f1e9965566fb2da0e5d5147152467dc3441b953aa054ce38a234ba257ddcbeb17f1403224f03a5e68b5ac4036f51b43530a457d19fbb98265858b4822281d07af0a2f205395da54b88dd11529fff47cfad68d842268b66497d90178bf85c43cd1b90048a8c35c8fc177d01f8eb428ae05768673d2dace3e426e2d193aa40c273702653ba8523fa752413ffb2ed2635efbd05be85aa69665531381c78f9a1242f6d49bf8829459b60da404bdcf775465d01daaf39b7b02288a68cae6531459d4cb43673baab5bb4eaa4431fcbd599542f45ef3cba579d3ac2a0beee72ee6143bf869a92a9ed20546b02da8f8824741a7f1e9c6365e19521183e0c3cd6d174e3ce008e0c732d88055f11eaa1efaf15d4c5ff8f0f8b0e441a3496936a181830cc1624f2c4b6a3a7fcaa4f2365297e7c14a9b5f111a8f317120a249afe2dcba85e096c54e561a8031184a8bfda19ee31a5783193dc26ef82f4c8f874638f3136272303f5b52e698f3c116c3e551d4cd811bfb16b2fec613152056dd53548cad1eed03474e6eae3b9f1edf61e2563d8a088bd8819beff6246d5ad831cf1a7a0e5d0cc297a09c71168c074f83a0f11369ee0907b819b86cc3eb91024f97e39b3e2ec1a0bf22cf1cd40bc9dbc86c06ca2a383b92be92c9d74589d4c966e0b6aff543d472add9881655e6559591ffe23738fded6d6bc322a1c127bbf88316ab83357c026e16036d9256869038d1d8bf344203421b3022affd4ded033c4d93d7c57f90ec36c5a7b8cf820bdc8f7f22047068bbcd6c71568ac32bcd20b7c41ce3cc026f8c6c756ed6e45ad43ba20ad54f370019d5ec550d3d4f07ceabc8e020fc37a95efdd85c5a3ed55d822f7441abe3c3fc70d2232fde2dfd7bc0ec50c274b62bc6d97a8931c289af2546e1e9f1fa217b0558fcd5a51133eadda1af7044ef317c241ecee30918013d92f8ee6d26da319a50adb30032d14c7a675c7126b857031bb01ab3896bf291c9f0313d8f0626b7b6e87234ca7c3f02e80b6983a156322dcb24997ff4b057b782058a6bb085b240aabd8186ee9c7e194bbd39639fe548f77a66f02b9f02d74db5246c85798d729bca96eb78e2205520c0fb216f26961e238d47db3bcbb2fd251296bbdaca80b2d83076954021e49a50d59698ebe9cb871a58212dc4b16fe25a926c5aa9b709f74b7f4fb8050eecd589c61ae60bc5abeb4f12ae3159f79596d30f8f3015b3fa8a5c50dc01527284da248747592689bbbad3d8de41bbc2de72772a3152009847e702a1fe23c8375822c9cc9375506fbcc5194c028d57a04f468c3bdc16c19af651e4c825fad715874e0408efe9f89b1ec866d87324c287685820291228168c903c9bc151e6163a4a466f6d16712080916781157dd02d1fe9d0e59c9f0741ad046afec2b2f4dc3c3c526ce3248326501e06aff3574c5d3a5bac9479b3e3584b738c748f53e29dfd7d999134ae922a425eecd06c2c0fb709f1aef9d9df125ddc07c9d02676dc6a705ffe7fa9672f57380fe88c9595ee6e341ffbc7b38b1cfe37c87a2bf1d35c7a770c1608bd1e4448542270913c880a56d372816a30bf8556edf8391bcecb8c89602e996e9958ec84c168e447117a650fba0ab3a297b566d3d5b58751be39798437f2fbb3eedbc03d8bb886f2a03b3e879e5db11708a8930ded16ad669b3dc19e811fecc967da05ee0b2a0b628da60abb45611736c790241679ee46a6bbfd7234aa86cf49f41f984971fe8c23e4e5296748c245ff7dc6711a3813139f69677a74385089d7f5a8ba439be63a72ed81caaed1891586b5ab4dcfea75a252bda347489b172babde966483bc78f8fda30b15edcc176311091f72dc7c6e73172658813784dfbc837e3a283c3cca3ea0d5f41718ade096db607377118b75381d2d9759f210790b8d1f6e5214aaa61d8bb0a4d0a3256aef437eada410c0d34563bcfd4678af647c9d4380af2e82b9e2b3924ff01715d6167e238ac868b5151c2cf48eb3e3c6b11b8369dc99be04c2653eedfc5711f21b48ba8996167b922b512b5d56f484d311251eccc94b7735c75c6735513c6e8cbc0f343a7cfe485dce5af6a7206980141a69dd81aefbbd0c9858428990567e3e2397fc22db911897c79e30de9ec0ed698357598ffd73c5674549d588a091a4377d73ef21201b319ad28ea3798ec1bf2cb3ca074d76ffff0aee2ad816041e6bb381acc79114215db200a8e7c724ecaffb92c20363763841662dd2a7161a9cac3a818d7375a0b4d83217f2056b0e3a1a52e98ced53619aaf537ce552ee0f4c433736752cc26c50ff86a7c402b3ce926cf6a27d2f003168c6e8b46003c967b854817d635c494cfaa2c53be2dbbaf32142dd503b1a45ec027d5314cf92988e3a8fbcd975a0e0c7ee04654</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【AI】chatgpt入门</title>
    <link href="http://luhao.wiki/posts/3GDXTCB/"/>
    <id>http://luhao.wiki/posts/3GDXTCB/</id>
    <published>2023-08-30T16:58:13.000Z</published>
    <updated>2023-08-30T17:14:34.895Z</updated>
    
    <content type="html"><![CDATA[<p>OpenAI注册闭坑、GPT Api调用指南<span id="more"></span></p><h3 id="注册-OpenAI">注册 <a href="https://openai.com/">OpenAI</a></h3><p>跟这个教程操作即可：<a href="https://www.awyerwu.com/9829.html">ChatGPT最新注册教程</a></p><p>核心问题是两个：</p><ol><li>借助 VPN 绕过 OpenAI 的IP检测封控，直接挂美国</li><li>借助 <a href="https://sms-activate.org/">sms-activate</a> 接收外国手机的验证码</li></ol><h3 id="调用-GPT-Api">调用 <a href="https://platform.openai.com/docs/api-reference">GPT Api</a></h3><p>开发环境使用 <code>python3</code>，通过 <code>pip3 install openai</code> 安装依赖包。<br>注意生产环境也要挂VPN，下面是一段测试代码：</p><pre><code class="language-python"># -*- coding: utf-8 -*-import openaiopenai.api_key = "***********************"completion = openai.ChatCompletion.create(  model="gpt-3.5-turbo-0613",  messages=[    {      "role": "user",       "content": "解释厄尔尼诺现象",    }  ],  temperature = 0.7)print (completion.choices[0].message.content)</code></pre><h3 id="开源推荐">开源推荐</h3><ul><li><a href="https://github.com/zhayujie/chatgpt-on-wechat">chatgpt-on-wechat</a></li></ul><p>微信聊天机器人，支持GPT3.5/GPT4.0/文心一言/讯飞星火模型，支持个人微信、公众号、企业微信，支持文本、语音和图片的处理。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenAI注册闭坑、GPT Api调用指南&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="http://luhao.wiki/categories/AI/"/>
    
    <category term="AI" scheme="http://luhao.wiki/categories/AI/AI/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【量化】数据专题</title>
    <link href="http://luhao.wiki/posts/quant-data/"/>
    <id>http://luhao.wiki/posts/quant-data/</id>
    <published>2023-08-29T15:40:15.000Z</published>
    <updated>2023-10-13T17:23:14.145Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>交易需要与 <strong>哪些数据</strong> 打交道？</li><li>如何获取 <strong>可靠、实惠</strong> 的数据？</li><li>如何高效地 <strong>存储、读写、计算</strong> 数据？</li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;数据管线&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Tick&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;Bar&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;K-line&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#数据类型\&quot;>数据类型</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;基本数据&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;市场(行情)数据&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;第三方数据&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#数据提供商\&quot;>数据提供商</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#数据格式\&quot;>数据格式</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;金融常识&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#复权\&quot;>复权</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#财报数据\&quot;>财报数据</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#Pandas\&quot;>Pandas</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#性能相关\&quot;>性能相关</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;#内存相关\&quot;>内存相关</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#时间相关\&quot;>时间相关</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="数据管线">数据管线</h2><p>交易数据可以分为三类（从左到右）：</p><p><img src="/images/quant-data-chart.png" alt=""></p><p>换一个角度理解：Bar是Tick数据的重要性采样（有点像光栅化），K-Line是Bar数据的可视化展现（有点像Pixel-Shading）。<br>在这个处理流程中，信息的原貌是不断被丢失的，因此<strong>越原始的数据，价值含量越高</strong>，就像《舌尖上的中国》所说：高端的食材，往往只需最简单的烹饪。</p><p>同时也不能忽略 图形化展示的意义，因为：</p><ul><li><strong>主观交易</strong> 依赖 K线图、技术指标 等作出趋势性、预测性地判断</li><li><strong>量化交易</strong> 往往需要借助 Tick数据 去解读更多的市场微观信息。</li></ul><p><strong>如何理解Tick数据?</strong></p><ul><li>交易所收发交易数据的<strong>最小间隔</strong></li><li>可能是每一笔撮合成交（A股），也可能是每500毫秒的交易快照（商品期货）</li></ul><h2 id="数据类型">数据类型</h2><p>狭义理解的金融数据，大概只有 成交量 和 价格 等关键值，但真正的金融市场是错综复杂、影响纷繁的，需要从如下几个领域考量：</p><ul><li><p><font color="#ef6d3b"><strong>Fundamental Data</strong></font><br><strong>基本面数据</strong>，主要是企业的营收、财报等宏观信息，传统投资领域中的分析师，往往是对着海量的财报作出投资决策的。</p></li><li><p><font color="#ef6d3b"><strong>Market Data</strong></font><br><strong>市场数据</strong>，主要是市值、市盈率、股价、成家量等金融数据，特点是 频率高、时效性强、噪声大，提取有价值信息的难度也非常大。</p></li><li><p><font color="#ef6d3b"><strong>Analytics Data</strong></font><br>（第三方）<strong>分析数据</strong>是很宽泛的概念，可能是机构的研报、社交舆情的数据，甚至是相关政策的颁布、天气信息的变幻等等。特点是获取难度大、归纳提取有效信息难度更大。</p></li></ul><hr><p>考虑到数据获取的难度因素，我们一般基于 <code>Market Data</code> 的数据进行提炼和研究，这部分信息获取公开、透明、平等，且能得到的数据量也是最大的。<br>下面介绍一些常见的市场数据的提供商（获取渠道）。</p><h2 id="数据提供商">数据提供商</h2><p>这里推荐几个具有一定性价比的渠道，相较于个人投资者（爱好者）而言：</p><table><thead><tr><th style="text-align:center">渠道</th><th style="text-align:center">价格</th><th style="text-align:center">准确度</th><th style="text-align:center">覆盖度</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://baostock.com/">baostock</a></td><td style="text-align:center">免费</td><td style="text-align:center">中</td><td style="text-align:center">A股</td></tr><tr><td style="text-align:center"><a href="http://www.jinshuyuan.net/">金数源</a></td><td style="text-align:center">中</td><td style="text-align:center">高</td><td style="text-align:center">期货、A股</td></tr><tr><td style="text-align:center"><a href="https://shinnytech.com/">天勤量化</a></td><td style="text-align:center">部分免费</td><td style="text-align:center">高</td><td style="text-align:center">期货、A股(18年起)</td></tr><tr><td style="text-align:center"><a href="http://www.juejinshuju.com/">掘金数据</a></td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">期货、A股、数字货币</td></tr></tbody></table><p>如果你的策略有所起色，甚至扭亏为盈了，后面可以考虑向专业的数据提供商（如<a href="https://www.wind.com.cn/mobile/WDS/zh.html">Wind</a>、同花顺）购买昂贵但准确的市场数据，有句话说得好：贵的东西总有贵的道理！</p><p><strong>再按照股票、期货细分来看：</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">频率</th><th style="text-align:center">数据体量</th><th style="text-align:center">推荐数据源</th></tr></thead><tbody><tr><td style="text-align:center">A股 ①</td><td style="text-align:center">5档逐笔</td><td style="text-align:center">1T /年</td><td style="text-align:center">tqsdk白嫖</td></tr><tr><td style="text-align:center">1990年~2023年</td><td style="text-align:center">1 min</td><td style="text-align:center">25G /年</td><td style="text-align:center">tqsdk白嫖</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5 min</td><td style="text-align:center">5G /年</td><td style="text-align:center">baostock免费</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">日k</td><td style="text-align:center">累计 2G</td><td style="text-align:center">baostock免费</td></tr><tr><td style="text-align:center">期货 ②</td><td style="text-align:center">tick</td><td style="text-align:center">单品种 1G /年</td><td style="text-align:center">taobao购买 / tqsdk</td></tr><tr><td style="text-align:center">2016年~2023年</td><td style="text-align:center">1 min</td><td style="text-align:center">累计 1.5G</td><td style="text-align:center">tqsdk</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5 min</td><td style="text-align:center">累计 0.3G</td><td style="text-align:center">tqsdk</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">日k</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数字货币</td><td style="text-align:center">tick</td><td style="text-align:center"></td><td style="text-align:center">掘金数据</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">1 min</td><td style="text-align:center"></td><td style="text-align:center">掘金数据</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5 min</td><td style="text-align:center"></td><td style="text-align:center">掘金数据</td></tr></tbody></table><ul><li>① <strong>国内主要上市股票约 5000 只</strong>，平均上市时间 11.9 个年份（截至发文日期 2023年10月）<ul><li><a href="http://www.sse.com.cn/market/stockdata/statistic/">上交所 2288只</a> 主板(1727)，科创板(561)</li><li><a href="https://www.szse.cn/market/">深交所 2827只</a> 主板(1506)，创业板(1321)</li><li>首支上市日期为 1990年 平安银行</li></ul></li><li>② <strong>国内商品期货、金融期货等，约 80 个种类</strong></li></ul><h2 id="数据格式">数据格式</h2><p>推荐阅读：<a href="/posts/data-perf/">csv, hdf5, feather 三种数据性能对比</a></p><h2 id="复权">复权</h2><p>在理解为什么要复权之前，先理解几个金融市场的基本概念：</p><ul><li><p><strong>分红：每10股派发6元</strong><br>本质是将股票市值中的6元兑换成现金，发放到你的账户，等同于套现</p></li><li><p><strong>拆股：每1股拆分为5股</strong><br>本质是因为股价过高作拆分，单只股票价格也会变成五分之一</p></li></ul><p>金融数据中的市场价格（包括开盘价、收盘价），往往都是不考虑分红、拆股的背景条件，因此经常见到股价突然腰斩 <code>90%</code> 的情况，其实并不是股价跌这么多，而是因为该上司公司拆股了。</p><p>因此，复权价格就是为了<strong>抹除非市场因素带来的涨跌，让价格保持平滑、连续性</strong></p><div class="admonition note"><p class="admonition-title">前复权和后复权</p><ul><li>前复权：以 <strong>第一天</strong> 的价格为基准，推算后面的价格</li><li>后复权：以 <strong>最后一天</strong> 的价格为基准，推算之前的价格</li><li><a href="https://www.zhihu.com/question/31004373">知乎: 通俗易懂的解释前复权，不复权和后复权有什么区别？</a></li></ul></div><h2 id="财报数据">财报数据</h2><p><strong>核心是区分毛利润和净利润</strong></p><ul><li>毛利润(gross profit) = 收入 - 生产成本</li><li>净利润(net income)= 毛利润 - 销售/管理/研发/财务成本 - 税收</li></ul><p>以白酒行业为例，假设一瓶售价为880的白酒，其原材料成本是80元，则其毛利率为 <code>800/880=91%</code>。观察国内相关上司企业，就能够发现 <code>90%+</code> 的毛利率是普遍现象。<br>但由于销售成本（如广告）和人工成本的存在，其真实的净利率往往在 <code>50%</code> 以下。</p><p><strong>指标的含义?</strong></p><ul><li>毛利润衡量的是<strong>产品价值</strong>，毛利率高，说明这是一门好生意（白酒、互联网）</li><li>净利润衡量的是<strong>企业价值</strong>，净利率高，说明其赚钱能力强（九安医疗 …）</li></ul><div class="admonition warning"><p class="admonition-title">留几个没想明白的问题</p><ol><li>对于没有实体的 <strong>互联网行业</strong>，如何衡量其生产成本?</li><li>毛利润是否扣除 <strong>员工工资</strong>?</li><li><strong>为什么要统计毛利率?</strong> 光有净利率不足够吗?</li></ol></div><h2 id="Pandas">Pandas</h2><p><a href="https://pandas.pydata.org/">Pandas</a> 是 应用最广泛的 Python数据处理库，在量化交易、数据清洗中非常重要。</p><h4 id="性能相关">性能相关</h4><ul><li><a href="https://numba.readthedocs.io/en/stable/user/5minguide.html"><font color="#1A9BFF"><em><strong>numba</strong></em></font></a></li><li>读取较多个csv文件耗时较长, 如何用 <font color="#1A9BFF"><em><strong>multiprocess + pandas</strong></em></font> 读取?</li></ul><pre><code class="language-python">from multiprocessing import Pooldef read_csv(file_name):    return pandas.read_csv(file_name)file_list = [...]with Pool(processes=6) as pool:    df_list = pool.map(read_csv, file_list)    df_all = pd.concat(df_list, ignore_index=True)    """ 推荐在read_csv里将数据写到一个全局的dict """</code></pre><h4 id="内存相关">内存相关</h4><p>为了节省runtime内存, DataFrame默认读取的是<code>float64</code> &amp; <code>int64</code>格式, 占用内存大且浪费</p><ul><li><code>np.dtype('int32')</code>: 表示int32类型</li><li><code>np.iinfo('int64').max</code>: 获取int64的最大值</li><li><code>np.finfo('float64').max</code>: float64</li><li><code>int64: 64 bits = 8 byte</code></li></ul><p>建议如下:</p><ul><li>不考虑负数, 用uint代替int</li><li>能用<code>int16</code>, 就不要用<code>int32</code></li><li><font color="#FF1E10"><strong>为什么<code>float64</code>比<code>int64</code>表示范围大? 占内存是一样的</strong></font></li></ul><h4 id="时间相关">时间相关</h4><p>这里要写很多篇幅, 先介绍Pandas自带的转化:<br><font color="#FF1E10"><strong><code>TODO</code></strong></font><br><code>pandas.to_datetime(df)</code>: 返回类型是pandas的timestamp, 可以访问.date(), .day</p><h4 id="注意项">注意项</h4><ul><li><p>读取中文报错: <code>pd.read_csv(file_name, encoding = "gbk")</code></p></li><li><p>UserWarning: Pandas doesn’t allow columns to be created via a new attribute name</p><ul><li>正确写法: <code>df['name'] = xxx</code></li><li><s>错误写法: <code>df.name = xxx</code></s></li></ul></li></ul><h4 id="复杂操作">复杂操作</h4><ul><li><p><strong>groupby</strong></p><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html?highlight=groupby#pandas.DataFrame.groupby">Pandas Groupby</a></li><li><a href="https://zhuanlan.zhihu.com/p/101284491">知乎</a></li><li><code>DataFrame.groupby(by=None)</code>: 按照by这一column筛选</li><li><code>Group.get_group()</code>: 获取指定的group, 返回DataFrame</li></ul></li><li><p><strong>merge</strong></p><ul><li>DataFrame, Series之间任意合并</li><li>注意<code>left</code>, <code>right</code>, <code>outer</code>等几种方式, 底层就是<code>SQL</code>的逻辑</li><li>merge完赋值如果不对齐，可以去重: <code>mf = mf[~mf.index.duplicated()]</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;交易需要与 &lt;strong&gt;哪些数据&lt;/strong&gt; 打交道？&lt;/li&gt;
&lt;li&gt;如何获取 &lt;strong&gt;可靠、实惠&lt;/stron</summary>
      
    
    
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    <category term="量化交易" scheme="http://luhao.wiki/categories/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【名人访谈】BBC采访马斯克</title>
    <link href="http://luhao.wiki/posts/2YS1Y71/"/>
    <id>http://luhao.wiki/posts/2YS1Y71/</id>
    <published>2023-08-23T15:14:25.000Z</published>
    <updated>2023-08-24T13:40:44.713Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://www.youtube.com/watch?v=donC2VuVTtM"><strong>Youtube采访视频 2023年4月21日</strong></a></li><li><a href="https://www.bilibili.com/video/BV18F411y7ac"><strong>B站解说视频</strong></a></li><li>马斯克的核心技能：屌爆的思维逻辑 + 烂熟的辩论技巧</li><li>这一派还有个大佬是罗永浩，可以看他锤王自如的视频</li><li><font color="#FF1E10"><strong>TODO:</strong></font> 文章排版不满意，等录个视频锻炼口头表达</li></ul></div><h2 id="采访背景">采访背景</h2><h3 id="马斯克方面">马斯克方面</h3><blockquote><p>阅读材料：<a href="https://zh.wikipedia.org/zh-hans/%E5%9F%83%E9%9A%86%C2%B7%E9%A9%AC%E6%96%AF%E5%85%8B%E6%94%B6%E8%B4%AD%E6%8E%A8%E7%89%B9%E6%A1%88">维基百科 埃隆·马斯克收购推特案</a></p></blockquote><p>马斯克与 <strong>2022年10月</strong> 以 <strong>440亿美金</strong> 价格，收购美国社交巨头 <em><strong>Twitter</strong></em>，其过程经历三个阶段：</p><ul><li>【提出】马斯克提出收购，遭到Twitter和市场反对</li><li>【后悔】马斯克发现Twitter用户数据造假，尝试放弃收购计划</li><li>【被迫】马斯克迫于法律诉讼，被迫收购Twitter</li></ul><p>收购 <em>Twitter</em> 后，马斯克主要实行四大措施：</p><ul><li>大量裁员（8000人-&gt;1500人）</li><li>开源 <em>Twitter</em> 内容推荐算法</li><li>删除垃圾机器人</li><li>退出收费认证服务</li></ul><h3 id="BBC方面">BBC方面</h3><p>其次，BBC的采访素来以 <strong>尝试刁难采访者，角度狠辣，制造爆点话题</strong> 为主，围绕收购案本身，（从BBC角度）有如下几点值得 <strong>埋坑</strong>：</p><ol><li>【道德角度】接手公司后大量裁员</li><li>【媒体角度】Twitter充斥越来越多的虚假信息</li><li>【决策角度】收费认证被所有人吐槽</li></ol><p>所以，这次采访不是一个歌颂丰功伟绩的 “单口相声”，而更像是互相博弈的 “双人对线”，可以说火药味十足。</p><h2 id="采访正题">采访正题</h2><ul><li><font color="#ef6d3b"><strong>❓BBC: 聊聊Twitter收购案</strong></font></li></ul><p>这里马斯克谈了两点，【1】为什么停止收购，【2】强调最终收购是迫不得已。</p><blockquote><p>在谈【1】时，马斯克举了一个非常形象的例子：</p><ul><li>你想购买一袋大米，本来约定允许10%的米是坏的，最后发现30%的米都是坏的。这显然无法接受。</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【进攻三连】：1. 你解雇大量员工，2. 你裁员的行为很随意，3. 你毫无同情心</strong></font></li></ul><p>这里有三个观点，分别是【事实】-&gt;【表象】-&gt;【推断】，层层推进，层层致命。</p><blockquote><p><strong>马斯克的回复很经典</strong>，其实核心是马保国的 <strong>接化发</strong> （太极）：</p><ul><li>【接】：部分认同，但留有余旋 （Musk：确实裁员了…）</li><li>【化】：转移到对自己有利的话题 （Musk：公司账面只能4个月，不裁员所有人都死…）</li><li>【发】：用刁钻假设，反问对方（Musk：换做你怎么做? <a href="https://zhuanlan.zhihu.com/p/338604183">有轨电车难题</a>…）</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【换角度进攻】：你是世界首富，为什么不自己掏钱帮自己公司?</strong></font></li></ul><blockquote><p>这里马斯克没有技巧，全靠<strong>真诚+卖惨</strong>：我贱卖了很多特斯拉的股票才能买下Twitter（别再道德绑架俺…）</p></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【问句埋坑】：你是否后悔裁员？</strong></font></li></ul><p>这是记者经典的疑问圈套，不论回答是否都是下策。</p><blockquote><p>回答是：马斯克认错了！亲口承认裁员不明智<br>回答否：马斯克心狠手辣！裁员毫无愧疚</p></blockquote><p>因此马斯克直接不回答该问题，而是侧面讲了两个自己的观点：</p><blockquote><p>【1】公司有自己的运转规律<br>【2】卖特斯拉股票很困难，它还导致其市值暴跌（寻求弱势低位）</p><ul><li>但如果光说第一点还不够，因为是 <strong>贱卖股票</strong> 让马斯克把自己放到了一个弱势地位，有效阻止记者继续纠缠。</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【聊政治，埋坑】：Twitter被你收购后解封了Trump，他何时回归?</strong></font></li></ul><p>政治是敏感话题，在西方也是如此。因此马斯克直截了当地说 <strong>不知道</strong>。<br>到这里还没完，高手厉害之处就是，<strong>抓住任何机会宣传自己的企业</strong>，于是他说：</p><blockquote><p>我在选举投了Biden，但解封了Trump，说明 <strong>Twitter是自由发声的地方</strong></p></blockquote><p>牛逼！但BBC也是高手，顺着自由发声的话题，立刻谈到Twitter的一些负面问题 ↓</p><ul><li><font color="#ef6d3b"><strong>❓BBC【开始抨击】：Twitter强调言论自由，是否助长错误信息（言论）?</strong></font></li></ul><p>再一次经典的疑问圈套，马斯克作为高手，自然不会落入俗套。他直接反问记者：<strong>谁定义错误信息？</strong>，<strong>BBC难道没有发布过错误信息？</strong></p><ul><li><font color="#ef6d3b"><strong>❓BBC【开始抨击】：Twitter裁掉整个内容审核部门，是否助长仇恨言论?</strong></font></li></ul><blockquote><p>这里介绍一个背景，大部分的社交媒体，都是通过人工（为主）+AI（为辅）过滤仇恨言论（如政治、宗教、法律），但马斯克背其道而行之（裁掉部门）。</p></blockquote><p>马斯克仍然 <strong>以反问起手</strong>：什么是仇恨言论？你用过Twitter吧（必然用过）。那举一个你见过的仇恨言论的例子。</p><blockquote><p>【若记者举了】可以逐点反驳击破，因为很多仇恨言论是片面的，如LSBT，且没法在公开场合说<br>【若记者不举】根据 “谁主张 谁举证” 的规则，其不攻自破</p></blockquote><h2 id="马斯克传达的观念">马斯克传达的观念</h2><p><strong>俗手总是去证明自己，高手往往是在表达自己</strong></p><p>抛开辩论技巧，大佬传达的观念也是值得学习的，马斯克在一个小时的采访中主要传达了这几个观点:</p><ul><li><p>【方法论】想生存? 降本增效</p><ul><li>一方面裁员，一方面裁设备（虽然导致服务崩溃）</li><li>拉回旧的广告商，提高收入</li></ul></li><li><p>【方法论】开源核心算法</p><ul><li>就像餐厅把自己的后厨公开到幕前。</li><li>只有公开透明的算法，才能让民众感到安心（尤其是社交领域）</li></ul></li><li><p>【价值观】社交媒体的意义</p><ul><li>马斯克不在乎赚钱（前提是企业能活下去）</li><li>好的社交媒体，是人们信赖的真相的来源，且人们会自发去评判和追求事物的真相</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=donC2VuVTtM&quot;&gt;&lt;strong&gt;Youtu</summary>
      
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【C++11】lvalue &amp; rvalue (references)</title>
    <link href="http://luhao.wiki/posts/rvalue/"/>
    <id>http://luhao.wiki/posts/rvalue/</id>
    <published>2023-08-20T14:53:43.000Z</published>
    <updated>2023-09-20T15:46:24.295Z</updated>
    
    <content type="html"><![CDATA[<p><code>C++</code> 左值、右值引用<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://www.internalpointers.com/post/understanding-meaning-lvalues-and-rvalues-c"><em><strong>Understanding the meaning of lvalues and rvalues in C++</strong></em></a></li><li><a href="https://www.internalpointers.com/post/c-rvalue-references-and-move-semantics-beginners"><em><strong>C++ rvalue references and move semantics for beginners</strong></em></a></li><li><a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html"><em><strong>Move semantics and rvalue references in C++11</strong></em></a></li></ul></div><div class="markmap-container" style="height:200px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;左值和右值&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#左值-→-右值\&quot;>左值 → 右值</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#右值-→-左值\&quot;>右值 → 左值</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;右值引用&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#move语义-🔥\&quot;>move语义</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#std-move\&quot;>std::move</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#std-remove-reference\&quot;>std::remove_reference</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#三种传参\&quot;>三种传参</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#1-const-T\&quot;>const T</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#2-const-T\&quot;>const T&amp;amp;</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#3-T\&quot;>T&amp;amp;&amp;amp;</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="前言">前言</h2><p>从接触、学习、运用 <code>C++</code> 至今，左右值引用一直是自己困惑的点。伴随着现代C++的发展，它们开始扮演越来越重要的作用（如 <code>std::move</code>、<code>std::remove_reference</code>…）。<br>这篇争取彻底搞懂他们。</p><p>先看 <code>gcc</code> 一个编译报错，为什么 <code>666 = x</code> 的语法是错误的？<br><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as left operand of assignment</em></p><p>编译器是在说：<strong>赋值符号 <code>=</code> 的左操作数，必须是左值 <code>lvalue</code> ! 换句话说，这里的 <code>666</code> 不是一个左值。</strong></p><pre><code class="language-c">int x;666 = x;</code></pre><h2 id="左值和右值">左值和右值</h2><p>如何区分 左值 和 右值？</p><ul><li><strong><code>lvalue</code>：指向明确的内存地址</strong>，又称 <code>variable</code></li><li><strong><code>rvalue</code>：没有明确的内存地址</strong>，又称 <code>literal constant</code></li></ul><p>下面看几个示例：</p><ul><li><code>int x = 666</code>：<code>x</code> 是 <code>lvalue</code>，<code>666</code> 是 <code>rvalue</code></li><li><code>int* y = &amp;x</code>：<code>x</code> 是 <code>lvalue</code>，<code>y</code> 是 <code>lvalue reference</code></li></ul><p>编译规则，赋值<code>=</code> 和取地址<code>&amp;</code> 的左边必须是 <code>lvalue</code>，不然会报如下错误：</p><blockquote><p><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as left operand of assignment</em><br><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as unary ‘&amp;’ operand`</em></p></blockquote><div class="admonition warning"><p class="admonition-title">区分 左值 和 左值引用</p><ul><li><code>int x = 1</code>：x是左值</li><li><code>int&amp; y = x</code>：y是左值引用</li></ul></div><h3 id="function-reference">function reference</h3><p>函数的返回值可以是 左值，也可以是 右值。</p><ul><li>右值 ×</li></ul><pre><code class="language-c">int setValue() { return 6; };setValue() = 3; // error: lvalue required as left operand of assignment</code></pre><ul><li>左值 √</li></ul><pre><code class="language-c">int x = 100;int&amp; setValue() { return x; };setValue() = 1;</code></pre><h2 id="左值-→-右值">左值 → 右值</h2><p>左值 经常会被转化为 右值，如下示例：</p><ul><li><code>x, y</code> 都是 左值</li><li><code>x + y</code> 被转化为 右值</li></ul><pre><code class="language-c">int x = 1;int y = 3;int z = x + y;   // ok</code></pre><p>上面经历了一次 <strong>lvalue -&gt; rvalue</strong>  的隐式转换，很多操作符（<code>+, -, /</code>）都会提供。</p><h2 id="右值-→-左值">右值 → 左值</h2><p>右值 到 左值 的转换是被禁止的，如下代码是非法的：</p><pre><code class="language-c">int&amp; x = 10;// error: cannot bind non-const lvalue reference of type 'int&amp;' to an rvalue of type 'int'</code></pre><h2 id="右值引用-🔥">右值引用 🔥</h2><p>C++ 的一条重要编译规则是：<strong>你无法绑定一个 右值 的地址，除非绑定到一个 <code>const</code> 类型</strong>，例如：</p><pre><code class="language-c">int&amp; x = 666; // error: cannot bind non-const lvalue reference of type 'int&amp;' to an rvalue of type 'int'const int&amp; x = 666; // OKstd::string s1 = "Hello ";std::string s2 = "world";const std::string&amp; s3 = s1 + s2;s3 += " luhao";  // error: no match for 'operator+=' (operand types are 'const std::string'</code></pre><p>但是上面的写法有个弊端，<strong>即无法再修改 <code>s3</code> 的值</strong>。<br>为了能够修改右值（即临时变量），<code>C++11</code> 正式引入右值引用（<code>rvalue reference</code>），其符号是 <code>&amp;&amp;</code>：</p><pre><code class="language-c">std::string s1 = "Hello ";std::string s2 = "world";std::string&amp;&amp; s3 = s1 + s2;s3 += " luhao"; // OK</code></pre><p>上面的示例看出来用处不大，<strong>因为 <code>rvalue reference</code> 真正大展拳脚的地方，是在 移动语义（<code>move semantics</code>）。</strong></p><h2 id="move语义-🔥">move语义 🔥</h2><p>阅读资料</p><ul><li><a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html"><em><strong>Move semantics and rvalue references in C++11</strong></em></a></li></ul><p><strong>移动语义 是一种利用右值引用的技术，来避免拷贝临时变量的优化手段。</strong></p><h3 id="为什么需要-move-semantics-💡">为什么需要 move semantics? 💡</h3><p>假设 <code>class Holder</code> 是一个(内存)非常繁重的类，考虑到如下的构造和拷贝构造函数。<br>当调用 <code>Holder h1(h)</code> 时，因为 <code>std::copy</code> 造成巨大的内存拷贝开销，如果后文中 <code>h</code> 也不再继续使用，为什么不尝试将 <code>h</code> 转交给 <code>h1</code> 呢?</p><pre><code class="language-c">class Holder{public:    Holder(int size) {        m_data = new int[size];        m_size = size;    }    Holder(const Holder&amp; other)    {        m_data = new int[other.m_size];        std::copy(other.m_data, other.m_data + other.m_size, m_data);        m_size = other.m_size;    }    ~Holder() { delete[] m_data; }private:    int*   m_data;    size_t m_size;}int main(){    Holder h(10000);    Holder h1(h); // 调用 std::copy 带来非必要开销    return 1;}</code></pre><p>借助移动语义，可以优化掉上面的拷贝。注意到下面使用了 <a href="#std-move"><em><strong>std::move</strong></em></a>，它能将左值转化为右值，是C++标准库的成员函数，后面有介绍。</p><pre><code class="language-c">Holder(Holder&amp;&amp; other){    // 赋值    m_data = other.m_data;    m_size = other.m_size;    // 清空other的状态    other.m_data = nullptr;    other.m_size = 0;}int main(){    Holder h(10000);    Holder h1(std::move(h));    return 1;}</code></pre><h3 id="std-move">std::move</h3><p>阅读材料：</p><ul><li><a href="https://en.cppreference.com/w/cpp/utility/move"><em>cppreference</em></a></li><li><a href="https://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-api-4.5/a00936_source.html"><em>libstdc++: move.h</em></a></li></ul><p>阅读 <code>std::move</code> 的源码，其实只是作了类型转化，将 任意形式的<code>_Tp</code> 转化成右值:</p><ul><li><code>std::remove_reference</code>：去掉引用</li><li><code>static_cast</code>：隐式转换</li></ul><div class="admonition note"><p class="admonition-title">std::move</p><ul><li><code>move</code> 右值：直接返回</li><li><code>move</code> 左值：转成右值，并返回</li></ul></div><pre><code class="language-c">  /**   *  @brief  Convert a value to an rvalue.   *  @param  __t  A thing of arbitrary type.   *  @return The parameter cast to an rvalue-reference to allow moving it.  */  template&lt;typename _Tp&gt;    constexpr typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;    move(_Tp&amp;&amp; __t) noexcept    { return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t); }</code></pre><h3 id="std-remove-reference">std::remove_reference</h3><p><code>remove_reference</code> 顾名思义，就是去除任意类型的引用，借助模板实现。<br>核心是对于 <code>_Tp&amp;</code> 和 <code>_Tp&amp;&amp;</code> 这两种带引用的传参，需要去掉其引用的部分，只获取其类型（通过 <code>::type</code> 获取）</p><pre><code class="language-c">  template&lt;typename _Tp&gt;    struct remove_reference    { typedef _Tp   type; };  // 特化  template&lt;typename _Tp&gt;    struct remove_reference&lt;_Tp&amp;&gt;    { typedef _Tp   type; };  // 特化  template&lt;typename _Tp&gt;    struct remove_reference&lt;_Tp&amp;&amp;&gt;    { typedef _Tp   type; };</code></pre><h2 id="三种传参">三种传参</h2><h3 id="1-const-T"><code>1. const T</code></h3><p>常量值传递，默认有一次拷贝开销。<br>如果是 <code>builtin-types (int、float ...)</code> 推荐使用这种传递方式</p><h3 id="2-const-T"><code>2. const T&amp;</code></h3><p>常量引用传递，<code>&amp;</code> 避免拷贝带来的开销，<code>const</code> 避免被修改。<br>但会将生命周期延续</p><h3 id="3-T"><code>3. T&amp;&amp;</code></h3><p>右值传递，避免拷贝带来的开销，推荐复杂结构体如 <code>std::vector ...</code><br>缺点是调用者必须传入右值，否则编译期间报错，如果是通用接口比较难受</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;C++&lt;/code&gt; 左值、右值引用&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【C++17】refl-cpp</title>
    <link href="http://luhao.wiki/posts/refl-cpp/"/>
    <id>http://luhao.wiki/posts/refl-cpp/</id>
    <published>2023-08-17T16:27:58.000Z</published>
    <updated>2023-08-20T13:40:16.985Z</updated>
    
    <content type="html"><![CDATA[<p>品读<code>C++</code>经典反射库<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>源码：<a href="https://github.com/veselink1/refl-cpp"><em><strong>veselink1/refl-cpp</strong></em></a></li><li>blog：<a href="https://veselink1.github.io/blog/cpp/metaprogramming/2019/07/13/refl-cpp-deep-dive.html"><em>refl-cpp — A deep dive into this compile-time reflection library for C++</em></a></li><li>这篇博客大致是英文版的 直译 + 自己理解，旨在提高对 <code>templates</code> + <code>reflections</code> 的掌握</li><li>精读blog ➜ 理解源码 ➜ 上手仿造</li></ul></div><h2 id="目录">目录</h2><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#compile-time%E5%8F%8D%E5%B0%84">compile-time反射</a></li><li><a href="#%E6%9E%84%E5%BB%BA%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98">构建类的成员</a></li><li><a href="#%E4%BD%BF%E7%94%A8-macros-%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81">使用 <code>macros</code> 组织代码</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%8D%E5%B0%84">函数反射</a></li><li><a href="#%E9%81%8D%E5%8E%86%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98">遍历类的成员</a></li></ul><h2 id="前言">前言</h2><p><code>refl-cpp</code> 的设计初衷是：</p><ul><li>支持 在 <strong><code>C++17</code></strong> 及更高版本 <strong>提供编译期反射（Compile-time）</strong> 的方法。</li><li>支持 <code>enumeration</code>，<code>introspection</code><ul><li><code>enumeration</code>：类似 <code>Python dir()</code> 枚举对象所有的属性</li><li><code>introsection</code>：类似 <code>Python getattr</code> 访问对象的指定属性</li></ul></li><li>支持 类型模板、成员模板</li><li>支持 <code>attributes</code> <font color="#FF1E10"><strong>TODO</strong></font></li></ul><p><code>refl-cpp</code> 的设计避免如下：</p><ul><li>避免 使用宏魔法</li><li>避免 <code>Private</code> 私有成员的反射</li><li>避免 运行时 按名称查询类型信息</li></ul><h2 id="compile-time反射">compile-time反射</h2><p>首先 <code>refl-cpp</code> 是一个 <code>compile-time</code> 的反射库，这意味着它不会维护一个 runtime 的数据结构来实现反射目的，例如下面是不可取的：</p><pre><code class="language-c">struct TypeInfo {    std::string name;           // 对象的类型名称    std::vector&lt;?&gt; members;     // 对象的所有成员    std::vector&lt;?&gt; attributes;  // 对象的所有成员取值}// ↓ 维护一个全局的反射数据结构std::unordered_map&lt;std::string, TypeInfo&gt; s_typeRegistry;</code></pre><p>相反，<code>refl-cpp</code> 的做法是，通过 cpp模板特化 以一种类相关的方式（<code>type-dependent</code>）来存储 <code>metadata</code>，例如下面的做法：</p><pre><code class="language-c">template &lt;typename&gt; struct TypeInfo {};// ↓ Point类的编译期信息template &lt;&gt;struct TypeInfo&lt;Point&gt; {  static constexpr char name[] = "Point";  ??? members = {};  ??? attributes = {};};</code></pre><h2 id="构建类的成员">构建类的成员</h2><p>上一节提供了存储 类信息 的方法，但是如何存储 其成员变量（和方法）呢？<br><code>refl-cpp</code> 使用一种新颖的方式来存储：</p><pre><code class="language-c">template &lt;size_t N&gt;struct MemberInfo;/* 第0个成员的模板特化 */template &lt;&gt;struct MemberInfo&lt;0&gt; {  /* ... */};/* 第1个成员的模板特化 */template &lt;&gt;struct MemberInfo&lt;1&gt; {  /* ... */};static constexpr size_t MemberCount = 2;</code></pre><p><code>MemberInfo</code> 是类成员的模板特化，因此将其添加到 <code>TypeInfo</code> 的作用域（如下）。<br><code>typename Dummy</code> 是因为C++不允许成员完全模板特化，而部分成员的模板特化是允许的。<font color="#FF1E10"><strong>TODO</strong></font></p><pre><code class="language-c">template &lt;&gt;struct TypeInfo&lt;Point&gt; {  template &lt;size_t N, typename Dummy&gt;  struct MemberInfo;  /* 第0个成员的模板特化 */  template &lt;typename Dummy&gt;  struct MemberInfo&lt;0&gt; {    /* ... */  };  /* 第1个成员的模板特化 */  template &lt;typename Dummy&gt;  struct MemberInfo&lt;1&gt; {    /* ... */  };  static constexpr size_t MemberCount = 2;};</code></pre><h2 id="使用-macros-组织代码">使用 <code>macros</code> 组织代码</h2><p>上一节提供了粗略的 类 + 类成员 的反射方案，那么如何声明它们呢？<br>答案是借助 <code>macros</code> 实现（作者不是不建议使用宏么😂…）</p><ul><li><code>__COUNTER__</code> 是非标准库的宏，每次调用增加<code>1</code>，且从<code>0</code>开始</li><li>宏展开后的代码，可看示例：<a href="https://gist.github.com/veselink1/f4e2fa94bda0514631753f13a9b93f9b"><em>refl-cpp-deep-dive-5-generated.cpp</em></a></li><li>另外每个 <code>TypeInfo</code> 和 <code>MemberInfo</code> 还应该包含如下内容：<ul><li><code>static constexpr char name[] = …</code></li><li><code>static constexpr std::tuple&lt;…&gt; attributes = {…}</code></li><li><code>static constexpr auto* pointer = &amp;Type::MemberName</code></li></ul></li></ul><pre><code class="language-c">template &lt;typename T&gt;struct TypeInfo {};#define REFLECT_TYPE(TypeName) \  template&lt;&gt; struct TypeInfo&lt;TypeName&gt; { \    template &lt;size_t, typename&gt; struct MemberInfo; \    static constexpr size_t MemberIndexOffset = __COUNTER__ + 1; #define REFLECT_FIELD(FieldName) \  template &lt;typename Dummy&gt; struct MemberInfo&lt;__COUNTER__ - MemberIndexOffset&gt; \  {}; \#define REFLECT_END \    static constexpr size_t MemberCount = __COUNTER__ - MemberIndexOffset; \  };// Usage:REFLECT_TYPE(Point)   REFLECT_FIELD(x)   REFLECT_FIELD(y)REFLECT_END</code></pre><div class="admonition note"><p class="admonition-title">Tips: 借助 VisualStudio 查看宏展开</p><ul><li>鼠标悬停在宏上，点击 <code>Expand Inline</code><img src="/images/vs-macros-expand.png" alt=""></li></ul></div><h2 id="函数反射">函数反射</h2><p><code>refl-cpp</code> 还提供反射函数的功能。</p><p>为了区分成员（是变量还是方法），每个 <code>MemberInfo</code> 有一个公共的 <code>typedef</code>，它等同于 <code>refl::members::field</code> 和 <code>refl::members::function</code> 两者之一。而考虑到 函数的重载和模板，这部分功能（相对于反射成员）会更加复杂。</p><p><code>refl-cpp</code> 通过如下方法：<font color="#FF1E10"><strong>TODO</strong></font></p><pre><code class="language-c">template &lt;typename R, typename... Args&gt;auto resolve(R(*fn)(Args...), Args&amp;&amp;... args) -&gt; decltype(fn);/*   Imagine 12 more overloads of resolve for different pointer-to-member   combinations (plain, &amp;, &amp;&amp;, const, volatile qualifiers)*/template &lt;typename... Args&gt;static constexpr decltype(detail::resolve(&amp;Type::MemberName, std::declval&lt;Args&gt;()...)) pointer { &amp;Type::MemberName };</code></pre><p>↑ 上面这段代码理解起来较为困难，我们可以将其功能拆解一下，它是为了解决什么问题？</p><p>想象类型 <code>A</code> 具有两个函数重载：</p><ul><li><code>f(int)</code></li><li><code>f(const std::string)</code></li></ul><p>当拥有一个指向f的函数指针（<code>&amp;f</code>）时，编译器怎么知道调用哪个？<br><code>refl-cpp</code> 实际会帮助编译器 推导出正确的重载函数（通过将 <code>&amp;f</code> 作为参数传递给另一个函数的方式，来直接触发函数）。<br><code>resolve</code> 没有任何定义，它只是一个 <code>prototype</code>，作用是作为编译器的一个提示。</p><p>这种方法总结起来是：<strong>传递函数性质的参数（由 <code>std::decalval</code> 产生）</strong>。它的好处是：所有的参数类型转换都适用，即我们可以通过 <code>MemberInfo&lt;?&gt;::pointer&lt;int&gt;</code> 并得到一个 <code>void(*)(long)</code> 类型的指针作为结果。</p><h2 id="遍历类的成员">遍历类的成员</h2><p>前面讲了如何创建和存储类成员的 <code>metadata</code>，这节介绍如何遍历它们（<code>compile-time</code>）。<br>核心思想是 借助可变参数模板，创建一个 <code>TypeList</code> 的类型成员列表，并提供枚举的方法。</p><pre><code class="language-c">template &lt;typename... Ts&gt;struct TypeList {};</code></pre><p>!!! NOTE 这块讲的不是很细，没搞懂…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;品读&lt;code&gt;C++&lt;/code&gt;经典反射库&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【cpp】Templates</title>
    <link href="http://luhao.wiki/posts/templates/"/>
    <id>http://luhao.wiki/posts/templates/</id>
    <published>2023-08-13T17:47:03.000Z</published>
    <updated>2023-08-30T17:19:34.685Z</updated>
    
    <content type="html"><![CDATA[<p>C++模板、meta-programming<span id="more"></span></p><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Function Templates&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#模板基础\&quot;>模板基础</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#编译检查\&quot;>编译检查</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#参数推导\&quot;>参数推导</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#多参数\&quot;>多参数</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#函数重载\&quot;>函数重载</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Class Templates&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#模板特化\&quot;>模板特化</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;偏特化&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#模板特化-代码示例\&quot;>代码示例</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;SFINAE <font color=#FF1E10><strong>TODO</strong></font>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;std&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#⭐std-max\&quot;>std::max</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#⭐std-pair\&quot;>std::pair</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#⭐type-traits\&quot;>type_traits::is_integral</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;/posts/rvalue/#std-move\&quot;>std::move</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;反射 <font color=#FF1E10>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;/posts/refl-cpp/\&quot;>refl-cpp</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Function-Templates">Function Templates</h2><h3 id="模板基础">模板基础</h3><p>下面是一个最简单的函数模板示例：</p><pre><code class="language-c">template &lt;typename T&gt;T max (T a, T b){    return b &lt; a ? a : b;}</code></pre><ul><li><code>T</code> 是定义类型的变量，它可以是 <code>int</code>、<code>float</code>、任何class…</li><li><code>typename</code> 是关键字，<code>template&lt;class T&gt;</code> 是兼容 C++98 的一种正确写法</li><li>上面有两个潜在约束：1. <code>T</code>必须支持<code>&lt;</code>操作符，2. <code>T</code>必须支持拷贝构造函数，为了<code>return</code></li></ul><p>下面是简单的模板使用实例：</p><pre><code class="language-c">::max(7, 8);          // 8::max(1.2, 1.5);      // 1.5::max("abc", "abcd"); // abcd</code></pre><p>当调用上者时，模板会自动实例化为：</p><pre><code>int max(int, int);double max(double, double);char const* max(char const*, char const*);</code></pre><h3 id="编译检查">编译检查</h3><p>模板的编译检查分为两个阶段（<code>Two-Phase Translation</code>）</p><ul><li>定义阶段</li><li>实例化阶段</li></ul><pre><code class="language-c">template &lt;typename T&gt;void foo(T t){    undeclared(); // 未定义函数，定义阶段报错    undeclared(t); // 引用了T，所以实例化阶段才报错}</code></pre><h3 id="参数推导">参数推导</h3><p>编译器会根据传入参数的类型，自动推导 <code>T</code> 的取值</p><ul><li>若引用传递：不允许类型转化</li><li>若值传递：只允许退化（<code>decay</code>），<code>const</code>和<code>volatile</code>会被忽略。引用会被转化成引用的类型。</li></ul><pre><code class="language-c">int const c = 42;int i = 1;::max(i, c); // OK: (int, int)::max(c, c); // OK: (int, int)int&amp; ir = i;::max(i, ir); // OK: (int, int)int arr[4];::max(&amp;i, arr); // OK: (int*, int*)</code></pre><h3 id="多参数">多参数</h3><p>模板允许定义多组不同的参数，以如下函数示例，其<strong>返回值的类型是不确定的</strong>：</p><pre><code class="language-c">template&lt;typename T1, typename T2&gt;T1 max (T1 a, T2 b){    return b &lt; a ? a : b;}</code></pre><ul><li><font color="#ef6d3b"><strong>返回类型推断</strong></font></li></ul><p>从<code>C++14</code>开始，允许使用 <code>auto</code> 声明函数的返回值，即让编译器自己决定。</p><pre><code class="language-c">template&lt;typename T1, typename T2&gt;auto max (T1 a, T2 b){    return b &lt; a ? a : b;}</code></pre><p>在<code>C++11</code>中，<code>auto</code>必须配合 <code>trailing return type</code> 使用，否则编译报错如下：</p><div class="admonition error"><p class="admonition-title">error: 'xxx' function uses 'auto' type specifier without trailing return type</p></div><pre><code class="language-c">template&lt;typename T1, typename T2&gt;auto max (T1 a, T2 b) -&gt; decltype(b&lt;a?a:b);</code></pre><ul><li><font color="#ef6d3b"><strong>类型萃取</strong></font></li></ul><pre><code class="language-c">#include &lt;type_traits&gt;template&lt;typename T1, typename T2&gt;std::common_type_t&lt;T1,T2&gt; max (T1 a, T2 b)</code></pre><div class="admonition note"><p class="admonition-title">Trick: C++如何获取变量x的类型?</p><ul><li><code>#include &lt;typeinfo&gt;</code></li><li><code>typeid(x).name()</code></li></ul></div><h2 id="Class-Templates">Class Templates</h2><h3 id="模板特化">模板特化</h3><ul><li>这篇中文资料说得通俗易懂：<a href="https://sg-first.gitbooks.io/cpp-template-tutorial/content/jie_te_hua_yu_pian_te_hua.html"><em><strong>深入理解特化与偏特化</strong></em></a></li><li>源码 推荐阅读： <a href="#%E2%AD%90type-traits"><em><strong>type_traits</strong></em></a></li></ul><p>模板特化的作用是，<strong>针对模板的参数类型，从而定义不同的实现</strong>。<br><font color="#ef6d3b"><strong>只要你教得好，它可以 “见人说人话，见鬼说鬼话”</strong></font><br>（有点类似 函数重载 和 虚函数继承 的思想）</p><p>模板特化实现思路是：</p><ul><li>先定义基本模板（能说话）</li><li>再针对每种参数实现特例（能见人下菜碟）</li></ul><p>下面仿照 <code>Python</code> 实现 <code>C++</code> 的 <code>type</code> 函数:</p><pre><code class="language-c">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;template&lt;typename T&gt;class TypeId{public:    static constexpr char const* type = "NULL";    TypeId(T t) {}};template&lt;&gt;class TypeId&lt;int&gt;{public:    static constexpr char const* type = "INT";    TypeId(int t) {}};template&lt;&gt;class TypeId&lt;std::string&gt;{public:    static constexpr char const* type = "STRING";    TypeId(std::string t) {}};int main(){    ::cout &lt;&lt; TypeId(1).type &lt;&lt; "\n";                   // INT    ::cout &lt;&lt; TypeId(std::string("abc")).type &lt;&lt; "\n";  // STRING    return 1;}</code></pre><h3 id="模板特化-规则">模板特化 规则</h3><p>模板特化 符合 函数重载 的两个条件之一：</p><ul><li>参数数量相同、类型不同</li><li>参数数量不同（<strong>特化只能少于等于</strong>）</li></ul><p>否则出现报错：</p><div class="admonition error"><p class="admonition-title">error: too many template arguments for class template xxx</p></div><p>示例如下：</p><pre><code class="language-c">template &lt;typename T, typename U&gt; struct X            ;    // 0 // 原型有两个类型参数// 所以下面的这些偏特化的实参列表// 也需要两个类型参数对应template &lt;typename T&gt;             struct X&lt;T,  T  &gt; {};    // 1template &lt;typename T&gt;             struct X&lt;T*, T  &gt; {};    // 2template &lt;typename T&gt;             struct X&lt;T,  T* &gt; {};    // 3template &lt;typename U&gt;             struct X&lt;U,  int&gt; {};    // 4template &lt;typename U&gt;             struct X&lt;U*, int&gt; {};    // 5template &lt;typename U, typename T&gt; struct X&lt;U*, T* &gt; {};    // 6template &lt;typename U, typename T&gt; struct X&lt;U,  T* &gt; {};    // 7template &lt;typename U, typename T&gt; struct X&lt;U,  T, T &gt; {};  // Error</code></pre><h3 id="模板特化-代码示例">模板特化 代码示例</h3><ul><li><a href="/code/refl-sum.cpp"><em><strong>refl-sum.cpp</strong></em></a></li><li><a href="/code/refl-factorial.cpp"><em><strong>refl-factorial.cpp</strong></em></a></li></ul><h2 id="std">std</h2><h3 id="⭐std-max"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.9.2/libstdc++/api/a01226_source.html">⭐std::max</a></h3><ul><li><code>_GLIBCXX14_CONSTEXPR</code> 在 <code>C++14</code> 会被替换为 <code>constexpr</code></li><li>实际可以展开为：<code>constexpr inline const _Tp&amp; max(const _Tp&amp; __a, const _Tp&amp; __b)</code><ul><li><code>constexpr</code>无实质作用，重点是参数使用 <code>const &amp;</code></li></ul></li></ul><pre><code class="language-c">  template&lt;typename _Tp&gt;    _GLIBCXX14_CONSTEXPR    inline const _Tp&amp;    max(const _Tp&amp; __a, const _Tp&amp; __b)    {      // concept requirements      __glibcxx_function_requires(_LessThanComparableConcept&lt;_Tp&gt;)      //return  __a &lt; __b ? __b : __a;      if (__a &lt; __b)return __b;      return __a;    }</code></pre><!-- ### [⭐std::stack](https://gcc.gnu.org/onlinedocs/gcc-4.8.3/libstdc++/api/a01566_source.html) --><h3 id="⭐std-pair"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.9.2/libstdc++/api/a01240_source.html">⭐std::pair</a></h3><ul><li><a href="https://en.cppreference.com/w/cpp/utility/pair/pair"><em><strong>[cppreference] std::pair</strong></em></a></li><li><a href="https://stackoverflow.com/a/9270585/16823597"><em><strong>[stackoverflow] What is the purpose of std::make_pair vs the constructor of std::pair?</strong></em></a><ul><li>c++14及之前，<code>std::pair</code>需要显式指定类型，<code>std::make_pair</code>不需要</li></ul></li></ul><pre><code class="language-c"> template&lt;typename _T1, typename _T2&gt;    struct pair    : private __pair_base&lt;_T1, _T2&gt;    {      typedef _T1 first_type;    ///&lt; The type of the `first` member      typedef _T2 second_type;   ///&lt; The type of the `second` member      _T1 first;                 ///&lt; The first member      _T2 second;                ///&lt; The second member      _GLIBCXX_CONSTEXPR pair()      : first(), second() { }      // ...    }</code></pre><h3 id="⭐type-traits"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.7.4/libstdc++/api/a01417_source.html">⭐type_traits</a></h3><ul><li>以 <code>is_integral</code> 为例，判断是否为整型</li></ul><pre><code class="language-c">  template&lt;typename _Tp&gt;    struct is_integral    : public __is_integral_helper&lt;__remove_cv_t&lt;_Tp&gt;&gt;::type    { };</code></pre><ul><li><code>__is_integral_helper</code> 是一个标准的模板特化，<strong>非常简单</strong>！</li></ul><pre><code class="language-c">template&lt;typename&gt;    struct __is_integral_helper    : public false_type { };  template&lt;&gt;    struct __is_integral_helper&lt;int&gt;    : public true_type { };  template&lt;&gt;    struct __is_integral_helper&lt;char&gt;    : public true_type { };  // ...</code></pre><ul><li><code>true_type</code> 相关定义如下，其<code>value</code>变量就是一个bool类型的 <code>true</code></li></ul><pre><code class="language-c">  /// integral_constant  template&lt;typename _Tp, _Tp __v&gt;    struct integral_constant    {      static constexpr _Tp                  value = __v;      typedef _Tp                           value_type;      typedef integral_constant&lt;_Tp, __v&gt;   type;      constexpr operator value_type() const noexcept { return value; }      // ...    };  template&lt;typename _Tp, _Tp __v&gt;    constexpr _Tp integral_constant&lt;_Tp, __v&gt;::value;  /// The type used as a compile-time boolean with true value.  typedef integral_constant&lt;bool, true&gt;     true_type;  /// The type used as a compile-time boolean with false value.  typedef integral_constant&lt;bool, false&gt;    false_type;</code></pre><h2 id="反射">反射</h2><p>先看看什么是 <a href="https://en.wikipedia.org/wiki/Reflective_programming"><em><strong>reflection</strong></em></a>:</p><blockquote><p><em>reflection is the ability of a process to examine, introspect, and modify its own structure and behavior.</em></p></blockquote><ul><li>通俗解释，反射就是从一个对象(<code>object</code>)，能够反推其类型、成员和方法</li><li>以<code>Python</code>为例，<code>getattr</code> 就是经典的反射功能</li></ul><div class="admonition warning"><p class="admonition-title">为什么cpp没有反射?</p><ul><li>反射会导致编译后文件过大</li><li>cpp很少用到元编程（相对于C#)</li><li>cpp有模板，足够应付大部分需求...</li></ul></div><h2 id="阅读材料">阅读材料</h2><ul><li><p><a href="http://110.42.228.178/pdf/CPP_Templates_2nd.pdf">CPP-Templates-2nd 英文</a></p><ul><li><a href="https://github.com/wuye9036/CppTemplateTutorial">CPP-Templates-2nd 中文版翻译</a></li><li><a href="https://github.com/r00tk1ts/cpp-templates-2nd">cpp-templates-2nd 中文版翻译</a></li></ul></li><li><p><a href="https://github.com/wuye9036/CppTemplateTutorial">C++ Template 进阶指南</a></p></li><li><p><a href="https://veselink1.github.io/blog/cpp/metaprogramming/2019/07/13/refl-cpp-deep-dive.html">refl-cpp</a></p></li><li><p><a href="https://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/">What Does Haskell Have to Do with C++?</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++模板、meta-programming&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>日志：2023年8月</title>
    <link href="http://luhao.wiki/posts/2023/8/"/>
    <id>http://luhao.wiki/posts/2023/8/</id>
    <published>2023-07-31T16:35:13.000Z</published>
    <updated>2023-09-25T08:56:53.438Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="088c707709b995861e4e58c94a61b527368d8a83cfc58edb93edc304acbc9c56"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【vscode】vim定制化插件</title>
    <link href="http://luhao.wiki/posts/vscode-vim/"/>
    <id>http://luhao.wiki/posts/vscode-vim/</id>
    <published>2023-07-23T12:04:39.000Z</published>
    <updated>2023-07-29T18:41:03.599Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a> 是仿照vim的vscode插件</li><li>本文在其基础上添加一些额外的个性化功能</li></ul></div><h3 id="VSCodeVim">VSCodeVim</h3><p>vscode vim主流插件有两款，分别是:</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a>：仿vim的插件，功能不全</li><li><a href="https://github.com/vscode-neovim/vscode-neovim">VSCode Neovim</a>：基于Neovim，功能较全，但依赖nvim环境且配置复杂</li></ul><p>笔者一直使用前者，因此本文全部围绕 VSCodeVim展开。</p><h3 id="缺陷-😞">缺陷 😞</h3><p>VSCodeVim Github 拥有 1.5k 未处理的 Issues，作者的维护迭代速度非常慢，因此有很多缺陷和功能不足之处：</p><ul><li>不支持 vimscript function</li><li>不支持 vim bash</li><li><font color="#FF1E10"><strong>【bug】</strong></font>经常Esc失效，弹窗报错 <code>vim.Escape is undefined</code>… 需要重装插件</li></ul><h3 id="亮点-🎉">亮点 🎉</h3><p>打开 <code>"vim.statusBarColorControl": true</code>，可以使底部 <code>statusBar</code> 跟随 vim模式 而改变颜色。<br>本文希望进而改变 Cursor 和 当前行 的颜色、高亮显示，并支持 config 配置，效果图如下：</p><p><img src="/images/vim-mode-demo.png" alt=""></p><h3 id="改进-💡">改进 💡</h3><ul><li><p><strong>支持配置 StatusBar, Highlight 等颜色配置</strong></p></li><li><p><strong>支持区分 Normal, Insert, Visual 三种模式的颜色</strong></p></li><li><p>下载链接:<br><a href="https://github.com/593413198/Vim/releases/tag/vim-mode-1.0">https://github.com/593413198/Vim/releases/tag/vim-mode-1.0</a></p></li><li><p>配置文件:</p></li></ul><pre><code>    "vim.statusBarColorControl": true,    "vim.alpha": "80",    "vim.statusBarColors.visual": "#005f5f",    "vim.statusBarColors.insert": "#5f0000",</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VSCodeVim/Vim&quot;&gt;VSCodeVim&lt;/a&gt; 是仿照vim的vsc</summary>
      
    
    
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/"/>
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/VSCode/"/>
    
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>随手记</title>
    <link href="http://luhao.wiki/posts/idea/"/>
    <id>http://luhao.wiki/posts/idea/</id>
    <published>2023-07-21T19:15:33.000Z</published>
    <updated>2023-10-04T19:11:49.068Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0c5c25ccc3b1d155ad6ea1bcb79024d41de2d107cc1107c8a51186a23ed763b4">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475debb79baf718116b8398ebb7a36965f5712db04a990a04196bf7d89b9188d2f5969b089300c199c887ad4490953d1810357cd375ac06e732d356d4ec27b642aa2d46c8fdf198d48a4b9620936f8c18efa99cd53c0e6c5befbd6da9ebb0e8d473ba88daf9814bf097589053470cd244c49759b29258898ae147d3b92406541ecc1426781b7f965d69488f8227468d25ace43c6b69c8a19f97354453e8ff96435fa7c142eabaa7418866597b071d73575a4fa98f09916a3b6256959c82764411afd8c8baf90fb4965fdfacbf4695b2488acf5d7f161a49b796a0b1b992232c56c8393b9705588b441acf55138be81fe973cf0e644444f60301071e149e7788696fb98684774596c09a87b8d44ff780e78e5a657a2a5580c8749587dc7d65ae05a8cb2594174783fd8fa497d8cc4a84947227afe8329650281ddb4595068235ed79e470b4868c26c2713685a5a93c0f1280e53b3df1720e4da8e8a09f8a6c99c3921a4b6850c328a6dc36e2202e0b4f1be867149ef931cb38587d704e6c911e58a15f05eab1e8cc352fd6424983c5800bf4f3d49dded1f663f23d4913e49064ba3cf91499fb213e96ac0af65deafd2c9fabc6e4e36b2dc5f38aaa95de286bcc604f0fe11b2f0bb8fcf181906004cd02cea773816c2f37a108e5bdf894e0d8012a39ba8b2ae6b924b924f6cf7384324e220677c36cbc43355060db7d4353fc4d2cf1e0f870385842ec30394027ac67562af4526e5a862983fcc5343ff658dd75ac60bf343a35df981950c50299447033daf22310f580432dd96559a8a198effa21454f024111215c9584bb1f2ce51ad7b39851bdc55c9adcbd4fa77d824d22167066cb7ad4f4ccd8fc8eac382e7f4eaa6436bf7cb8ee2b9c86bc7e2a6d318576055b79b6cfbc159ef03b44d59c10724d75f9869f93579be0f41be9412bae43c70d983b55a89660e48ba54240a3d1445b2aebca2752304a24161fedc49f17d991078ecc7b6d4864ecf742e1cd4e8d157ba47adf98e1ec449086362f097efcfe17ce562bdf7c5cc56733334d6f4b5b625b796230f58c7a9f1cda72376df7f986703ece3432b4a61b545e92dc888cf2a624961fb5a79ea69d4a73ae47a526bf867c6590695f393674b676152e38088676fdcd056be934930c4ef734512e90ae881e80e1d1ef962835704827aa85aeb62251707e90f0d8fcadeedc0c29abf6920ff959de86f14803b11c996289ea189d3f68cb9fa3be352f64b3e55649579438eb783d2f70f77997807e47094fd69a417bfc9431d19c843f74a8242599afd07f83fed5d8706cd44e33526ee1d1322853287d417c59aa62f14f89c0eb720d295d69054be38348ed1fc24e73345de69509daf98255a0c0d4ea3e967999cf53cf038c92ecb79e1e4a9f06fa8f600343839101e1c5dc1620e832ef1e0898898ae22727614645bd30fa7b987ab43cff16ff4d0a9053c0c4d7cd87c7191ad4c4dc3ca5a31a238292eabdea0e394959c378acc8aba059748f6ddada7efe8708b357e6b9b697556abf8b31523350af8a5487af0f457f2ce07e0cb25ee98bb758c359caf69a403993dafd0ab3760742759e114b3cf185e16559dca6fa67b5227d19e231078bc9b8d6f5af1de393abf5af8a3e9dfd4bff946608c0a3cc24e1360fc36e4af099c23b74bf0cf814384d79793dcbf658738314beb3421de4872867d68d45ffb6ea2a480d348d61d8180e2e6dd9f5b1302c6d71259d6d289a996dfd821329c365f66fa6fc412053481b4e0fce112e1512560f78b01a86332f0a8ca3ed32f89446a0dc2e0e315748bfad11ef53a7929da0f8cc7aefcd3ce9b25cbdf6042c795f8cfd9e8139436982f49dcbf76e8129707e743177f629b14e3c17ae6d2773315b267889735b70bbf1b6210ea3cf34f16cbe51e5c416adf52542e3c6b8ee1c37cf50bae1c6c831ec5d7b468cc8d3dbde615b3dacf79b70f7b3f12cb81c5f03caec57b1753a167389025c621c8ba684efa28af26fdde0cf2c845012fea0d28599054de052c2aa083f3a53b6b879863d6ebd770a7fd0ce776d181608f7a6154bd83d21171ba14b5ce589a1c0175c72f7faad0ce3a2f25b1c0f7b6f40d7031639d42e6a7dad316b3348b19d21575a21651291f76c34b1100b966602689e8eff43ed852221005af04e6a7219fdbf8215508f53b8810069be883565b9f160b119a9288d9bb1d6917aa588367f9f2c6903c2edb41e9d2076a14c7348aa9aa22e4d6ed89848a51256cff9f3b79e74949626d3b3a7241c3b7cfbdcd986c0bf04bb91488bab3efbfff476a1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【表达技巧】跟罗永浩学演讲</title>
    <link href="http://luhao.wiki/posts/talk/"/>
    <id>http://luhao.wiki/posts/talk/</id>
    <published>2023-07-09T16:52:35.000Z</published>
    <updated>2023-08-31T02:26:35.047Z</updated>
    
    <content type="html"><![CDATA[<p><code>罗永浩15堂演讲私教课</code>学习总结<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>B站视频：<a href="https://www.bilibili.com/video/BV1PP411T7fv">【演讲】罗永浩15堂演讲私教课</a></li><li>知乎：<a href="https://zhuanlan.zhihu.com/p/619973080">【学习笔记】罗永浩演讲私教课</a></li></ul></div><h2 id="前言">前言</h2><p>开这篇是因为近期，有一个在公司内部分享的计划。<br>因为不是技术类型的讲座，技巧因素占比就会很低（而技术分享更注重将东西解释清楚）。所以萌生学习这类演讲 + 表达技巧的念头。<br>认识罗永浩，最初是 6个亿 的负债梗，更深入的是在 脱口秀大会 作为嘉宾时期的发言，对其有几个认识：</p><ul><li><p><strong>听感</strong>：表达清晰连贯，但嗓音条件恶劣（据本人调侃是老太监音色）</p></li><li><p><strong>逻辑</strong>：知识涉猎广泛，且临场反应迅速（后者是幽默感 + 经验累积）</p></li><li><p><strong>内核</strong>：善于制造一句<strong>核心话题</strong>，并反复洗脑callback（如脱口秀的“大局观”，如演讲课的“因为大脑就是被这样设计的”…）</p></li></ul><h3 id="关于这个教程">关于这个教程</h3><p>基于罗老师 <strong>“演讲都是有套路和技巧”</strong> 的观点，将其演讲课的套路总结如下三点：</p><ul><li><p><strong>为什么要这样?（赢得认同）</strong></p></li><li><p><strong>如何达到这样?（方法论）</strong></p></li><li><p><strong>举例、类比论证（深入人心）</strong></p></li></ul><h2 id="十三个要素">十三个要素</h2><p>这些技巧比较多，难以短时间记忆和掌握，因此先记录一下核心观念，剩下的在实践中掌握和理解。</p><div class="markmap-container" style="height:350px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;让观众听下去&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<strong>讲笑话</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;吹牛逼&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;装逼&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;让观众容易理解&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;讲故事&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<strong>作类比</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<strong>三段式</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;提问题&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;具有说服力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;有逻辑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;有数据&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;让观众产生共鸣&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;有激情&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;有情感&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<strong>升华境界</strong>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;核心&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<strong>有画面</strong>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h3 id="精华摘要">精华摘要</h3><ul><li><p>开始一场演讲的最好方式，就是<font color="#ef6d3b"><strong>讲笑话或讲故事</strong></font>。（千万不能讲道理）</p></li><li><p>对于晦涩或陌生的事物，要<font color="#ef6d3b"><strong>巧用类比</strong></font>，如 谈判就是找交集。</p></li><li><p>开始主体内容前，用<font color="#ef6d3b"><strong>三段式</strong></font>介绍提纲。（思维导图）</p></li><li><p>讲故事的三要素：冲突（吸引注意力） + 行动（故事的发展） + 结局（表达的内涵）</p></li></ul><h2 id="其他技巧">其他技巧</h2><h3 id="1-用坐标系描述事物">1. 用坐标系描述事物</h3><p>举例，如何看待 <strong>“量化交易”</strong>?</p><p>首先，一个交易策略的评判标准有两个维度，分别是：</p><ul><li>Interpret：（金融底层的）解释能力</li><li>Predict：（金融市场的）预测能力</li></ul><p>因此，引入一个二维坐标系，甚至可以类比不同事物在其分布，例如：</p><ul><li>进化论：能解释为什么猿猴进化到人类，但无法预测人类未来进化的趋势</li><li>地心说：能预测太阳东升西落，但底层科学原理是错的</li></ul><p><img src="/images/interpret-predict.png" alt=""></p><p>最后，根据 量化交易 预测能力强，但无法自圆其说的特点，可以将它放在类似进化论的位置。</p><p><strong>该方法论可以让听众直观清晰地了解事物的多维度特征。</strong></p><hr><h3 id="2-结尾升华主题">2. 结尾升华主题</h3><ul><li><p>几天过后，观众未必会记得你讲了什么，但他们或许能从情感上认同你。</p></li><li><p>这很大程度上，来源于结尾的几句升华。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;罗永浩15堂演讲私教课&lt;/code&gt;学习总结&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
