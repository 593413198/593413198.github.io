<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luhao&#39;s Blog</title>
  
  <subtitle>luhao wiki</subtitle>
  <link href="http://luhao.wiki/atom.xml" rel="self"/>
  
  <link href="http://luhao.wiki/"/>
  <updated>2023-07-29T20:01:51.520Z</updated>
  <id>http://luhao.wiki/</id>
  
  <author>
    <name>Luhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【工具】思维导图</title>
    <link href="http://luhao.wiki/posts/1F13H6K/"/>
    <id>http://luhao.wiki/posts/1F13H6K/</id>
    <published>2023-07-29T19:27:53.000Z</published>
    <updated>2023-07-29T20:01:51.520Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>学习新的工具，思维导图，这是以前不曾习惯或接触的</li><li>市面常见的 <code>mind map</code> 软件对比</li><li>一些技巧、使用习惯、方法论</li><li><font color="#FF1E10"><strong>TODO</strong></font>： 设计 “搬运失败” 处理方案的导图</li><li><font color="#1A9BFF"><strong>可选</strong></font>：ChatGPT + MindMap 的工作流</li></ul></div><h3 id=""></h3><p>先限定在3款软件:</p><ul><li><a href="https://whimsical.com/">https://whimsical.com/</a> : 学习成本较高</li><li>XMind：没有网页版不能接受</li><li>GitMind</li></ul><h3 id="todo">todo</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/267141019">知乎：横向对比22款思维导图工具</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;学习新的工具，思维导图，这是以前不曾习惯或接触的&lt;/li&gt;
&lt;li&gt;市面常见的 &lt;code&gt;mind map&lt;/code&gt; 软件对比&lt;</summary>
      
    
    
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="工具" scheme="http://luhao.wiki/categories/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>【vscode】vim定制化插件</title>
    <link href="http://luhao.wiki/posts/vscode-vim/"/>
    <id>http://luhao.wiki/posts/vscode-vim/</id>
    <published>2023-07-23T12:04:39.000Z</published>
    <updated>2023-07-29T18:41:03.599Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a> 是仿照vim的vscode插件</li><li>本文在其基础上添加一些额外的个性化功能</li></ul></div><h3 id="VSCodeVim">VSCodeVim</h3><p>vscode vim主流插件有两款，分别是:</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a>：仿vim的插件，功能不全</li><li><a href="https://github.com/vscode-neovim/vscode-neovim">VSCode Neovim</a>：基于Neovim，功能较全，但依赖nvim环境且配置复杂</li></ul><p>笔者一直使用前者，因此本文全部围绕 VSCodeVim展开。</p><h3 id="缺陷-😞">缺陷 😞</h3><p>VSCodeVim Github 拥有 1.5k 未处理的 Issues，作者的维护迭代速度非常慢，因此有很多缺陷和功能不足之处：</p><ul><li>不支持 vimscript function</li><li>不支持 vim bash</li><li><font color="#FF1E10"><strong>【bug】</strong></font>经常Esc失效，弹窗报错 <code>vim.Escape is undefined</code>… 需要重装插件</li></ul><h3 id="亮点-🎉">亮点 🎉</h3><p>打开 <code>"vim.statusBarColorControl": true</code>，可以使底部 <code>statusBar</code> 跟随 vim模式 而改变颜色。<br>本文希望进而改变 Cursor 和 当前行 的颜色、高亮显示，并支持 config 配置，效果图如下：</p><p><img src="/images/vim-mode-demo.png" alt=""></p><h3 id="改进-💡">改进 💡</h3><ul><li><p><strong>支持配置 StatusBar, Highlight 等颜色配置</strong></p></li><li><p><strong>支持区分 Normal, Insert, Visual 三种模式的颜色</strong></p></li><li><p>下载链接:<br><a href="https://github.com/593413198/Vim/releases/tag/vim-mode-1.0">https://github.com/593413198/Vim/releases/tag/vim-mode-1.0</a></p></li><li><p>配置文件:</p></li></ul><pre><code>    "vim.statusBarColorControl": true,    "vim.alpha": "80",    "vim.statusBarColors.visual": "#005f5f",    "vim.statusBarColors.insert": "#5f0000",</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VSCodeVim/Vim&quot;&gt;VSCodeVim&lt;/a&gt; 是仿照vim的vsc</summary>
      
    
    
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/"/>
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/VSCode/"/>
    
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>随手记</title>
    <link href="http://luhao.wiki/posts/idea/"/>
    <id>http://luhao.wiki/posts/idea/</id>
    <published>2023-07-21T19:15:33.000Z</published>
    <updated>2023-07-29T18:55:31.748Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="829e3994563cc0e676ad947d1c7d318b95231083dcfc55782886e1e864045e5d">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475debb79baf718116b8398ebb7a36965f5712db04a990a04196bf7d89b9188d2f5969b089300c199c887ad4490953d1810357cd375ac06e732d356d4ec27b642aa2d46c8fdf198d48a4b9620936f8c18efa99cd53c0e6c5befbd6da9ebb0e8d473ba88daf9814bf097589053470cd244c49759b29258898ae147d3b92406541ecc1426781b7f965d69488f8227468d25ace43c6b69c8a19f97354453e8ff96435fa7c142eabaa7418866597b071d73575a4fa98f09916a3b6256959c82764411afd8c8baf90fb4965fdfacbf4695b2488acf5d7f161a49b796a0b1b992232c56c8393b9705588b441acf55138be81fe973cfb15be2e79a6f99afa38481729479c286ec6a02cc951fd7f863308221e3409f3e1974680d2f02c063980d44af8e06e16848b8bd660fed16d9b5d1445f1619d498731bec635a5437f3f2dd0b389fbb52905c7c24ebbf54885173e06c7c5b2e3915335e700578626ce7eac45b801a88360b8431a63f02f909f337c51c8aca522afdfb179a032059d1b0c60d82a39c9101894591c99a69d4788c0964ffdf8c8bd340d4f4d0c40c91f0d7b04f33253a142ee29a844e5b7eca56476ebd534d90b54953c9f26a98bfd690dc70f043a224f68814d251f07166ef0cdd195c05dc74eb39f54b5345f809b762a7889cd161f77be58e0d1a2d473e983209035a731b88905105060112483e9324a6df5104a9d6be63f87da391c0963d4f09a7cab737a5ca573d7cc00e96996d16164c26f39cad48b191074aafceccb1b3d53728962bd363fbc5627a401d1e619cec7e88b364d74eb44372b771b3298a63f2ee75e774d3e77dfbd897be6acdde70394ef7580df602e0a38bce10cad68512761784e406a8013db99dd0603f12f71922b4c0096b6300d7650275d8ecb2786e40c1187ee12fd4fb1775bda1356f771b8b5a57a0bed3378dfad7dc5baad11f5881526cb7ac9ab7611d612d3c29b056a9b9bf0de347f042f4450adfc4ea792893a9036ac653c750ef496314e75ab9bba2d0cc6fbb432a6d0f3660175d4b2ad9eeec969249f0bbbbda47a5f4f7dce869e349d36873f7467f4f5ec0aa44ad792b07401cc88a8dc033e02944369446cb5b05697fe8bf6bbf65a9d346bff04820224139dfd1a1cf85deca75e794f0b832b49512771efbf8f1a0eef19813c8e81a9c512407b82da2a92ce4ff5c7498c4616570b114c4726cf5e093b6db53b0caae6b68f5c41bafd3160eb97aa989ea35ceb03a147a590f98ce818c50346ca8f47237f31af4a0cfeb0791050d948fbca28ef55ded16209f8e41edb8a9842d0ef9827896b599286592e161b849811ca388e6bf80f06961d2ea9f358183636ff61f5eec59b8ac1545fe823aa00d11178e27670035ef3bd2b9d8f471ca1d586eec438333b06b5fc4108afbf9f7944b8e3d322f9080ca0b7257758b2afa40564b797d1116212f26b3d8202cdafaf868f9f055fd70d65da9549f8fd1ea96af5022393ca3ed02709a46abce0b6de18774c422658a8bb8b06d93aee00781d4d0b4d18c3e096670372c9470f7ab97fb5a9e9f164a43cd3397f90706ddc8fb2c545cdfa56474cba8c639d2c85ca3f55e4900b84c6a7c251812b1bc5321bd5a655664281ca4abb794becc980f5620e4c4a73d1356b9cda7407eef7056792ae69ebdc9e9bd6ad8849057181f8a134d5441aed823358b5173bc9304bf73ec19529ca1001015a71857f9c405152d8a1b626845858f4e0fa8fa15a8512daa134434a4d777f3dc043f537cfadf46ba39f50e78706578b1b5f4adfd0eb4bdaffb3a64344bb8cd0bbbd591d83e64e41c4eca9e615d5a60697fe09d0db97c0da70bd14a8cb795240fb04f2039197fa39866480857c79554a9d379992d903cc41e99e27f6a663984de642c8bc49a9028f482b729147cac581a3714fc512afbc0c61b6c84422f4519fba368e43e8848f02ce743f139e39211c5f68886b54e2b2369d87898919d51495090c09241ca25abfe42c0ccfac144d916dac562abf7957d00ee1fc9d1a0c4bc65bf237ad157d036298d2696d5bbebb054a980517be088681e3ff7ead22b754f1e42b66127aea8eb7e153aaf963469cfe797f73949bd569025a3359fc5d03e459549a5159bb3bc482bcadb6648012f29342e36021417db9ff3366eb2d5c69ad221a9339998b17abdd26488328997352dce0304eea29e2a116183dcbc0801a5089a52d64ff4f8a9ef53b485740c54d6a28b0e9c58f55d1d5e6459cde56217b95860c7da66fd152959b7b1e937da28d9eb2aae79cb5dff6facb4eb5bb64d2d3b963eb6f770b1dc4d19e2ab3f0fc2a7cc8aecc03b362238fb8fb24a830260507a1981167fd8ca8641ecf158cd970325ac52e14e72d6f5b02976361e281d3693cbc1f73cbc80ead7a08c3c9ca07c7cab3e5648298816bc31b547d19a32401ad778148f5c5e679aa8295d23fef194cae097ebb21d0d2f3d30a5db442ed20b078347d9490d91974ea84c0a63d7492b621b9d7bebec15758082f89e3da85664c1ba8c4fa38abe864d54a9276872229c492c9a0dfc7e6b682abfcdab31399c36d1986ceffd382e0e833e4728a5f3aed5e69a44f4e1446a92f5d298f3c97520bf8cbd6b90d683d330970f9599377e50c40a44007699d0417f0362f866790fdca47155e16e5ecb113e9d93aa97103c052431cc798103323964d23b36e67fa4cb42a94de6e748547f31261ae24610a7dbeeb17b6a5a03c242d6b22565a097a59774d541604865da0f4a30d41e8b90f129c7a3eb7237c27fde5f9cc82a6ed953c675e5437e03b33f73a9ca63e79c3a3a48cb79c22784faadfa2204f8bdbd99c098d7620441cf3f49a96709654e42eb3f659e3dccc4ebcfb5618f92e12f43d22fbfabbc4763ffc46567455d3a1e1513d0d22e7dfe9ab25a5ec2d8250134643a4d69d63d03ae4a357112711020aa2fb6a57f8ce7cb46be2ff027817a22c4c5a66d31e2e15163f88da8dbad3790b48c4fb765a643ff6d749d0bd3ccf626adf069c987959292094594ad2729db0ce3eb0d2887c42ddf20f08514f32b585337763b276df0b09eb3359a9d1dbaf44234da7feb74af3a7bf90993b819dad8d24cba08b630267d630542fc5dcaf2139639e08825dd2080a025041d8510678d19e156080f512b30e3b870af4365afa7ae6b0af2cddffaa86e8c21f0b3e8de175c598440e66a585bbdb83d2d0669167013bb3e33a8f7e6e347a9d7052bcf483b498711c1d6acc8f21befa08ed771092e6d48a05ce1033c1d5728e27b8ad41986bb2173b1a94f5043439f96938f7ac59bada61c4b946aeda5acd1ea06dd23f033ffab82235cd591e6041b557d5d9d7d3c9bc69d1429aff4527db599dc83bd8240e690488924054a8b3831ac30c68caefc05d0c1e3a9aa99e215b24f56b7cb9a3af399840f081b0cc3db4b4ed650ea6afe28b09fb1d2351e7ba9534a0715dd14856ea7180dc84b27d55ac36b74928a3611f1315622764c3410433dfe15ef348544bc1fbcd78dbfa6e59e9551b86dd949cb7f737482b512c81194f09702ffc43d6b75054a19746e244769893597bc6eb22d8e20567f5dda94cfb117e3d7145fccb535827cd95933a981b7c63395d61c0db1f135e5a20102c044280670fda676676685ce78dab2edfc28af63a2590c7d63458c7bef0c520ea4dc17b06cccb41b3502626670fbd3baf647702a49e8728f8c1b1d6e825b4a88c9cd3d1306bfaf8ba7fcb1625157fa1f8da3015935402ddaa8d054d10f9566d7d00a33aa00cff22d5deaa388e6174015fc882a04ef4778b61c4d540e108fcf51702705b4ea3b01b0f8435f38db8f2185f56979d80a1cad42d261267d98156ee5ab8119f26278cab2ecba8d02ae5e8439657384e93bb4dbeeb0ce127ae5ede7314c3ccd571a00484b8264ecdef0b05b6309411be096cd7a378ad40dd43262d556d29dd6a42fe4de8e5ff9ff76ff43aa289c12dba3c16d45ce793aecc5ea3f4adc8a0d17eaf973fe0225f37b09c6457fe1643bebd4f9824e92fe7ad5dce55f4a79a40d8c03933301883787f8e4a947da32e6175b3f95cb2990f118ab204040a35e18db5ba982caf8ed5b9a3b8f1a6edd65cb885ff810c0d63cbb8e91202f1d6851e8efd232d345cfc1d6f3f76732845b9ac96b60815d476169ee9a79c236b1ee35e7550ec2cbf35c8be29fae5db48f98cd8c6ac3f2ed73da6b6f620233325f169939923d370e766804a008a3e45fd50735542c929c8b38e7d1ee3243911f770b8d10e75483878ea1ac359ab6fc45fa7138e8a684f3b1e578afae063011f103b0b7581ae27dba618c3c77137ec2a0d1a10a6df8dfb87f83e83153aad0b45e6025bf577f3304d2efa29d9b9b7bd3b8bb820ad712db85515f958487dea7758d964f3dfbd896bae0f31b820c028d8675ee8c64a22b167843201f0bb7ff9dabe1d3c7df2f31a121cfb11994739aa6797428fff87d3c7ffc7149582425361e33c4fded5964ec5cdd8861e0322339236ef7e4c47a58281e9ba1d1630c358faca5a8d1c5eb38e9fd8aa77e4fdd8f7caf5b9e28fb8d361e5154fd72f2c11459182352ed546def8b33</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【表达技巧】跟罗永浩学演讲</title>
    <link href="http://luhao.wiki/posts/talk/"/>
    <id>http://luhao.wiki/posts/talk/</id>
    <published>2023-07-09T16:52:35.000Z</published>
    <updated>2023-07-29T19:10:45.289Z</updated>
    
    <content type="html"><![CDATA[<p><code>罗永浩15堂演讲私教课</code>学习总结<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>B站视频：<a href="https://www.bilibili.com/video/BV1PP411T7fv">【演讲】罗永浩15堂演讲私教课</a></li><li>知乎：<a href="https://zhuanlan.zhihu.com/p/619973080">【学习笔记】罗永浩演讲私教课</a></li></ul></div><h2 id="前言">前言</h2><p>开这篇是因为近期，有一个在公司内部分享的计划。因为不是技术类型的讲座，技巧因素占比就会更大（而技术分享更注重将东西解释清楚）。所以萌生学习这类演讲 + 表达技巧的念头。</p><p>认识罗永浩，最初是 6个亿 的负债梗，更深入的是在 脱口秀大会 作为嘉宾时期的发言，对其有几个认识：</p><ul><li><p><strong>听感</strong>：表达清晰连贯，但嗓音条件恶劣（据本人调侃是老太监音色）</p></li><li><p><strong>逻辑</strong>：知识涉猎广泛，临场反应迅捷（擅长幽默 + 自嘲）</p></li><li><p><strong>内核</strong>：善于制造一句<strong>核心话题</strong>，并反复洗脑callback（如脱口秀的“大局观”，如演讲课的“因为大脑就是被这样设计的”…）</p></li></ul><h3 id="关于这个教程">关于这个教程</h3><p>基于罗老师 <strong>“演讲都是有套路和技巧”</strong> 的观点，将其演讲课的套路总结如下三点：</p><ul><li><p><strong>为什么要这样?（赢得认同）</strong></p></li><li><p><strong>如何达到这样?（方法论）</strong></p></li><li><p><strong>类比论证（深入人心）</strong></p></li></ul><h2 id="十三个要素">十三个要素</h2><p>这些技巧比较多，难以短时间记忆和掌握，因此先记录一下核心观念，剩下的在实践中掌握和理解。</p><div class="markmap-container" style="height:350px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;让观众听下去&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<strong>讲笑话</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;吹牛逼&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;装逼&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;让观众容易理解&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;讲故事&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<strong>作类比</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<strong>三段式</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;提问题&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;具有说服力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;有逻辑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;有数据&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;让观众产生共鸣&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;有激情&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;有情感&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<strong>升华境界</strong>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;核心&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<strong>有画面</strong>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h3 id="精华摘要">精华摘要</h3><ul><li><p>开始一场演讲的最好方式，就是<font color="#ef6d3b"><strong>讲笑话或讲故事</strong></font>。（千万不能讲道理）</p></li><li><p>对于晦涩或陌生的事物，要<font color="#ef6d3b"><strong>巧用类比</strong></font>，如 谈判就是找交集。</p></li><li><p>开始主体内容前，用<font color="#ef6d3b"><strong>三段式</strong></font>介绍提纲。（思维导图）</p></li><li><p>讲故事的三要素：冲突（吸引注意力） + 行动（故事的发展） + 结局（表达的内涵）</p></li></ul><h2 id="其他技巧">其他技巧</h2><h3 id="1-用坐标系描述事物">1. 用坐标系描述事物</h3><p>举例，如何看待 <strong>“量化交易”</strong>?</p><p>首先，一个交易策略的评判标准有两个维度，分别是：</p><ul><li>Interpret：（金融底层的）解释能力</li><li>Predict：（金融市场的）预测能力</li></ul><p>因此，引入一个二维坐标系，甚至可以类比不同事物在其分布，例如：</p><ul><li>进化论：能解释为什么猿猴进化到人类，但无法预测人类未来进化的趋势</li><li>地心说：能预测太阳东升西落，但底层科学原理是错的</li></ul><p><img src="/images/interpret-predict.png" alt=""></p><p>最后，根据 量化交易 预测能力强，但无法自圆其说的特点，可以将它放在类似进化论的位置。</p><p><strong>该方法论可以让听众直观清晰地了解事物的多维度特征。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;罗永浩15堂演讲私教课&lt;/code&gt;学习总结&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="随笔" scheme="http://luhao.wiki/categories/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>【cpp】Memory</title>
    <link href="http://luhao.wiki/posts/memory/"/>
    <id>http://luhao.wiki/posts/memory/</id>
    <published>2023-07-04T17:01:35.000Z</published>
    <updated>2023-07-22T13:03:25.859Z</updated>
    
    <content type="html"><![CDATA[<p>C++的内存分配与管理<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>理论偏：<a href="/posts/virtual-memory/">【CSAPP】Virtual Memory</a></li><li>本篇结合 C/C++ 了解内存分配相关领域知识</li><li>ptmalloc，tcmalloc，jemalloc ...</li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;malloc / free&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;new / delete&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;system-call&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#brk-sbrk\&quot;>brk / sbrk</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#mmap\&quot;>mmap</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;c-malloc&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#ptmalloc\&quot;>ptmalloc（glibc）</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;tcmalloc（google）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;jemalloc（facebok）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;mimalloc（microsoft）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;c++&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;std::allocator&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="malloc-free">malloc/free</h2><ul><li>阅读文档：<a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li>使用的时候多查阅文档，注意 <code>malloc</code> 使用时要判断 <code>NULL</code> 避免内存分配失败</li></ul><pre><code class="language-c++">#include &lt;unistd.h&gt;void *malloc(size_t size);void *calloc( size_t num, size_t size );void *realloc( void *ptr, size_t new_size );</code></pre><ul><li>分配过程：↓</li><li>需要考虑字节对齐，注意被释放后的内存也可能重复利用，这也解释了为什么野指针的 <code>undefined behavior</code></li></ul><p><img src="/images/malloc-demo.png" alt=""></p><h2 id="new-delete">new/delete</h2><p><a href="/posts/virtual-memory/#u-class-black-mallco-free-u">malloc / free</a> 前面有介绍过。</p><p><strong>以 <code>A* a = new A</code>为例，通过 <a href="https://gcc.godbolt.org/">godbolt</a> 查看汇编代码，发现其有两段逻辑组成：</strong></p><ul><li>调用 <code>new operator</code></li><li>调用 <code>class's constructor</code></li></ul><pre><code class="language-asm">call    operator new(unsigned long)mov     rbx, raxmov     rdi, rbxcall    A::A() [complete object constructor]</code></pre><p><strong>相应的 <code>delete</code> 方法，也对应如下的两段逻辑：</strong></p><ul><li>调用 <code>class's destructor</code></li><li>调用 <code>delete operator</code></li></ul><p>下面重点展开对 <code>new / delete</code> 两个操作符的学习（推荐阅读 <a href="https://www.programiz.com/cpp-programming/operators">C++ Operators</a> 和 <a href="https://en.cppreference.com/w/cpp/language/operators">cppreference operator overloading</a>）</p><p><strong>先看 libc 的 <a href="https://codebrowser.dev/llvm/libcxx/src/new.cpp.html">源码实现</a>，可以看到是对 <code>malloc</code> 的一层封装。</strong><br>如果类自定义了 <code>new /delete</code>，则优先调用它们。</p><pre><code class="language-C++">void *operator new(std::size_t size) _THROW_BAD_ALLOC{    if (size == 0)        size = 1;    void* p;    while ((p = ::malloc(size)) == nullptr)    {        // If malloc fails and there is a new_handler,        // call it to try free up memory.        std::new_handler nh = std::get_new_handler();        if (nh)            nh();        else#ifndef _LIBCPP_HAS_NO_EXCEPTIONS            throw std::bad_alloc();#else            break;#endif    }    return p;}voidoperator delete(void* ptr) noexcept{    ::free(ptr);}</code></pre><h2 id="System-Call">System Call</h2><p>程序中的内存分配有三个层次，如下图。<br>最终调用的还是Linux/Windows中的操作系统API：如sbrk, mmap… 因此需要重点掌握这些系统调用。</p><p><img src="/images/memory-call.png" alt=""></p><h3 id="brk-sbrk">brk, sbrk</h3><blockquote><p><em>change data segment size</em></p></blockquote><p>参考阅读  <a href="https://www.cnblogs.com/sylar5/p/11508821.html">cnblog: brk 和 sbrk 区别</a></p><p>linux man 手册中描述两者的作用是改变 <code>data segment</code> 的结束地址。<br>通俗地理解就是，<code>brk</code>函数会重新设置 <code>heap</code> 的高位地址，而 <code>sbrk</code>函数会根据大小来调整 <code>heap</code> 的容量。</p><p>两个函数的定义如下：</p><pre><code class="language-C++"> #include &lt;unistd.h&gt;int brk(void *addr);void *sbrk(intptr_t increment);</code></pre><h3 id="mmap">mmap</h3><blockquote><p><em>map (or unmap) files or devices into memory</em></p></blockquote><pre><code class="language-C++">#include &lt;sys/mman.h&gt;void *mmap(void *addr, size_t length, int prot, int flags,            int fd, off_t offset);int munmap(void *addr, size_t length);</code></pre><h2 id="ptmalloc">ptmalloc</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++的内存分配与管理&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>日志：2023年7月</title>
    <link href="http://luhao.wiki/posts/2023/7/"/>
    <id>http://luhao.wiki/posts/2023/7/</id>
    <published>2023-06-30T16:23:22.000Z</published>
    <updated>2023-07-29T18:27:47.055Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8f395b833102fecbbc33fc317c18d094c173c84b66873f3eab423a5661573617"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Google评分卡💯及自评</title>
    <link href="http://luhao.wiki/posts/grade/"/>
    <id>http://luhao.wiki/posts/grade/</id>
    <published>2023-06-27T16:40:51.000Z</published>
    <updated>2023-07-25T17:45:26.463Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>Google将技术能力划分为 0~11 的等级</li><li>自我评估技术，判断下一步需要作出的努力</li></ul></div><table><thead><tr><th style="text-align:center">等级</th><th style="text-align:left">标准</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">You are unfamiliar with the subject area</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">一窍不通</td></tr><tr><td style="text-align:center">1</td><td style="text-align:left">You can read/understand the most fundamental aspects of the subject area</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">理解基本概念</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">Ability to implement small changes,understand basic principles and able to figure out additional details with minimal help</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">能够实现一些小改动，在别人帮助下钻研更多细节</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">Basic proficiency in a subject area without relying on help</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">基本掌握和熟练使用</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">You are comfortable with the subject area and all routine work on it</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">足够精通，足够应对所有日常工作</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">An even lower degree of reliance on reference materials. Deeper skills in a field or specific technology in the subject area.</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">深耕某个细分领域</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">Ability to develop large programs and systems from scratch</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">独立开发大型系统</td></tr><tr><td style="text-align:center">7,8,9,10</td><td style="text-align:left">略</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:left">↓ 基础要求</th><th style="text-align:center">google grade</th></tr></thead><tbody><tr><td style="text-align:left">熟悉数据结构与算法</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟练使用 C++11（及以上）</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">熟练使用 Python3 等脚本语言</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left">熟悉batch、Shell、Linux常见指令</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉MySQL等数据库的设计、优化</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">熟悉编译原理、编译优化</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉 git、code review 等</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉 vscode、sublime、vim 等IDE、Editor</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">熟悉 Jenkins、TeamCity 等 CI&amp;CD 平台</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉Linux内核，如进程管理、内存管理、文件系统等</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉网络协议和网络编程，熟悉websocket、HTTP、socket、TCP/IP等</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉主流框架, 如Flink，Elasticsearch，Kafka，Nginx，MySQL，Redis，Docker，K8s</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">↓ <strong>加分项</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">具备内存优化经验、熟悉linux内存分配</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉GPU使用，或有底层基础库（CUDA，mkl、openblas等）优化经验</td><td style="text-align:center">0.5</td></tr><tr><td style="text-align:left">良好的系统设计能力，能从 performance、reliability、availability 多个方面设计系统</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉机器学习平台相关工具，比如k8s，kubeflow，mlflow，automl等</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">有视频解码和渲染开发经验者优先</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">有存储系统、分布式系统等底层开发经验</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">数值计算相关经验，能够进行基本的数值误差分析，实现复杂或针对大量数据的数学函数，测试/调优浮点性能</td><td style="text-align:center">0</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Google将技术能力划分为 0~11 的等级&lt;/li&gt;
&lt;li&gt;自我评估技术，判断下一步需要作出的努力&lt;/li&gt;
&lt;/ul&gt;
&lt;/d</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
    <category term="vim" scheme="http://luhao.wiki/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>【网络】HTTP协议进阶</title>
    <link href="http://luhao.wiki/posts/http/2/"/>
    <id>http://luhao.wiki/posts/http/2/</id>
    <published>2023-06-26T12:51:27.000Z</published>
    <updated>2023-07-01T17:08:49.171Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE">专栏：透视HTTP协议</a> 墙裂推荐 ⭐</li><li><a href="/posts/http-1/">HTTP协议入门</a></li></ul></div><div class="markmap-container" style="height:500px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTTP数据编码&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#MIME-type\&quot;>MIME-type</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;&amp;quot;Accept&amp;quot;&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;&amp;quot;Content-Type&amp;quot;&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;HTTP大文件&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;数据压缩&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;chunked传输&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;HTTP连接&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;短连接&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;长连接&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#队首阻塞\&quot;>队首阻塞</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie\&quot;>Cookie</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie原理\&quot;>Cookie原理</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie生命周期\&quot;>Cookie生命周期</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie作用域\&quot;>Cookie作用域</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Cookie应用&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie应用：身份识别⭐\&quot;>身份识别</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie应用：广告追踪\&quot;>广告追踪</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP代理\&quot;>HTTP代理</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#代理字段\&quot;>代理字段</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#代理协议\&quot;>代理协议</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#负载均衡\&quot;>负载均衡</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;Cache&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#Cache：浏览器\&quot;>浏览器cache</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#Cache：服务器\&quot;>服务器cache</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;<a href=\&quot;#Chrome调试\&quot;>Chrome调试</a>&quot;}],&quot;p&quot;:{}}"></svg></div><h2 id="HTTP数据编码">HTTP数据编码</h2><p><font color="#FF1E10"><strong>todo</strong></font></p><h3 id="MIME-type">MIME-type</h3><p>使用svn更新的时候有一栏会标注 <code>Mime type</code>，可以观察到除了常见代码文件外，都是以 <code>application/octet-stream</code> 格式传输，它代表未知的二进制数据。</p><p><img src="/images/svn-mime-type.png" alt=""></p><h2 id="HTTP大文件">HTTP大文件</h2><p><font color="#FF1E10"><strong>todo</strong></font></p><h2 id="HTTP连接">HTTP连接</h2><p><a href="/posts/http-1/#TCP">前面说过</a>，HTTP协议 是运行在 TCP/IP协议 之上，因此每一次新的HTTP连接，都需要经过TCP协议的 <strong>“3次握手 &amp; 4次挥手”</strong>，这无形中降低了HTTP协议连接的代价。</p><p>因为 TCP位于传输层，HTTP位于应用层，所以可以用如下的类比来理解连接的代价：</p><ul><li>开关机：TCP连接</li><li>使用电脑办公：HTTP连接</li></ul><p>每次使用电脑办公，都需要打开电脑，在使用完毕后又需要关闭电脑。这就好比 <strong>HTTP 短连接</strong>。而更常规地做法是，保持电脑的始终开启，这样利于随时使用，这就好比 <strong>HTTP 长连接</strong>。</p><p><img src="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/assets/57b3d80234a1f1b8c538a376aa01d3b4.png" alt=""></p><h3 id="Connection字段">Connection字段</h3><p>当HTTP请求采取长连接时，在响应报文的 “Connection” 字段会标记为 <strong>keep-alive</strong>，此时服务器不会在短时间内断开连接，但是为了降低服务器的无效占用，Web-Server 往往会在一段时间内若没有任何数据收发，便会主动断开连接，断开后会收到 “Connection: close” 的字段。</p><h3 id="队首阻塞">队首阻塞</h3><p>因为 HTTP协议 采取 “一问一答” 的模式，即典型的 <strong>FIFO</strong> 结构，当队首的请求因为处理太慢而耽误时间，那么队列后面的所有请求也会相应地被阻塞，这就是 <a href="https://en.wikipedia.org/wiki/Head-of-line_blocking"><strong>Head-of-line blocking</strong></a>。</p><p>类比理解为：食堂排队打饭，每次刷卡是一次 Request，每次领到饭是一次 Response，每处理完一次成对的 Request-Response，队伍才能往前推进一步。只要前面打饭的慢了，后面所有人都会受影响。</p><p>解决方案是：并发连接，即增加打饭的窗口。这里不详细介绍。</p><h2 id="Cookie">Cookie</h2><p>前面说过 <strong>HTTP连接 是无状态的，即没有任何记忆</strong>。即使某个请求会让服务器出现500的错误，下次请求时服务器依然会 “热情招待”。这迫切得需要一种缓存的机制，Cookie应运而生。</p><blockquote><p>Cookie 是服务器委托浏览器存储的一些数据，让服务器有了“记忆能力”</p></blockquote><h3 id="Cookie原理">Cookie原理</h3><p>Response报文中，<strong>利用 <code>Set-Cookie</code>字段发送多个 “key=value” 形式的 cookie值</strong>，这些会由浏览器负责记录下来。当浏览器下次访问同样的地址时，Request报文会自动利用 <code>Cookie</code>字段将本地缓存的 cookie 发送给服务器，这样服务器就知道自己的身份了。</p><p>因为 Cookie 是与浏览器绑定的，如果你换个浏览器或者换台电脑，就会丢失之前的 Cookie记录，此时服务器也会重走一遍新的 <code>Set-Cookie</code> 流程。</p><h3 id="Cookie生命周期">Cookie生命周期</h3><p>Cookie拥有自己的生命周期，它通过 <code>Expires</code> 或 <code>Max-Age</code> 两个字段实现。当超过标记的有效期后，浏览器会自动在本地删除记录，不会再通过HTTP请求发送给服务器。</p><ul><li><code>Expires</code>：记录“过期时间”，如 <code>Fri, 07-Jun-23 20:00:00 GMT</code></li><li><code>Max-Age</code>：记录“保质期”，单秒是秒。将浏览器收到相应的时间加上 <code>Max-Age</code>，即得到 <code>Expires</code></li></ul><h3 id="Cookie作用域">Cookie作用域</h3><p>浏览器会存储大量的Cookies，因此需要标记其作用域，即发送给哪个服务器或者URL，常用字段是：（不清楚的推荐阅读 <a href="/posts/http-1/#URL">HTTP协议之URL</a>）</p><ul><li><code>Domain</code>：域名</li><li><code>Path</code>：路径</li></ul><h3 id="Cookie应用：身份识别⭐">Cookie应用：身份识别⭐</h3><p>登录taobao等电商网站时，浏览器会自动保存你的登录账户（或密码），就便是利用cookies实现的。它同时还会记录你的浏览记录和购物车。</p><p>大概格式为：<code>name=xxxxx....</code></p><h3 id="Cookie应用：广告追踪">Cookie应用：广告追踪</h3><p>当你浏览各种网站时，它们会根据你的访问喜好作行为分析，然后定向推荐一些图片广告给你，这就是利用cookies的原理。<br>这部分成为 “第三方Cookie”，属于搜集用户隐私的行为，浏览器经常会弹出确认框以请求权限。</p><h2 id="HTTP代理">HTTP代理</h2><p>传统的HTTP请求是 <code>Client-Server</code>，现在常常有“第三者插足”，即在中间会引入一个 <strong>代理服务器（Proxy Server）</strong>，它的角色是双面的：</p><ul><li>面对上游：充当客户端，发送请求</li><li>面对下游：充当服务端，响应请求</li></ul><div class="admonition note"><p class="admonition-title">类比：消费者（浏览器）—— 便利店（代理）—— 源服务器（批发市场）</p></div><div class="admonition note"><p class="admonition-title">定理：计算机领域的任何问题，都可以通过引入一个中间层来解决</p></div><p><img src="/images/proxy-server.png" alt=""></p><h3 id="代理字段">代理字段</h3><p><strong>代理服务器 通过字段 <code>Via</code> 标明代理的身份</strong>，在HTTP请求的链路中，每当报文经过一个代理节点，代理服务器就会将自身的信息追加到 <code>Via</code>字段的末尾。<br>另通过如下字段标明其他信息：</p><ul><li><code>X-Forwarded-For</code>：追加代理的域名</li><li><code>X-Real-IP</code>：客户端真实IP</li></ul><p><img src="/images/proxy-process.png" alt=""></p><h3 id="代理协议">代理协议</h3><p>针对代理的HTTP请求，<a href="https://www.haproxy.org/">HAProxy</a> 公司推出了专门的代理请求协议，The Proxy Protocol。<br>其基本格式为：开头必须是“PROXY”五个大写字母，然后是“TCP4”或者“TCP6”，表示客户端的 IP 地址类型，再后面是请求方地址、应答方地址、请求方端口号、应答方端口号，最后用一个回车换行（\r\n）结束。</p><pre><code>PROXY TCP4 1.15.115.4 110.42.228.178 32200 80\r\n</code></pre><h3 id="负载均衡">负载均衡</h3><p>当一个区域所有的消费者，都蜂拥而至一个批发市场购物，就会造成堵塞排场对的现象。<br>因此 “负载均衡” 的解决方案是，在每个居民集中地地区设置一个小商超，或者经销商，而自己只负责货物的批发和调配。消费者 择近择闲 选择小商超去购物即可。</p><p><strong>通过中间的代理服务器，将请求均匀合理地分散到多台源服务器</strong>，能够有效提高系统的响应速度和利用率，这就是 负载均衡 的基本原理。</p><p>而如何挑选转发的服务器，有如下的思路：</p><ul><li>哈希：如尾数单号的去A服，尾数双号的去B服</li><li>轮询：对于新请求，分配一个最空闲的Server去处理</li></ul><h2 id="Cache">Cache</h2><div class="admonition note"><p class="admonition-title">两句话讲清楚Cache</p><ul><li>浏览器Cache：消费者家里囤（上次买的）货</li><li>服务器Cache：小商超囤（上次卖的）货</li></ul></div><h3 id="Cache：浏览器">Cache：浏览器</h3><p>当浏览器频繁每秒请求同样的数据时，如果服务器不厌其烦的依次发送，会造成很大的性能和流量浪费。因此需要客户端（即浏览器）的缓存。</p><p><strong>一个带Cache的HTTP请求流程是：</strong></p><ul><li><p>浏览器检查cache，若有则直接读取，若无则发送新的HTTP请求；</p></li><li><p>服务器响应请求，并返回资源，同时标记资源的有限期；</p></li><li><p>浏览器接受请求，并缓存资源；</p></li></ul><p>而<strong>标记资源的有效期字段是 <code>max-age</code></strong>，即cache的生存时间（秒），过期则被浏览器自动销毁。<br>其他常见字段有：</p><ul><li><code>no_store</code>：不允许缓存，如一些高频的秒杀字段</li><li><code>no_cache</code>：使用缓存前，检查是否有最新版本</li><li><code>muster-revalidate</code>：不过期则直接使用缓存</li></ul><h3 id="Cache：服务器">Cache：服务器</h3><p><font color="#FF1E10"><strong>Todo</strong></font>，与HTTP协议关系不大，可以了解 Redis、Varnish 等缓存技术。</p><h2 id="Chrome调试">Chrome调试</h2><p>Chrome浏览器提供了丰富而强大的调试功能，按下 <code>F12</code> 或者右键点击“检查” 以进入调试页面。</p><img src="/images/chrome-http-debug.png" height="400">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%</summary>
      
    
    
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/"/>
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Networking</title>
    <link href="http://luhao.wiki/posts/network/"/>
    <id>http://luhao.wiki/posts/network/</id>
    <published>2023-06-22T12:18:00.000Z</published>
    <updated>2023-06-26T17:48:59.056Z</updated>
    
    <content type="html"><![CDATA[<p>计算机网络大纲，HTTP/TCP/UDP…<span id="more"></span></p><div class="markmap-container" style="height:425px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Network Model&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;TCP/IP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;OSI&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;Protocol&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;HTTP&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;/posts/http-1/\&quot;>HTTP协议入门</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;/posts/http-2/\&quot;>HTTP协议进阶</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;TCP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;UDP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;KCP&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;Web Server&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;Apache&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Nginx&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;Performance&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;RPS：每秒处理数&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;TPR：平均响应时间&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;Concurrency：并发量&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;Tools&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;Telnet&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#/posts/2G7VBZ2/#curl\&quot;>curl</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;wireshark&quot;}]}],&quot;p&quot;:{}}"></svg></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;计算机网络大纲，HTTP/TCP/UDP…&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/"/>
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>【网络】HTTP协议入门</title>
    <link href="http://luhao.wiki/posts/http/1/"/>
    <id>http://luhao.wiki/posts/http/1/</id>
    <published>2023-06-21T16:15:09.000Z</published>
    <updated>2023-07-01T17:08:46.323Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE">专栏：透视HTTP协议</a> 墙裂推荐 ⭐</li></ul></div><div class="markmap-container" style="height:480px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTTP&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#Hypertext\&quot;>Hypertext</a>（html）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;text&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;media&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;hyperlink&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#Transfer\&quot;>Transfer</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;client&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Chrome, Edge&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;Telnet&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;server&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;https://nginx.org/\&quot;>Nginx</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;https://httpd.apache.org/\&quot;>Apache</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;CDN（内容分发）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\&quot;>负载均衡</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;加速访问&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;#Protocol\&quot;>Protocol</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#TCP-IP\&quot;>TCP/IP</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#IP\&quot;>IP</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#TCP\&quot;>TCP</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#DNS\&quot;>DNS</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#域名解析\&quot;>域名解析</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#DNS缓存\&quot;>DNS缓存</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#URL\&quot;>URL</a>（网址）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#URL\&quot;>示例⭐</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP抓包\&quot;>HTTP抓包</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;wireshark&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP报文\&quot;>HTTP报文⭐</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;start-line&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;headers&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;body&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP方法\&quot;>HTTP方法⭐</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;GET, HEAD&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;POST&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP状态码\&quot;>HTTP状态码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP特点\&quot;>HTTP特点</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;.&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;.&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;可靠传输&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;明文传输&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;无状态&quot;}]}]}]}],&quot;p&quot;:{}}"></svg></div><h2 id="HTTP协议">HTTP协议</h2><p>HTTP 协议是 <a href="https://en.wikipedia.org/wiki/HTTP"><em><strong>HyperText Transfer Protocol</strong></em></a> 的缩写，它是一种用于超媒体信息传输的应用层协议，是互联网通信的基础。</p><p>如何通俗地理解 HTTP协议 呢？</p><div class="admonition todo"><p class="admonition-title">如何理解新概念?</p><ol><li>任何技术思想，在现实生活中都能找到映射</li><li>巧用 “类比” 的手段</li></ol></div><h3 id="Hypertext">Hypertext</h3><p>在互联网早期，传输的信息只有简单的字符文字，即 <code>Text</code>。随着信息爆炸式地增长，网络需要传输的信息被扩展为 图片、音频、视频等等，这些就是超文本。<br>超文本的核心是 <a href="https://en.wikipedia.org/wiki/Hyperlink">超链接 Hyperlink</a>，通过互相引用而形成复杂的网状信息结构。</p><h3 id="Transfer">Transfer</h3><p>HTTP 是一种 <code>Request-Response</code>协议，即将信息在 A、B 两个点之间双向传输，因此有两类参与方：</p><ul><li><code>client</code><br>http请求的发起方，通常指浏览器（如Chrome、Edge）</li><li><code>server</code><br>http请求的接收方，又称为 <code>Web Server</code>，如 <a href="https://nginx.org/">Nginx</a>、<a href="https://httpd.apache.org/">Apache</a> 都是常见的服务器框架</li><li><code>CDN</code><br>client和server之间通常不会直连，而是经过 <code>CDN</code>(<a href="https://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Network</a>) 这个中间商。它能够实现安全防护、负载均衡等常见功能。</li></ul><h3 id="Protocol">Protocol</h3><p>HTTP 是众多网络协议中的一个，先理解什么是协议?<br>以毕业生签署的“三方协议”为例，参与对象是多元的（自己、学校、企业），同时协议还会规定各方需履行的义务，以及该做什么和不该做什么。因此协议的核心要素是：</p><ul><li><p>多方参与<br>client、server、中转者…</p></li><li><p>通信规范<br>如规定 <code>Get</code>、<code>Post</code> 的请求报文格式，如请求的错误处理等等</p></li></ul><p>在 HTTP 的发展历程中，也经历过很多大版本的迭代，如 <code>HTTP/0.9</code>、<code>HTTP/1.0</code>、<code>HTTP/2</code>、<code>HTTP/3</code>等等。</p><h2 id="TCP-IP">TCP/IP</h2><p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP协议</a> 是整个互联网的标准通信协议，它实际上是一系列协议的统称，其中最核心的是 TCP 和 IP，这里篇幅有限只作简单介绍。</p><h3 id="IP">IP</h3><p><strong>IP协议（<a href="https://en.wikipedia.org/wiki/Internet_Protocol">Internet Protocol</a>）主要解决寻址和路由问题</strong>，它提出 <strong>IP地址</strong> 的概念来定位互联网上的每一台计算机。因此可以将其类比为电话号码，而整个运营商的拨号系统就是一个 IP协议。</p><p>IP协议又分为 IPv4 和 IPv6，大部分仍在使用前者，即IP地址是4个用冒号分割的数字，例如 <code>1.15.115.4</code>。之所以出现 IPv6，是因为v4分配的地址已经捉襟见肘，不够整个互联网的使用。</p><h3 id="TCP">TCP</h3><p><strong>TCP协议（<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol</a>）是一种 传输控制协议</strong>，它基于 IP协议 之上，提供可靠的、字节流形式的通信，也是HTTP协议得以实现的基础。</p><p>之所以了解TCP/IP协议，是因为HTTP运行在前者上，因此又称为 <code>HTTP over TCP/IP</code>。</p><h2 id="DNS">DNS</h2><p>在TCP/IP协议中，通常使用纯数字的 IP地址 来标记计算机，这非常不利于用于的使用和记忆。<br>因此 <strong>DNS（<a href="https://en.wikipedia.org/wiki/Domain_Name_System">Domain Name System</a>）域名系统</strong> 应运而生，它使用具有实际含义的名称来替代IP地址（即英文+数字的组合，也可以是汉字），例如：<code>95.211.80.227</code>是IP地址，<code>nginx.org</code>是其域名，两者指向的是同一个web服务器。</p><h3 id="域名解析">域名解析</h3><p>以 <code>www.apple.com</code> 这个域名为例，当用户尝试访问该域名时，会经过至少3次的DNS域名解析服务器：</p><ul><li><em>Root DNS Server</em>：管理 <code>com</code>, <code>cn</code>, <code>net</code>等顶级域名的IP地址。</li><li><em>Top-level DNS Server</em>：管理 <code>apple.com</code> 的IP地址。</li><li><em>Authoritative DNS Server</em>：管理 <code>www.apple.com</code>的IP地址。</li></ul><h3 id="DNS缓存">DNS缓存</h3><p>目前全世界有 13组 <code>Root-DNS-Server</code> 提供顶级域名的解析服务，但因为全世界的网民都在请求，会造成系统的拥挤并降低访问速度，优化手段之一就是利用 <em>DNS缓存</em>。</p><p>当你已经访问过 <code>www.apple.com</code>，操作系统就会在某个文件（如下↓）<strong>缓存解析后的IP地址</strong>，这样下次访问时，就不再需要经过 DNF解析服务器了。</p><ul><li>linux: <code>/etc/hosts</code></li><li>windows: <code>C:\WINDOWS\system32\drivers\etc\hosts</code></li></ul><h2 id="URL">URL</h2><p>通过 TCP/IP协议 加上 DNS 的组合，我们实现了访问互联网中任意一台机器，但是每台机器上的资源仍然有很多，如何对他们加以区分呢？</p><p><strong>URL（<a href="https://en.wikipedia.org/wiki/URL">Uniform Resource Locator</a>）含义是 统一资源定位符，即俗称的网址</strong>，如下是其组成格式：</p><p><img src="/images/URI.svg" alt=""></p><ul><li><code>scheme</code>：指定http、https、ftp等协议<ul><li><code>file</code>：本地文件</li><li><code>ftp</code>：文件传输</li><li><code>ssh</code>：加密登录</li></ul></li><li><code>://</code>：约定俗成的分隔符</li><li><code>user:passwd@</code>：明文身份信息，已被弃用</li><li><code>host:port</code>：省略端口会用默认值，如 HTTP 80，HTTPS 443</li><li><code>path</code>：资源的在主机的路径，也可能是服务路径</li><li><code>?query</code>：查询参数</li><li><code>#fragment</code>：仅浏览器使用，用于锚点跳转</li></ul><h2 id="HTTP抓包">HTTP抓包</h2><p>“纸上得来终觉浅”，我们通过在windows下快速搭建一个最小化的HTTP模拟环境，借助抓包工具 wireshark 来对 HTTP 的细节一探究竟。</p><blockquote><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/07%20%20%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%EF%BC%8C%E6%90%AD%E5%BB%BAHTTP%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83.md">搭建http本地实验环境</a></li><li><a href="https://zhuanlan.zhihu.com/p/82498482">知乎: Wireshark抓包指南</a></li></ul></blockquote><p>在启动本地web服务器后，尝试在浏览器输入 <code>127.0.0.1</code> 访问该server，然后按下回车，wireshark抓包（限制<code>http/tcp port 80</code>）抓包的结果如下：</p><ul><li>前三个包：TCP协议的 “三次握手”</li><li>中间四个包：HTTP协议发送了一个 <code>GET /HTTP/1.1</code> 的请求报文，Server回复OK</li><li>后四个包：HTTP协议发送了请求 <code>/favicon.io</code> 的请求报文，Server回复404</li></ul><p>通过http抓包，基本清楚了http协议的工作流程，<strong>核心是 “Requst-Response”，即 “一问一答”的模式</strong>。</p><p><img src="/images/wireshark-http.png" alt=""></p><h2 id="HTTP报文">HTTP报文</h2><p>通过wireshark也可以清楚看到http请求发送的报文内容，其全部由 ASCII文本 组成，非常容易肉眼阅读。</p><p>HTTP协议的 requet报文 和 response报文 的组成机构基本相同，由三个部分组成，每个部分由一个空行 “CRLF（0x0D0A）” 隔开:</p><ul><li>请求报文</li></ul><div class="markmap-container" style="height:220px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Request-line&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Method&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;URI&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;http-version&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;Request-header&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Key-Value&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;eg. Host: 127.0.0.1&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;eg. Connection: keep-alive&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;eg. User-Agent: xxxxxx&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Request-body（空）&quot;}],&quot;p&quot;:{}}"></svg></div><ul><li>回复报文</li></ul><div class="markmap-container" style="height:180px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Response-line&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;http-version&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;Status-code&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;200：成功&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;404：查找失败&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Reason（描述原因）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Response-header（同上）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Response-body&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;eg. name=luhao&amp;amp;password=1234&quot;}]}],&quot;p&quot;:{}}"></svg></div><ul><li>报文示例<br><img src="/images/http-request.png" alt=""></li></ul><h2 id="HTTP状态码">HTTP状态码</h2><p>既然 HTTP协议 采用 “一问一答” 的模式，那么响应报文内应该包含请求的结果信息，即状态码（Status Code）。<br>目前 RFC标准 规定状态码是三位数，即取值范围是 000 到 999，其从设计之初也有具体的含义区分：</p><ul><li>1xx：提示信息</li><li>2xx：成功<ul><li>200 OK</li></ul></li><li>3xx：重定向</li><li>4xx：客户端请求报文错误<ul><li>400 Bad Request</li><li>403 Forbidden</li><li>404 Not Found</li><li>408 Request Timeout</li></ul></li><li>5xx：服务端内部错误<ul><li>500 Internal Server Error</li><li>502 Bad Gateway</li></ul></li></ul><h2 id="HTTP特点">HTTP特点</h2><p>作为本篇的收尾总结，HTTP协议可以概括为三大特点：</p><ul><li><p>可靠传输<br>注意，“可靠”只是确保 Request方 的必定传输，由于一些网络原因未必能确保 Response方 的成功接收。</p></li><li><p>明文传输<br>HTTP报文的所有信息都回暴露在 “光天化日之下”，HTTPS协议实现了加密版本的HTTP传输。</p></li><li><p>无状态<br>区分于 TCP协议 的状态，HTTPS协议 是没有状态的，即 “没有记忆能力”。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;导读
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%</summary>
      
    
    
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/"/>
    
    <category term="Network" scheme="http://luhao.wiki/categories/Network/Network/"/>
    
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【GAMES101】Shading</title>
    <link href="http://luhao.wiki/posts/shading/"/>
    <id>http://luhao.wiki/posts/shading/</id>
    <published>2023-06-13T15:42:19.000Z</published>
    <updated>2023-07-01T17:10:20.591Z</updated>
    
    <content type="html"><![CDATA[<p>Lambertian、Blinn-phong、shading-tech<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">GAMES101 Shading</a></li><li><a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/schedule.html">CS130 Shading</a></li><li><a href="https://www.cs.toronto.edu/~jacobson/phong-demo/">WebGL demo</a></li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Factors&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2],&quot;f&quot;:true},&quot;v&quot;:&quot;光源&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3],&quot;f&quot;:true},&quot;v&quot;:&quot;平行光&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4],&quot;f&quot;:true},&quot;v&quot;:&quot;点光&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5],&quot;f&quot;:true},&quot;v&quot;:&quot;聚光灯&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6],&quot;f&quot;:true},&quot;v&quot;:&quot;相对位置&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7],&quot;f&quot;:true},&quot;v&quot;:&quot;距离衰减&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;角度（Lambert’s cosine law）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;材质&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;Ambient&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[10,11],&quot;f&quot;:true},&quot;v&quot;:&quot;Diffuse&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[11,12],&quot;f&quot;:true},&quot;v&quot;:&quot;Specular&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Shading-Reflection⭐&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#font-color-750000-Lambertian-Reflection-⭐-font\&quot;>Lambertian</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#font-color-750000-Blinn-Phong-Reflection-⭐-font\&quot;>Blinn-Phong</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Shading-Tech&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#1-Flat-Shading\&quot;>Flat</a>（poly）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#2-Gouraud-Shading\&quot;>Gouraund</a>（vertex）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#3-Phong-Shading\&quot;>Phong</a>（pixel）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;Shading-Normal&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#1-顶点法线\&quot;>Vertex-normal</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#2-像素法线\&quot;>Pixel-normal</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Shading">Shading</h2><p><a href="https://en.wikipedia.org/wiki/Shading">Wikipedia: Shading</a><br>维基百科对于 shading 的定义非常清楚，即对3维场景中模型 <strong>着色</strong> 的过程，且着色的效果取决于如下几个因素：</p><h3 id="1-光源">1.光源</h3><p>推荐阅读：<a href="https://learnopengl.com/Lighting/Multiple-lights">LearnOpenGL</a>，<a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/content/Lecture12.pdf">CS130-Lecture12</a></p><ul><li><p>Ambient lighting<br>环境光照，即使在最黑暗的情况下，存在一些微弱的光亮使得物体呈现出一些颜色。</p></li><li><p>Directional lighting<br>平行光，也称作天光，在固定的光源方向上无任何衰减。</p></li><li><p>Point lighing<br>点光，向四周照射，随距离衰减。</p></li><li><p>Spotlighting<br>聚光灯，呈一个锥形范围照射，随距离衰减。</p></li></ul><h3 id="2-相对位置">2.相对位置</h3><ul><li><p>距离关系<br>光照强度一般随 <strong>距离的平方</strong> 衰减，$ ~ I / r^{2}$</p></li><li><p>角度关系<br>根据 <a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Lambert’s cosine law</a>，$\vec {n} * \vec {l}$ （结合后面的 Lambertian Reflection 理解）</p></li></ul><h3 id="3-材质">3.材质</h3><ul><li><p>Roughness<br>粗糙度越高，镜面反射能力越强，典型代表如镜子。</p></li><li><p>Metallic<br>金属度越高，漫反射越弱。</p></li><li><p>Translucent<br>具有透光属性，如典型的 <a href="https://en.wikipedia.org/wiki/Subsurface_scattering">SSS</a>。</p></li></ul><h2 id="Local-Shading">Local Shading</h2><p>现实中的光照，需要考虑各种直接光、间接光的反射、吸收效果，想要在图形引擎中模拟它们非常不现实。因此一些大佬提出局部的着色算法，以模拟 <strong>一个独立点的shading计算</strong>，这里统称为 local-shading。<br>我们需要了解 <code>Lambertian Reflection</code> 和 <code>Blinn-Phong Reflection</code>。</p><h3 id="font-color-750000-Lambertian-Reflection-⭐-font"><font color="#750000">Lambertian Reflection ⭐</font></h3><p><strong>Lambertian模型</strong> 一般用来模拟 diffuse光，核心影响分别是：距离、角度。<br>距离基本的衰减关系，前面讲过了。角度根据 <a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Lambert’s cosine law</a> 计算得一个光照强度的系数，其中 $max(0, n \cdot l)$ 表示任何大于90度的夹角，光照强度都为0。</p><p><img src="/images/lambert-shading.png" alt=""></p><hr><h3 id="font-color-750000-Blinn-Phong-Reflection-⭐-font"><font color="#750000">Blinn-Phong Reflection ⭐</font></h3><p><strong>Blinn-Phong模型</strong> 在前者的基础上引入了 <strong>Ambient 环境光</strong> 和 <strong>Specular高光</strong>，它是一个叫<code>Blinn</code>的教授拓展了<code>Phong</code>的光照模型，其计算方式分别为：</p><ul><li><strong>Specular</strong></li></ul><blockquote><p>$L_{s} = K_{s}(I/r^{2}) max(0, n \cdot h)^{p}$<br>引入一个 <strong>半程向量 $h (=\frac{v+l}{|v+l|})$</strong>，实际含义为入射角和观察角的二分之一夹角。此时衡量 $h$ 和 $n$ 的接近程度，即点乘 $n \cdot h$（<code>Phong</code>模型选取的是 $cos(\alpha)$，$\alpha$是夹角）， $n, h$ 越接近 则点乘值越大，则高光越强烈。<br><br>其中的 p 衡量 <strong>高光随夹角的衰减速度</strong>，p值越大，则呈现高光的范围越小（如下图）。</p><ul><li>p = 5 … 10：塑料</li><li>p = 100 … 200：金属<br><img src="/images/blinn-phong-demo-all.png" alt=""></li></ul></blockquote><ul><li><strong>Diffuse</strong></li></ul><blockquote><p>同 Lambertian模型</p></blockquote><ul><li><strong>Ambient</strong></li></ul><blockquote><p>$L_{a} = k_{a}I_{a}$<br>环境光假设任何点来自环境的 <strong>光照强度是一致的</strong>，即 $I_{a}$，它与实际光照方向无关。<br>笔者粗暴地理解为自发光、固有色。</p></blockquote><p><img src="/images/blinn-phong.png" alt=""><br><br></p><h2 id="Shading-Tech">Shading Tech</h2><p>推荐阅读：<a href="https://en.wikipedia.org/wiki/Shading">Wikipedia</a>，<a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/content/Lecture14.pdf">CS130-Lecture14</a></p><p>前面讨论光照模型的计算，但是忽略了一个重点：<strong>以什么对象（或粒度）进行Shading?</strong><br>基于前面的知识得到，任何 mesh 都是由顶点和三角形（或Poly）组成，因此自然想到如下几种方案：</p><ul><li>Tri（Poly）：基于三角面的 Flat Shading</li><li>Vertex：基于顶点的 Gouraud Shading</li><li>Pixel：基于像素的 Phong Shading</li></ul><p><img src="/images/shading-tech.png" alt=""></p><h3 id="1-Flat-Shading">1. Flat Shading</h3><p>对<strong>每个三角形（或Poly）</strong> 计算出一个法线，可以通过叉乘得到，并基于法线作光照计算。此时三角形内的Shading结果是一样的。可以理解为 <code>Low-Poly</code> 的渲染风格。</p><h3 id="2-Gouraud-Shading">2. Gouraud Shading</h3><p>对<strong>每个顶点</strong>作计算（假设顶点没有自己法线，可以根据周围几个三角面的法线求均值）。可以理解为 <code>Vertex-Shader</code>。</p><p><img src="/images/gouraud-shading.png" alt=""></p><h3 id="3-Phong-Shading">3. Phong Shading</h3><p>对<strong>每个像素</strong>插值出单独的法线，基于此作光照计算。因为是全像素的，所以性能开销高。可以理解为 <code>Pixel-Shader</code></p><h3 id="三种方案对比">三种方案对比</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Flat</th><th style="text-align:center">Gouraud</th><th style="text-align:center">Phong</th></tr></thead><tbody><tr><td style="text-align:center">光照粒度</td><td style="text-align:center">poly</td><td style="text-align:center">Vertex</td><td style="text-align:center">pixel</td></tr><tr><td style="text-align:center">表现</td><td style="text-align:center">劣</td><td style="text-align:center">中</td><td style="text-align:center">优</td></tr><tr><td style="text-align:center">性能需求</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">需要顶点法线</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><h2 id="Normal">Normal</h2><p>Shading的着色计算非常依赖 <strong>法线</strong>，下面介绍两种常见的法线计算方式：</p><h3 id="1-顶点法线">1. 顶点法线</h3><ul><li><p>模型自带，例如 <code>obj</code> 格式可以指定逐顶点的法线</p></li><li><p>计算顶点周围 <code>Poly</code> 的法线均值</p></li></ul><p><img src="/images/vertex-normal.png" alt=""></p><h3 id="2-像素法线">2. 像素法线</h3><ul><li>通过两个顶点的法线插值，记得归一化！</li></ul><p><img src="/images/pixel-vertex.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Lambertian、Blinn-phong、shading-tech&lt;/p&gt;</summary>
    
    
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/"/>
    
    <category term="Graphics" scheme="http://luhao.wiki/categories/Graphics/Graphics/"/>
    
    
    <category term="OpenGL" scheme="http://luhao.wiki/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】Virtual Memory</title>
    <link href="http://luhao.wiki/posts/virtual-memory/"/>
    <id>http://luhao.wiki/posts/virtual-memory/</id>
    <published>2023-06-13T12:33:56.000Z</published>
    <updated>2023-07-04T18:18:36.861Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟内存、cache、内存分配、内存泄漏…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="http://1.15.115.4/CSAPP-3rd.pdf">CSAPP 第9章：Virtual Memory</a>（已读完，通俗 &amp; 受益匪浅）</li><li><a href="/posts/3RBTN4W/">汇编（一）：计算机架构入门</a>（站内文章，硬件基础知识）</li><li><a href="https://fengmuzi2003.gitbook.io/csapp3e/dixzhang-xu-ni-nei-cun">CSAPP重点解读：虚拟内存</a></li><li><a href="https://people.freebsd.org/~lstewart/articles/cpumemory.pdf">What Every Programmer Should Know About Memory</a>（114页pdf）</li><li><a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li><a href="https://www.usna.edu/Users/cs/roche/courses/s19ic221/lab05.html">IC221 Lab 05: Memory Leaks</a></li></ul></div><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;What，Why&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;physics-memory 及弊端&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;virtual-memory&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;virtual page&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#PTE\&quot;>页表 PTE</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Cache&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#page-hits-✔\&quot;>页命中</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#page-faults-❌\&quot;>缺页</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#locality\&quot;>Locality</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;时间局部性&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;空间局部性&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#memory-allocator\&quot;>memory allocator</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#衡量标准\&quot;>衡量标准</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;1. 分配&amp;amp;释放速率&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;2. 内存利用率&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Explicit allocator&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#u-class-black-mallco-free-u\&quot;>malloc &amp;amp; free</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;new &amp;amp; delete&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;Implicit allocator&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#垃圾回收\&quot;>垃圾回收</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#memory-leaks\&quot;>memory leaks</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#Valgrind\&quot;>Valgrind</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#ASan\&quot;>ASan</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#memory-bugs\&quot;>memory bugs</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#引用坏指针❌\&quot;>引用坏指针</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;<a href=\&quot;#未初始化的堆内存❌\&quot;>未初始化的堆内存</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;<a href=\&quot;#缓冲区溢出❌\&quot;>缓冲区溢出</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="virtual-memory">virtual memory</h2><p>物理内存有什么问题？1. 内存空间不够，2. 产生内存碎片，3. 没有内存保护。从这个角度看，<strong>虚拟内存是一个中间层，本质是到物理内存的一层映射关系</strong>。<br>并非所有系统都会使用虚拟内存，一些古老or简单的系统就会直接使用物理内存。</p><p>物理地址和虚拟地址的对比如下：</p><ul><li><p><strong>Physical-Address</strong>：物理地址，从0开始每个byte递增1<br>物理地址可以直观反应内存大小，且是连续的，例如 <code>0x0000 ~ 0xFFFF</code> 表示 <code>64KB</code> 的内存。</p></li><li><p><strong>Virtual-Address</strong>：虚拟地址，是一种到物理地址的映射（<a href="https://en.wikipedia.org/wiki/Memory_management_unit">MMU</a>）<br>使用虚拟地址，可以节省地址总线的位数，且利于cache实现。</p></li></ul><p><img src="/images/virtual-memory.png" alt=""></p><h2 id="cache">cache</h2><p><strong>存储器</strong> 是计算机用来存储数据的器件，即通常所说的磁盘。其根据读写特性又可以分为两类：</p><ul><li><p><strong>ROM（Read-Only-Memory）</strong><br>只读，一般是显卡、网卡上的默认系统，如<code>BIOS</code></p></li><li><p><strong>RAM（Random-Access-Memory）</strong><br>可读可写，显卡上的RAM又成为显存</p></li></ul><p>为了提高CPU读写数据的速度，现代计算机在 CPU和RAM之间又增加了 <strong>速度更快、内存更小、造价更高的</strong> <em><strong>L1, L2, L3 Cache</strong></em>，这部分称为 SRAM（Static）。<br>作为对比，DRAM（Dynamic） 一般用作虚拟内存的cache。<font color="#FF1E10"><strong>（???）</strong></font></p><p>至于为什么 SRAM 速度要比 DRAM 快很多？这需要从硬件制造上理解，参考阅读：<a href="https://rf.eefocus.com/article/id-336795">存储技术SRAM详解</a></p><h2 id="page">page</h2><p>计算机内存会被划分为固定大小的 <strong>页（page）</strong>，划分页是为了实现缓存的功能。</p><p>对于虚拟内存而言，任何一个 <strong>虚拟页（virtual page, VP）</strong> 中的内存只能处于如下三种状态：</p><ul><li>unallocated：未分配内存（即不在物理内存中）</li><li>cached：已缓存（但在物理内存中）</li><li>uncached：未缓存（但在物理内存中）</li></ul><h3 id="PTE">PTE</h3><p>为了描述 虚拟页 和 DRAM 之间的缓存关系，操作系统引入 <strong>页表 PTE（Page Table Entry）</strong> 的概念。通常情况下，它有一个有效位和一个n位地址 组成：</p><ul><li><strong>有效位</strong>：对应的虚拟页是否 cached</li><li><strong>地址位</strong>：若cached，则对应 DRAM 的物理地址</li><li>其他许可位：如可读、可写、可在内核运行等</li></ul><p>配合下图理解，一段虚拟内存被分为 8个虚拟页，对应着左侧的 8个PTE，其中的虚拟页1、2、4、7已经在物理内存中被缓存，同时在PTE中存储了对应地址。</p><p><img src="/images/virtual-page.png" alt=""></p><div class="admonition note"><p class="admonition-title">虚拟内存访问页的两种情形</p><ul><li>已缓存，即 page hits</li><li>未缓存，即 page faults</li></ul></div><h3 id="page-hits-✔">page hits ✔</h3><p>页命中，即虚拟页已经在DRAM中被缓存，读取时只需根据 PTE 找到对应的物理地址。</p><h3 id="page-faults-❌">page faults ❌</h3><p>页缺失，即虚拟页 <code>cache miss</code>，这是它在 PTE 中的有效位是0，即代表其在 DRAM 中未缓存。<br>此时内核会选择一个已经被缓存的 “无辜儿” 去替换成该页，这个无辜儿又称为 <strong>牺牲页（victim page）</strong>，同时进行如下两个操作：</p><ol><li>（物理内存中）用 查找页 替换 牺牲页</li><li>（页表PTE中）交换 查找页和牺牲页 的 cache有效位</li></ol><p>注意这里的 <a href="https://forum.huawei.com/enterprise/en/thread/667215004455288832?page=1">替换策略</a> 很重要，主要有如下两种（实际应用会更复杂）：</p><ul><li>write-through：直写，发生改变时更新cache和内存</li><li>write-back：回写，发生改变时只更新cache</li></ul><p>DRAM 为了性能考虑，采取的是 <code>write-back</code> 方案。</p><h2 id="locality">locality</h2><p>虚拟内存、分页之所以能达到非常好的cache优化，是因为程序的局部性原理 <a href="https://en.wikipedia.org/wiki/Locality_of_reference">Locality of reference</a></p><ul><li><p><strong>时间局部性</strong>：一个刚刚被访问的内存地址，在未来有更大概率被再次访问</p></li><li><p><strong>空间局部性</strong>：被访问的内存地址，其周围的内存更容易被访问</p></li></ul><h2 id="memory-allocator">memory allocator</h2><p>实际开发中，当需要申请一段内存时，其大小往往不是固定的（与runtime有关），此时有如下两种内存分配到方式：</p><ul><li><code>int arr[10000];</code> 静态定义偏 <code>hard-code</code>，浪费较多内存</li><li><code>int* arr;</code> <strong>需要时动态分配内存⭐，本章重点介绍</strong></li></ul><p>C++ 提供一种在 <strong>堆(heap)</strong> 上动态分配内存的方法，一个 <code>runtime</code> 程序的内存划分如下：<br><img src="/images/section.png" alt=""></p><p>C++ 的动态内存分配器有两种类型，区别在于<strong>如何释放内存</strong>：</p><ul><li><p><font color="#ef6d3b"><strong>Explicit allocator</strong></font><br>显示分配器，要求程序自己去释放掉申请的内存，C-Style的方法是 <code>malloc/free</code>，Cpp-Style的方法是 <code>new/delete</code>；<br>当程序没有正确或及时地释放内存，就会造成 <em><strong>Memory Leaks</strong></em>。</p></li><li><p><font color="#ef6d3b"><strong>Implicit allocator</strong></font><br>隐式分配器，它会自动检测未被释放的内存块，并主动去释放掉，它有一个通俗的名称叫 <strong>Garbage Collector（垃圾回收）</strong>；<br>诸如 Java、Python 等拥有自己的垃圾回收（这部分不作讨论）。</p></li></ul><h3 id="u-class-black-mallco-free-u"><u class="black">mallco &amp; free</u></h3><ul><li>阅读文档：<a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li>使用的时候多查阅文档，注意 <code>malloc</code> 使用时要判断 <code>NULL</code> 避免内存分配失败</li></ul><pre><code class="language-c++">#include &lt;unistd.h&gt;void *malloc(size_t size);void *calloc( size_t num, size_t size );void *realloc( void *ptr, size_t new_size );</code></pre><ul><li>分配过程：↓</li><li>需要考虑字节对齐，注意被释放后的内存也可能重复利用，这也解释了为什么野指针的 <code>undefined behavior</code></li></ul><p><img src="/images/malloc-demo.png" alt=""></p><h3 id="衡量标准">衡量标准</h3><p>动态内存分配器的实现有很多种（<code>malloc</code>是非常普遍的一种），一个优秀的分配器应该兼顾如下两种性质：</p><ul><li><p><strong>分配&amp;释放的速率</strong><br>即每秒可以进行多少次的内存分配 和 释放操作，又称为吞吐率。</p></li><li><p><strong>内存利用率</strong><br>即内存的实际利用率，受牵制与内存中的小碎片。</p></li></ul><h2 id="垃圾回收">垃圾回收</h2><p>垃圾回收（Garbage Collection）是现代高级语言的常见特性，它最早可追溯于 1960s Lisp语言，如今也已经发展为 Java、Python 等语言的重要部分。</p><h3 id="What-is-Garbage">What is Garbage?</h3><p>正所谓知己知彼方能百战百胜，欲消灭“垃圾”，先搞清楚“垃圾”的定义。<br>阅读下段代码，其中的指针<code>p</code>在函数<code>garbage</code>内部没有被释放掉，因此函数调用返回后，这就是一段内存垃圾，也称为<strong>内存泄漏</strong>。</p><blockquote><p>因此垃圾回收，就是自动释放 泄漏的内存</p></blockquote><pre><code class="language-c++">void garbage(){    int *p = (int *)Malloc(15213);    return; /* Array p is garbage at this point */}</code></pre><ul><li>实际的垃圾做法比较复杂，这里简要提一下其实现原理。</li></ul><p>垃圾回收器 会维护一个内存块的有向图，其中 <code>Reachable</code>节点就是有指针指向的，可以被手动释放；而 <code>Unreachable</code>节点就是无内存泄漏的节点，垃圾回收就是去释放它们。</p><p><img src="/images/memory-garbage.png" alt=""></p><h2 id="memory-leaks">memory leaks</h2><p>关于内存泄漏的定义，<a href="#What-is-Garbage">上面有提到</a>。这里重点介绍两种检测内存泄漏的工具。推荐阅读这篇材料: <a href="https://www.usna.edu/Users/cs/roche/courses/s19ic221/lab05.html">IC221 Lab 05: Memory Leaks</a></p><h3 id="Valgrind">Valgrind</h3><ul><li><code>valgrind ./a.out</code>：跟踪内存泄漏</li><li><code>valgrind --leak-check=full ./a.out</code>：查看更详细的内存泄漏信息</li><li><code>LEAK SUMMARY</code>：该标签，就是潜在的泄漏部分</li></ul><pre><code class="language-c++">==2392771== HEAP SUMMARY:==2392771==     in use at exit: 0 bytes in 0 blocks==2392771==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated</code></pre><h3 id="ASan">ASan</h3><p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer"><strong>AddressSanitizer</strong></a> 已集成到 gcc、clang 等编译器，添加 <code>-fsanitize=address</code> 的编译选项 并运行即可。</p><ul><li><code>g++ -fsanitize=address -g main.cp</code></li></ul><pre><code class="language-c++">===================================================================2392472==ERROR: LeakSanitizer: detected memory leaksDirect leak of 5 byte(s) in 1 object(s) allocated from:</code></pre><h2 id="memory-bugs">memory bugs</h2><p>内存bug 相对于其他类型的bug，往往更难以定义和排查。这篇文章 <a href="/posts/2F2QH5R/#Bug%E4%BA%A7%E7%94%9F%E5%8E%9F%E7%90%86">调试理论与实践</a> 指出：<strong>程序代码错（Bug）到 可观测错（Failure）之间的跨度距离，决定一个bug排查的难易程度</strong>，而内存bug的跨度尤长。</p><blockquote><p>换言之，不论是时间还是空间上，内存的错误 往往距离错误源有较长一段距离。</p></blockquote><h3 id="引用坏指针❌">引用坏指针❌</h3><p>错误表现是 <code>segmentation fault</code>，错误原因有：</p><ul><li>访问非法内存地址，如读取 <code>0x0000001</code> 地址的值；</li><li>对 “只读内存” 进行写操作，如 <code>scanf("%d", val)</code></li></ul><div class="admonition warning"><p class="admonition-title">WARNING</p><ul><li><code>scanf("%d", val)</code> 会将 <code>val</code> 的值解释为一个地址</li><li>如果该地址只读，会出现 <code>segmentation fault</code></li><li>如果该地址可写，程序会覆盖这段内存，造成无法预测的后果...</li></ul></div><h3 id="未初始化的堆内存❌">未初始化的堆内存❌</h3><p>对于 <code>.bss</code> 的静态内存，加载器会将其初始化为0，但是堆内存的值是无法预测的。</p><p>如下 <code>y</code> 数组的值不一定都为0，请手动为其赋值。<br><code>int *y = (int *)malloc(5 * sizeof(int))</code></p><h3 id="缓冲区溢出-❌">缓冲区溢出 ❌</h3><p>这类bug使用中文有点别扭，实际是 <code>Stack (Buffer) Overflows</code>，即写内存时超出原本的大小限制。如下当输入超过 64 bits 就会出现 <code>segmentation fault</code>：</p><pre><code class="language-c++">char buf[64];scanf("%s", &amp;buf);</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;虚拟内存、cache、内存分配、内存泄漏…&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://luhao.wiki/categories/Linux/"/>
    
    <category term="Linux" scheme="http://luhao.wiki/categories/Linux/Linux/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】CMU 15-213</title>
    <link href="http://luhao.wiki/posts/csapp/"/>
    <id>http://luhao.wiki/posts/csapp/</id>
    <published>2023-06-11T18:00:54.000Z</published>
    <updated>2023-06-27T17:30:11.703Z</updated>
    
    <content type="html"><![CDATA[<p>CS网课中的 “圣经”<span id="more"></span></p><style type="text/css">blockquote{    line-height: 30px;    padding: 4px 16px;}</style><blockquote><ul><li><a href="https://www.cs.cmu.edu/~213/">课程主页</a> | <a href="https://www.bilibili.com/video/BV1iW411d7hd/">B站视频（中字）</a> | <a href="https://www.cs.cmu.edu/~213/lectures/">课程ppt</a></li><li><a href="http://1.15.115.4/CSAPP-3rd.pdf">CSAPP pdf 英文版</a></li><li><a href="https://github.com/Maecenas/ICS-15213-CSAPP3e-CMU">Labs Github</a></li><li><a href="https://fengmuzi2003.gitbook.io/csapp3e/">CSAPP重点解读</a></li><li><a href="https://wdxtub.com/work/">读薄/读厚 CSAPP</a></li></ul></blockquote><h2 id="CSAPP">CSAPP</h2><p>CSAPP 是 《Computer Systems: A Programmer’s Perspective》 这本书的缩写，它作为CMU大学的ICS课教材，被誉为计算机系列课程的圣经，其内容涉及：计算机组成原理、操作系统、编译优化、网络和并发等。</p><p>“万丈高楼平地起，勿以浮沙筑高台”，学习计算机的底层原理，是在修炼内功、在夯实基础，这比修一个bug或者读几段代码更加实在。</p><h3 id="站内文章">站内文章</h3><ul><li><a href="/posts/24H1CZ3/">2. Information Storage</a></li><li><a href="/posts/1X3A6C1/">9. Virtual Memory</a></li></ul><h2 id="关于-labs">关于 labs</h2><p>首先 <code>CSAPP</code> 的整个学习过程：以 <code>labs</code> 为主，视频和ppt 为辅。在github上找到一份疑似官方一致的repo，自己fork了一份用于开发：<a href="https://github.com/593413198/ICS-15213-CSAPP3e-CMU">🔥<em><strong>Github Repo</strong></em></a></p><p>整个 labs 的设计非常精巧，还囊括了测试、评分的用例，后者是用 python2 脚本编写。以 lab-0 为例稍微介绍其整体的架构设计：</p><ul><li><code>RAEDME</code>：实验说明</li><li><code>Makefile</code>：通过 <code>make</code> 完成实验的编译、运行与测试</li><li><code>*.c, *.h</code>：lab源码 ⭐</li><li><code>qtest</code>：脚本驱动的测试框架，值得一读 ⭐</li></ul><p>其中 <code>console.c</code> 实现了一个精巧的可交互命令行，并集成一些用于 lab 的指令。<code>qtest</code> 集成了前者和一些测试用例，它将评判你的代码是否通过多少case、以及获得多少得分。</p><p><strong>通过实验，读懂实验框架代码，这两件事都很重要！</strong></p><h2 id="Lab0-c-programing">Lab0 - c programing</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;CS网课中的 “圣经”&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://luhao.wiki/categories/Linux/"/>
    
    <category term="Linux" scheme="http://luhao.wiki/categories/Linux/Linux/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【cpp】Constructors</title>
    <link href="http://luhao.wiki/posts/17P7469/"/>
    <id>http://luhao.wiki/posts/17P7469/</id>
    <published>2023-06-10T18:42:16.000Z</published>
    <updated>2023-07-04T17:03:58.353Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">提要</p><ul><li><a href="https://hackingcpp.com/cpp/lang/destructors.html">hackingcpp: destructors</a></li><li>面向一些基础使用，因此所涉比较浅</li></ul></div><h2 id="基础">基础</h2><p><code>cpp</code> 有 3 种特殊的成员函数，本文所有的内容都围绕它们展开：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">what</th><th style="text-align:center">when</th></tr></thead><tbody><tr><td style="text-align:left"><code>T::T()</code></td><td style="text-align:center">默认<u class="green">构造</u>函数</td><td style="text-align:center"><code>T</code>创建时</td></tr><tr><td style="text-align:left"><code>T::~T()</code></td><td style="text-align:center">默认<u class="green">析构</u>函数</td><td style="text-align:center"><code>T</code>销毁时</td></tr><tr><td style="text-align:left"><code>T::T(param…)</code></td><td style="text-align:center">特殊<u class="green">构造</u>函数</td><td style="text-align:center"><code>T</code>带参数创建时</td></tr></tbody></table><p>即使用户不去声明 构造 和 析构 函数，编译器也会<strong>自行创建者两者</strong>。</p><p>构造函数的调用时机很容易理解，但<strong>析构函数的调用时机</strong>很特殊。</p><ul><li><p>显式地销毁对象</p></li><li><p>隐式地被销毁，如局部变量的作用域结束</p></li></ul><pre><code class="language-c++">if (...) {    T x;  // constructor}  // destructor</code></pre><h2 id="Constructor">Constructor</h2><p>构造函数根据构造的类型，又分为如下几类：</p><pre><code class="language-c++">class Test{public:    Test(int a);  // 构造函数    Test(const Test&amp;);  // 拷贝构造函数    Test&amp; operator=(const Test&amp;);  // 拷贝赋值operator    Test();   // 构造函数    ~Test();  // 析构函数}</code></pre><p>考虑如下两个初始化的用法，才能看出调用构造函数的区别：</p><ul><li><code>Test t1(88);</code>：普通构造函数</li><li><code>Test t1 = t2;</code>：拷贝构造函数</li><li><code>Test t1; t1 = t2;</code>：拷贝赋值operator</li></ul><div class="admonition warning"><p class="admonition-title">C++11 delete</p><ul><li>申明为 <code>Test(const Test&amp;) = delete;</code> 可以禁止用户使用拷贝构造函数</li><li>此时如果调用，会有编译报错：<u class="error"><code>error: use of deleted function ‘Test::Test(const Test&amp;)’</code></u></li></ul></div><h2 id="Destructor">Destructor</h2><p>析构函数的调用顺序是编译器严格限制的，即<strong>析构顺序与声明顺序相反</strong>。</p><p>对于如下的结构体 <code>Test</code>，当对象发生销毁时，执行析构的顺序依次是：</p><ul><li><code>Test -&gt; t3 -&gt; t2 -&gt; t1</code></li></ul><pre><code class="language-c++">class Test {    T1 t1;    T2 t2;    T3 t3;public:    Test();    ~Test();}</code></pre><h2 id="RAII">RAII</h2><blockquote><p><em>Resource Acquisition Is Initialization</em></p></blockquote><p>这条 <a href="https://stackoverflow.com/questions/2321511/what-is-meant-by-resource-acquisition-is-initialization-raii">stackoverflow</a> 认为<code>RAII</code>应该称作<code>Scope-Bound Resouce Managerment</code>，这样更容易理解，笔者深表赞同，因此下面也围绕这个理解展开。</p><p><strong>Resource</strong></p><p>首先理解什么是 <code>Resource</code>? 可以理解为任何需要被合理控制的c++对象</p><ul><li><em>file handles</em></li><li><em>thread</em></li><li><em>lock</em></li><li>…</li></ul><p>对于任何一个resouce，它的生命周期会经历 <u class="black"><strong>创建 -&gt; 使用 -&gt; 销毁</strong></u> 三个阶段。而销毁往往最容易被忽视，这会引起内存泄漏等问题。</p><p><strong>Scope-Bound</strong></p><p><code>Scope</code>是指一个resource的作用域，当其离开作用域时，应该自动调用其析构函数以使其销毁。</p><div class="admonition note"><p class="admonition-title">总结</p><ul><li><code>RAII</code> 是一种防止内存泄漏而进行自动析构的cpp特性</li></ul></div><h3 id="RAII应用">RAII应用</h3><p>一些 C Library 总是会成对出现一些功能性的函数，例如：</p><ul><li><code>gpulib_init</code>, <code>gpulib_finalize</code></li></ul><p>如果只调用了init函数，而忘记调用负责析构的后者，就会出现内存泄漏、资源hung-up等bug。<br>因此我们可以在cpp层通过 RAII 的理念将它们封装一层：</p><pre><code class="language-c++">#include &lt;gpulib.h&gt;class GPUContext {  int gpuid_;public:  explicit  GPUContext (int gpuid = 0): gpuid_{gpuid} {    gpulib_init(gpuid_);  }  ~GPUContext () {    gpulib_finalize(gpuid_);  }}</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;提要
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hackingcpp.com/cpp/lang/destructors.html&quot;&gt;hackingc</summary>
      
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2023下半年规划</title>
    <link href="http://luhao.wiki/posts/2023b/"/>
    <id>http://luhao.wiki/posts/2023b/</id>
    <published>2023-06-04T17:29:53.000Z</published>
    <updated>2023-07-02T17:32:33.845Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5ad6d2afefb7198b209fe4977e028c0a45a59416ff8b4c6b2a770db0969fb6b7">b3dc07a81f6459d120ce338ccca5504603780459e0306826441972681af56d62ee5e99a6b2a15c89d5fbc320a13f63ed9ba268edabaf6c1c008413d66883445c58b4a2e699e4db9148ef23f3cdb870ec629634ee078e07787bd698a1a7017441544b629e2ca45641055b5256dddc3850ef7b32f2b68d3790a725ce8ee1848b4e29139d82dc7e412ad454c07aa205233a72745362d1b46e637326d420e4ac5e28b017b61b1e296a78ef19174eaf108459d882e5566ca8f8f60623de7fad8d11de55ac7a485bf7431c027be922ed67691382f46e870981bfa2d5f44c37647e9f884f2c949ff8f74e5fa4d637bdc965636ed0230500af093bd31a7b09acf2445adb8794690deae28484535dfdb43f905e86f1f116f0169e8c1fc959c8cdc8f536d29b45e0055f060e277960438f3b7441e4433b8e2b0b25e0c1c984a9b970f79be5c299c53e9f5649de409de0e9c8271ac72737be89130de7d9f651119ab27e5db8285e6066a31d7b630681769a831d8ad44976a85e28a763b4e128e8b541d4187fe92bdc1db792ded7ac589105fac7f2d847e01e1a2a4f54a7b50fa605979ec03db403e8432e439bde891e8575497cc028b90ff9967d7c5a4e51231b481d54100f0f49e9eafc22bf6070256368edfd9e80e8eaae554fac1e4dc028ae0ec799eb5c80e216caa6c3f06ae212a2de09fde666bfce2ff1ae39b5f753fa6f722c992264a9f8bbb82603edd5a61c84689807651cd2b4fa3812b5ef1982f38218ad31356ef99d08a8f3e5e8069f2c48a3864b0499f63ca27a676d7ad8089a797e38568f0a2e60875fdfdff9a9813a2e24560409b37a74c85423a365c22bf5e0262103c19fd3f667d5eb714f4b17943e60f8cd8dad7a7c14c6e17a526e8041bdae0864275362abbba630ef5e20682316f46bcc966a9c5b5c08f4d13db6cbbdbdc23f94c8ccbdc7e8cdce295e4381a2387e1675f6f26e0f84d21885f20305a38627f08d9da4f097ea97f397a29d08d036028c17b02d814a93e10b4ce986d5f9545249c862232716e338558bef5f9cb6e03563a6117d2cd4b05e4d0ea69e74900d0888a77992803d2fe867bbbd8d35829d3967674985d86210dc708671af58944f35f55c72c87b99dee5e945a0a4c714b5a600df617c46c4fcc387ba53069c94ca358e3e05ebde3ef3e7465ce81502a9a293767f7545fec1670b65a2b4c858ca953f7a9927a949c5075fa4c767ac4bae50c6f664353188769a91753832bda2c48c55367b24f51fc00f5f0d5ebbd24ca0d1e9eff7c36672627e532ac922b6b17698ed3c8176e93c831483345bf2e1340692a30ae173ae831c2d6ac107c693035e46683c3735b8d91010f0ddc1e6de3c4288f496777a19854ce345a2273b425beafef1cedd667d39266596df6b98c83419cd5b436407cb907440a2294d6c18f7d86d28b8072e59ca77c0039c9a5938497ee0b968058941a661c3b5d93ab526aac4928eabf6ad60b05d03f53a2bcdbe11e5b23dfafea2b23760dd55482150edfbb3ef432b4effef8a06549a0ed932dafe811ef759353f322d807b842859fefc44d2aed655b9b55e9340d9278294f2e134ad575f1074d49e4af96ebe454f79e4ca4396181ceef5c615917c7ecf8e52771575aa53c05b203b1c3b16c4b7040e793de862c05c1707ba034106e298212f0349cfb9aad6fadb10443751170e06740928ab1606be451bd97035837cb6885f82ed469848f9334fd2cb32a05ecfacf7a5baca7886a6542cddb6464a0a427e44dca92b1ab6ac7f632bfdf5c4d7dbd8e0f93ea517304f429e70f536195401fed361c7a07ad7b3629ef4a5aa4101107b073c05f8c35d0c8abf16eb72dbe474d328665083f0b52747121670fa748c3c1951794891d5b652b192159d136e1e43832b5ea121419a787bc92fb73b9d3848c1f73a3b80edee37f89e80d07986ed22f3140361aa3e0ee0fec8a33ff85a4bfd2f9fcf77e2748eb87cbc66490fca13b88b4b1ffdd0e7792e5e0b606ec1bfae5dc1c818d743c676ce9c763615dd8960af348ed38cfc8ba9ecb4431ccf27042b3c7f5a47257c1b5fc42a200aefc8a60ee912f4e4efb486f76fc2d87c8cfa07314c07742b47ebaf42dfe58ce9c0a645891bcb9dc290586604d3aea79a2edcc9b417fc112f5fd935d0aa02b31303ea0326bfe61d23691bc8ed86f70c7fda9fa17aba0df566270a6b860b88482e2c0c3efd0c00dfa0cb636ae3864651f530189243678fa47b68a364619b9abf60bdb709fc20fc61f833ed491b3bb4b183a17249ee02758690bab5108d23905b34dad12fe849f212d8ddfc63aa96a6398bb098d97896ab2c14e4e7e87ebbb335095cb0f51fa42caf40491dca2a4474d65be639f0541ccb31b98f0f9ca4ec46653976fe720d270fb9a897a9b9593de395594534b386fb12effcfdb9bbf47059cd0d721d5b25429c0d40d5a18bd4ed97018fa631d2f85b064e669f6e110afddcbbfc728bba71c552d4060fdd139a4bdb34bd1fa8a186f1f629732f87b16f3e1d681a7a69ada7982d05917d7ccfbfcd6f93d2aee2e847cca0d38351a9592f6f3a9c3890e7725bf1d4b1e7128373e3e52d96f2d252257810abf2545fd97c1b7be94354bc8fcbaf086d049f1540f1ce3590f64105aa860fb7193b564c92e2fd68a58849eeb58086bd56296278de44f061b35b5d8846354eca55f8b562e167604eb3b1091db2eb9aa196c24abf499e68a7047577ad8d1d10197266b5091e53f6dc62e396a4121085871544758b971334c402de3e34bad6955bb24fbaa4462883cc2f2891e1387623035fe28d8788fbb9aa876341d4787cd297008cb91b98822842ddccb6afe40f215fa82c3db5389e9546ce26b35ed93ec53c676ec2c0682784afab188226cb3287bec11de7e8998faa95f986c566f48d9fc69cbb7d1da22b3c3ddebab8e61a6a215813aa40f66087b60bf9ce9ad7cdeccd27d912603731838144edcd45cc4dbd63385ba8fd522ad2f7f2ff6b97a0226c1b3c85f5ecb699da99301357018bf6338f6d446b04145232d48f4b8ec2aa01d774d4a4bb87c7df0bce711f871931ab062010ce39a3d4b69a8ce8b0034f8c4817e87a53f9d688fb038149f0ccc2c63ebb1cc1a628c4337a6b659be302117c5904106b7b81bee55ff44d321deb37f838770e0b5bcdca15bc8faecd2275e9329eb1ec28999830ce8ccb107df5c9f61fb82a1080abf31f22cdd03da8e5b2299340788ae74b6f35f2a712ea42cd233950fac696ab36e2417d231aa68e974c7c0ec1e6c5d39de0a79377163e6beba4b268441fac25afd73029f5b4537f68462bfd8a1d24b2068b31007c625bd824c987c62fa8cf068519ac3cd01d21ac386d3b526a702cce32edcd1c7cf2185f577d6dd88861381575bc4fdbd83a6109f3ccd61138ba380b187d0de84187f83bdcab181e96f4b3249a1bdcb93b983157485df76d142d3269cd12bf90da45a459c5d6848d18c5511b2656b9566b243c9564f3149c8d5ca2984b08d7a9d5f8a7835774ebba0f6c899f5fc9caa59ef846feac58120548d011aa025ac7355cfa6a557b5ffd0b36d85b938958ae58acbe436968a6e59e67785c1b64bbe75b410cc67d8b91bb488c2c7bf94b3037eb54ca446eef8265f26eb221e2485dc7615cf19ff4b8adbcb20cb4a398a9db527db402914b40962fe0eb71a4990590c4d7d5718467443edaa28d67e5e5720d825b7362b442c55ad237691cb76530804e921cfe846f065daa9552127983b35088abc52b06f2c170eb13559aa04afa159adbb7dd112e7bdc5a8fe9377871740c0df67ac49bc858e8b730c199238aaf6fdb27c28e600c76cfffe2ee9ab8178d38482761fbeb761c00271cab0718768c94d2ada3e4dc0e1ac9f0f947e75eeae9d18460f4289a9ae77e609ae5f2335d584db1147d933e37fd5b46527fad6f933f1f2bede9ec7a0fe92db07687b0acfd17f246eb69a0d8f06a59bd290312de57cb979c7e0c9ac8babcfb1714b117d2d0d54dacf180900b20268bcc87c155837ade2b6d09aa4c2b93c7a6c33da45ce16c6f0c9e8f0f4f0c856cb83720456771c602d03f68fb350c684b6e368aa09f5909d6a2ac733b22a9c3435e18d3f6e8346aab22c21560b456a3e4cdcfe1fac6176aa2fa2f7111fc5379eddb381e68ec2c328cdd67b87b0bfff6079cd17c20916de8caa6ce482f2c5609828debdf5345f8bf1f8e0e6b918821d61ba6f99169e0eda39babfdb9dcd1cb36b7041a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>【vscode】如何配置断点调试</title>
    <link href="http://luhao.wiki/posts/1RVNF84/"/>
    <id>http://luhao.wiki/posts/1RVNF84/</id>
    <published>2023-06-03T16:50:52.000Z</published>
    <updated>2023-06-18T13:12:53.656Z</updated>
    
    <content type="html"><![CDATA[<p>包含<code>python、cpp、ts/js</code>等调试<span id="more"></span></p><div class="admonition note"><p class="admonition-title">概要</p><ul><li><a href="https://code.visualstudio.com/docs/editor/debugging">vscode debug 官方文档</a></li><li>附一张日常开发调试用的 vscode调试面板 截图<img src="/images/vscode-debug.png" alt=""></li></ul></div><h2 id="环境配置">环境配置</h2><p>vscode 虽然是一款轻量级编辑器（相比于Visual Studio、pycharm），但只要搭配正确的插件使用，依然可以轻松拥有 <code>IDE</code> 的断点debug功能。</p><h3 id="launch-json">launch.json</h3><p>vscode 的调试配置都写在 <code>launch.json</code> 文件中，它的位置是在 <code>.vscode</code> 目录下。如下是一个最简单的 python debug 配置：</p><pre><code class="language-xml">{    "version": "0.2.0",    "configurations": [        {            "type": "python",            "request": "launch",            "name": "Python: debug",        }    ]}</code></pre><p>常见字段的含义和配置方法如下：</p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">作用</th><th style="text-align:center">必选</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">调试语言，需要安装对应的<code>debug extension</code></td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">支持 <code>launch</code> 和 <code>attach</code> 两种模式</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left">name</td><td style="text-align:left">调试选项中展示的名称</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left">program</td><td style="text-align:left">调试的目标文件，如 <code>main.py</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">args</td><td style="text-align:left">参数，格式为 <code>["1", "2"]</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">env</td><td style="text-align:left">环境变量</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">cwd</td><td style="text-align:left">设置工作目录</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">port</td><td style="text-align:left">attach模式指定端口</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">console</td><td style="text-align:left">使用哪种终端: <br><code>internalConsole</code>, <code>integratedTerminal</code>, <code>externalTerminal</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">preLaunchTask</td><td style="text-align:left">debug之前运行指定Task</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">postDebugTask</td><td style="text-align:left">debug之后运行指定Task</td><td style="text-align:center"></td></tr></tbody></table><p>一些常用的环境变量：</p><ul><li><code>${file}</code>：表示正在打开的文件</li><li><code>${workspaceFolder}</code>：表示 <code>workspace</code> 的根目录</li></ul><h2 id="python">python</h2><p>python一般选择调试当前文件，要注意工作目录是否正确。</p><pre><code>{    "name": "Python: 调试当前文件",    "type": "python",    "request": "launch",    "program": "${file}",}</code></pre><div class="admonition warning"><p class="admonition-title">python2调试</p><ul><li>新版的 <code>python extension</code> 往往不支持 python2 断点调试，需要回退到<code>2021</code>年左右的版本</li></ul></div><h2 id="cpp">cpp</h2><p><a href="https://code.visualstudio.com/docs/cpp/cpp-debug">官方文档: Debug C++ in VSCode</a></p><p>C/C++ 的断点调试略微复杂，需要分为两个步骤：</p><ul><li>使用 <code>gcc/g++</code> 将源码编译为 可执行文件（默认为<code>a.out</code>）</li><li>使用 <code>gdb</code> 调试 可执行文件</li></ul><h3 id="1-编译">1. 编译</h3><p>首先借助 vscode tasks 将cpp源码编译为可执行文件，配置如下：<br>详细可以阅读 <a href="https://code.visualstudio.com/docs/editor/tasks">官方文档：VSCode Tasks</a></p><pre><code class="language-xml">{    "tasks": [        {            "type": "cppbuild",            "label": "C/C++: gcc build",            "command": "/usr/bin/g++",            "args": [                "-g",                "${file}", // 编译的cpp文件                "-o",                "${workspaceFolder}/a.out" // 生成的可执行文件            ],            "options": {                "cwd": "${workspaceFolder}"            },            "problemMatcher": [                "$gcc"            ],        }    ],}</code></pre><p>配置 <code>tasks.json</code> 完毕后，可以通过 <code>ctrl+p</code> 输入 <code>Run Task</code> 并选中 <code>C/C++: gcc build</code>，可以将当前cpp源码编译为指定的 <code>a.out</code> 可执行文件。<br>后面的调试需要用到这个task。</p><h3 id="2-调试">2. 调试</h3><p>接下来配置 <code>launch.json</code> 以实现对上一步生成的 <code>a.out</code> 调试，配置如下：</p><pre><code class="language-xml">{    "name": "gcc/g++ debug",    "type": "cppdbg",    "request": "launch",    "program": "${workspaceFolder}/a.out", // 需要调试的二进制文件    "args": [],    "stopAtEntry": false,    "cwd": "${workspaceFolder}",    "environment": [],    "externalConsole": false,    "MIMode": "gdb",    "setupCommands": [        {            "description": "Enable pretty-printing for gdb",            "text": "-enable-pretty-printing",            "ignoreFailures": true        }    ],    "preLaunchTask": "C/C++: gcc build",    "miDebuggerPath": "/usr/bin/gdb"}</code></pre><p>其中的 <code>preLaunchTask</code> 会在按下 <code>f5</code> 调试按钮后，先行运行指定的Task，即编译指定的cpp源码文件，然后调用 linux下的 <code>/usr/bin/gdb</code> 对可执行文件进行调试。</p><h2 id="Node-js">Node.js</h2><p>vscode 对于 <code>js/ts</code> 的开发生态支持度非常高（毕竟vscode插件都是基于<code>typescript</code>所开发的）</p><pre><code class="language-xml">{    "type": "node",    "request": "launch",    "name": "JS/TS debug",    "skipFiles": [        "&lt;node_internals&gt;/**"    ],    "program": "${file}"}</code></pre><h2 id="others">others</h2><div class="admonition warning"><p class="admonition-title">其他语言用到时再补充</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;包含&lt;code&gt;python、cpp、ts/js&lt;/code&gt;等调试&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/"/>
    
    <category term="VSCode" scheme="http://luhao.wiki/categories/VSCode/VSCode/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【cpp】pointers</title>
    <link href="http://luhao.wiki/posts/pointer/"/>
    <id>http://luhao.wiki/posts/pointer/</id>
    <published>2023-06-03T14:58:55.000Z</published>
    <updated>2023-07-01T17:10:50.499Z</updated>
    
    <content type="html"><![CDATA[<p>cpp指针、地址、引用相关<span id="more"></span></p><div class="admonition note"><p class="admonition-title">概要</p><ul><li>指针是C++学习中绕不过去的难题，需要对计算机内存有深入的理解。</li><li><a href="https://hackingcpp.com/cpp/lang/pointers.html">hacking C++ Pointers</a></li><li><a href="http://alumni.cs.ucr.edu/~pdiloren/C++_Pointers/">Learning C++ Pointers for REAL Dummies</a></li><li><font color="#FF1E10"><strong>todo: unique_ptr, shared_ptr ...</strong></font></li></ul></div><h2 id="When">When</h2><p>任何一门技术（或者概念），都是服务于具体的需求，或者在特定的需求场景下，才会诞生。<br>C++的指针也不例外，它的出现是为了满足如下三个常见的场景：</p><ul><li><p><strong>持有（任意的）对象</strong><br>在避免 copy 的情况下持有对象，这是 cpp 最重要的语言特性之一，通过指针可以实现对象的引用。</p></li><li><p><strong>访问动态内存</strong><br>这块暂时没理解，todo…</p></li><li><p><strong>创建某些动态的数据结构</strong><br>如 vector，链表，树等结构。</p></li></ul><h2 id="What">What</h2><blockquote><p>Pointer to Object of type <code>T</code>，which stores a memory address.</p></blockquote><p>指针<strong>永远指向一个具体的对象</strong>（任意类型<code>T</code>），也可以是空对象（<code>nullptr</code>）。<br>指针的<strong>本质是一个内存地址</strong>，这个地址在 x64 的机器上占 64 Bits，即 <code>usigned int64</code>。<br>指针的生命周期，和它所指向对象的生命周期，两者是相互独立的。</p><div class="admonition todo"><p class="admonition-title">TODO: 通常说的 “指针” 是指c++默认指针，不包括如下（有空补充）</p><ul><li><code>std::unique_pointer</code></li><li><code>std::shared_pointer</code></li><li><code>std::weak_pointer</code></li></ul></div><h2 id="Operators">Operators</h2><p>C++有三个操作符与指针相关，分别是 <code>&amp;</code>、<code>*</code>、<code>-&gt;</code>，需要区分其不同的使用场景和含义。</p><h3 id="Address"><code>&amp;</code>: Address</h3><p><code>&amp;</code> 的含义是<strong>取地址</strong>，<code>&amp;a</code> 会<strong>返回对象a的地址</strong>。</p><p><img src="/images/cpp-address.png" alt=""></p><h3 id="Dereference"><code>*</code>: Dereference</h3><p><code>*</code> 的含义是<strong>解引用</strong>，该操作符后面会跟随一个地址，<code>*p</code>会<strong>返回地址p上的值</strong>。</p><p><img src="/images/cpp-pointer.png" alt=""></p><h3 id="Member-Access"><code>-&gt;</code>: Member Access</h3><p><code>-&gt;</code> 的作用是<strong>访问类成员</strong>，准确说是访问一段地址上的某个成员属性，经常会和 <code>.</code> 使用混淆。</p><ul><li>对于指针类型，使用 <code>-&gt;</code></li><li>对于具体的对象，使用 <code>.</code></li></ul><p><img src="/images/cpp-access.png" alt=""></p><h3 id="和-的区别"><code>&amp;</code> 和 <code>*</code> 的区别</h3><p>作为不同的操作数有不同用法，区别如下：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><code>*</code></th><th style="text-align:center"><code>&amp;</code></th></tr></thead><tbody><tr><td style="text-align:center">声明符</td><td style="text-align:center">定义指针: <code>int *p = nullptr</code></td><td style="text-align:center">定义引用: <code>int &amp;a = b</code></td></tr><tr><td style="text-align:center">一元操作符</td><td style="text-align:center">解引用: <code>char a = *p</code></td><td style="text-align:center">取地址: <code>auto p = &amp;a</code></td></tr><tr><td style="text-align:center">二元操作符</td><td style="text-align:center">乘法运算: <code>a * b</code></td><td style="text-align:center">与运算: <code>a &amp; b</code></td></tr></tbody></table><div class="admonition warning"><p class="admonition-title">不要在单行申明多个指针</p><ul><li><u class="error"><code>int *a, b</code></u>：容易产生歧义，建议多行申明</li></ul></div><h3 id="pointer-to-pointer-⭐"><code>**</code>: pointer to pointer ⭐</h3><pre><code class="language-c++">int   v = 5;int*  p = &amp;v;  // 指向intint** pp = &amp;p  // 指向int*</code></pre><h2 id="nullptr-C-11">nullptr (C++11)</h2><blockquote><p>nullptr is a special pointer value</p></blockquote><p><code>NULL</code> 完全等同于0，<code>nullptr</code> 本质是一个空指针对象，注意两者的区别！<br>作为规范，<code>nullptr</code> 通常代表 <strong>无法访问的变量</strong>（value not available）</p><div class="admonition note"><p class="admonition-title">nullptr 编码规范</p><ul><li>指针初始化时，赋值为nullptr：<code>int *p = nullptr</code></li><li>解引用时，检查该指针是否为nullptr：<code>if (p != nullptr) { *p = 8; }</code></li></ul></div><h2 id="const-pointer">const pointer</h2><blockquote><p>Read-only and preventing pointer redirection.</p></blockquote><p><code>const</code> 搭配指针会产生奇妙的化学反应，一共有如下四种情形：<br>牢记口诀：<strong><code>const</code> 左边的永远是不可变的。</strong></p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">指向的对象 可修改?</th><th style="text-align:center">指针自身 可修改?</th></tr></thead><tbody><tr><td style="text-align:left"><code>int *</code></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"><code>int const *</code></td><td style="text-align:center">❌</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"><code>int * const</code></td><td style="text-align:center">✔</td><td style="text-align:center">❌</td></tr><tr><td style="text-align:left"><code>int const * const</code></td><td style="text-align:center">❌</td><td style="text-align:center">❌</td></tr></tbody></table><p>下面看一段代码示例：</p><pre><code class="language-c++">int i = 5;int j = 8;int const* cp = &amp;i;*cp = 8;   //  ❌ COMPILER ERROR: pointed-to value is constcp = &amp;j;   //  ✔int *const pc = &amp;i;*pc = 8;   //  ✔pc = &amp;j;   //  ❌ COMPILER ERROR: pointer itself is constint const*const cpc = &amp;i;*cpc = 8;  //  ❌ COMPILER ERROR: pointed-to value is constcpc = &amp;j;  //  ❌ COMPILER ERROR: pointer itself is const</code></pre><h2 id="this-pointer">this pointer</h2><p><code>this</code> 仅在类内部使用，<strong>本质是一个指针</strong>。</p><ul><li><p><code>this</code> 返回类对象的地址</p></li><li><p><code>*this</code> 访问类自身</p></li><li><p><code>this-&gt;</code> 用来访问内部的成员</p></li></ul><h2 id="Memory">Memory</h2><p>接下来从 <strong>内存分配</strong> 的视角，理解指针在计算机内的存储，以及指针运算符做了什么。</p><ul><li><p>根据内存对齐，<code>char</code> 和 <code>short</code> 在内存中都占据 4 bytes</p></li><li><p>指针的本质，就是第一个byte的16位地址（因此 <code>sizeof(p) = 2</code>）</p></li></ul><p><img src="/images/pointer-memory.png" alt=""></p><ul><li><p>下图演示指针的<code>++</code>，会根据指向对象的内存大小而进行偏移</p></li><li><p><code>pointer += 2</code> 或者 <code>pointer --</code> 也是同样道理</p></li><li><p><code>pointer[3]</code> 等价于 <code>pointer += 3</code> 后的取值</p></li></ul><p><img src="/images/pointer-memory-add.png" alt=""></p><h2 id="⚠️-Warning">⚠️ Warning</h2><p>指针使用经常会出现如下几种错误：</p><h3 id="1-dangling-pointer">1. dangling pointer</h3><blockquote><p><em><strong>dangling</strong></em>： pointer points to an invalid/inaccessible memory address</p></blockquote><p>永远确保 <strong>指针指向的对象是合理的</strong>，否则出现 悬空指针（迷途指针）。</p><ul><li>error 1：访问 未初始化的对象</li></ul><pre><code class="language-c++">int *p; // p not initialized!*p = 7; // ❌</code></pre><ul><li>error 2：访问 nullptr</li></ul><pre><code class="language-c++">int *p = nullptr;*p = 7; // ❌</code></pre><ul><li>error 3：指向 无法访问的内存<br><code>p = 0x0000001</code>，这是运行程序无法访问的内存段，运行时会报错。</li></ul><h3 id="2-pointer-argument-passing">2. pointer argument passing</h3><p>当函数的参数定义为指针时，注意传入的参数，不能是一个非法的指针。</p><pre><code class="language-c++">void swap_values (int* a, int* b) {  int t = *a;  *a = *b;  *b = t;}int x = 3, y = 4;swap_values(&amp;x, &amp;y)        // ✔swap_values(&amp;x, 0);        // ❌ UNDEFINED BEHAVIORswap_values(&amp;x, nullptr);  // ❌ UNDEFINED BEHAVIOR</code></pre><h3 id="3-hard-code">3. hard code</h3><p>通过合理的编码，区分 <code>*</code> 的频繁使用，尤其是乘法和指针混合使用的场景。</p><p><code>*p = *p * *p + (2 * *p + 1);   // SO MANY STARS!</code></p><h2 id="指针习题">指针习题</h2><p>当你以为入门了cpp指针，尝试解答下面的题目，常看常新：</p><ul><li>已知如下的地址和取值，问如下输出</li></ul><pre><code class="language-c++">cout &lt;&lt; v;cout &lt;&lt; p;cout &lt;&lt; pp;cout &lt;&lt; &amp;v;cout &lt;&lt; &amp;p;cout &lt;&lt; &amp;pp;cout &lt;&lt; *v;cout &lt;&lt; *p;cout &lt;&lt; **pp;</code></pre><p><img src="/images/pointer-question.png" alt=""></p><h3 id="解析如下："><strong>解析如下：</strong></h3><ul><li><p><code>cout &lt;&lt; v</code>：5</p></li><li><p><code>cout &lt;&lt; p</code>：0x44</p></li><li><p><code>cout &lt;&lt; pp</code>：0x48</p></li><li><p><code>cout &lt;&lt; &amp;v</code>：0x40 (=p)</p></li><li><p><code>cout &lt;&lt; &amp;p</code>：0x44 (=pp)</p></li><li><p><code>cout &lt;&lt; &amp;pp</code>：0x48</p></li><li><p><code>cout &lt;&lt; *p</code>：5</p></li><li><p><code>cout &lt;&lt; *pp</code>：0x40 (=p)</p></li><li><p><code>cout &lt;&lt; **pp</code>：5</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;cpp指针、地址、引用相关&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Compiler" scheme="http://luhao.wiki/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>hackingcpp.com</title>
    <link href="http://luhao.wiki/posts/1GTNS16/"/>
    <id>http://luhao.wiki/posts/1GTNS16/</id>
    <published>2023-05-31T17:20:56.000Z</published>
    <updated>2023-06-18T13:12:53.652Z</updated>
    
    <content type="html"><![CDATA[<p><code>hackingcpp</code> 网站的学习记录<span id="more"></span></p><div class="admonition note"><p class="admonition-title">背景</p><ul><li><a href="https://hackingcpp.com/"><em><strong>hackingcpp</strong></em></a> 是一个偶然发现的优秀C++学习网站，开这篇记录学习过程。</li><li><a href="/posts/142JHJQ/">pointers</a></li><li><a href="/posts/10R6MRC/">constructors &amp; destructors</a></li></ul></div><h2 id="Environment">Environment</h2><h3 id="ISO-Standard-C">ISO Standard C++</h3><p>C++语言标准，前后经历如下几个大的版本。大学教程所传授的C++基本是围绕 98 展开，工作中使用的 “现代C++特性” 基本也不出 11。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">时间</th><th style="text-align:left">特性</th></tr></thead><tbody><tr><td style="text-align:center"><em>C++98</em></td><td style="text-align:center">1998</td><td style="text-align:left">the original standard</td></tr><tr><td style="text-align:center"><em>C++11</em></td><td style="text-align:center">2011</td><td style="text-align:left">almost a new language</td></tr><tr><td style="text-align:center"><em>C++14</em></td><td style="text-align:center">2014</td><td style="text-align:left">some improvements</td></tr><tr><td style="text-align:center"><em>C++17</em></td><td style="text-align:center">2017</td><td style="text-align:left">new features &amp; library extensions</td></tr><tr><td style="text-align:center"><em>C++20</em></td><td style="text-align:center">2020</td><td style="text-align:left">game-changing new features &amp; libraries</td></tr></tbody></table><h3 id="Compiler">Compiler</h3><p>主要有 gcc, clang, MSVC 三种主流的C编译器，其跨平台、兼容性、代码生成和优化都有所差异。不过 99% 的开发场景不需要考虑到 这三种编译器 之间的差异性。</p><p>看到一些资料，都会说 <strong>clang 的性能和内存都要优于 gcc</strong>，这里不了解所以不作为何描述。</p><ul><li><p><font color="#1A9BFF"><strong>gcc/g++</strong></font><br>GNU C++ 编译器，使用最为广泛。</p></li><li><p><font color="#1A9BFF"><strong>clang/clang++</strong></font><br>又称 LLVM，一般作为 Mac 默认的编译器，因为其同时支持 C、C++、Objective-C。<br>关于 gcc和clang的对比，推荐阅读该材料：<a href="https://opensource.apple.com/source/clang/clang-23/clang/tools/clang/www/comparison.html#:~:text=Clang%20is%20much%20faster%20and,does%20not%20support%20expressive%20diagnostics">Clang vs GCC</a></p></li><li><p><font color="#1A9BFF"><strong>MSVC</strong></font><br>Microsoft Visual C++ 是由微软开发的C++编译器及相关环境，只使用于 Windows。简单来说，这是 windows C++ 开发的 <s>唯一</s> 最好选择。</p></li></ul><h3 id="Running">Running</h3><p><code>g++ hello.cpp -o sayhello &amp;&amp; ./sayhello</code></p><p>C++是一门编译型的静态语言，（区别于 Python）其源代码是无法直接运行的，而是需要通过前面说的编译器 转换成二进制的机器代码。因此一个 <code>.cpp</code> 文件的执行需要经过如下几个步骤：</p><p><img src="/images/cpp-running.png" alt=""></p><h3 id="Compiler-Flags">Compiler Flags</h3><p><code>g++ -std=c++20 -Wall -Wextra -Wpedantic -Wshadow input.cpp -o output</code></p><p>需要掌握基本的 <a href="https://caiorss.github.io/C-Cpp-Notes/compiler-flags-options.html">C++编译选项</a>，如 Warnings、编译标准、优化等级 等。</p><table><thead><tr><th style="text-align:center">编译选项</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-std=c++20</code></td><td style="text-align:left">使用 <em>C++20</em> 标准编译</td></tr><tr><td style="text-align:center"><code>-Wall</code></td><td style="text-align:left">打开一系列的编译警告</td></tr><tr><td style="text-align:center"><code>-O0 </code></td><td style="text-align:left">优化选项，代表关闭所有优化</td></tr></tbody></table><p>当你在 windows  MSVC 开发时，借助 Visual Studio 可以在 “属性页” 查看和编辑所有的优化选项。它实际上是提供了一个可配置的GUI框。</p><h2 id="Variables">Variables</h2><p>最基本的变量申明方式有两种：</p><ul><li><code>type var = value</code>: 通用写法</li><li><code>type var {value}</code>: <em>C++11</em> 标准</li></ul><div class="admonition warning"><p class="admonition-title">undefined behavior</p><ul><li>时刻牢记初始化变量，这样能避免很多类似Bug</li></ul></div><p>注意 <code>a++</code> 和 <code>++a</code> 的区别，在合适的场景使用两者：</p><ul><li><code>a++</code>：返回旧值</li><li><code>++a</code>：返回新值</li></ul><h3 id="Type-Narrowing">Type Narrowing</h3><ul><li>低精度 向 高精度 转换：OK</li><li>高精度 向 低精度 转换：NARROWING，有信息丢失</li></ul><h3 id="Control-flows">Control flows</h3><div class="admonition note"><p class="admonition-title">if (statement; condition) {...}</p><ul><li><code>C++17</code> 允许这样的写法: <code>if ( int x = 5; x &gt; 0) { ... }</code></li><li><code>switch</code> 同理</li></ul></div><h3 id="using">using</h3><p>使用 <code>using</code> 代替 <code>typedef</code>，用来作类型的赋值，例如：</p><ul><li><p><code>using real = double</code></p></li><li><p><code>usning int_vector = std::vector&lt;int&gt;</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;hackingcpp&lt;/code&gt; 网站的学习记录&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/"/>
    
    <category term="C++" scheme="http://luhao.wiki/categories/C/C/"/>
    
    
    <category term="C++" scheme="http://luhao.wiki/tags/C/"/>
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="Compiler" scheme="http://luhao.wiki/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>【日志】2023年6月</title>
    <link href="http://luhao.wiki/posts/2023/6/"/>
    <id>http://luhao.wiki/posts/2023/6/</id>
    <published>2023-05-31T17:12:32.000Z</published>
    <updated>2023-07-04T17:05:19.449Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="568f2c6f963b638802ea5ca1d7ff7ed9227142916b2e6c1968eff1e3822a512f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Oh, this is an invalid password. Check and try again, please.&quot; data-whm=&quot;OOP</summary>
      
    
    
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    <category term="个人日志" scheme="http://luhao.wiki/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【selenium】自动秒杀脚本</title>
    <link href="http://luhao.wiki/posts/3R1HHH2/"/>
    <id>http://luhao.wiki/posts/3R1HHH2/</id>
    <published>2023-05-29T16:06:36.000Z</published>
    <updated>2023-06-18T13:12:53.656Z</updated>
    
    <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li>借助 <code>Python + Selenium</code> 实现 <code>taobao</code> 购物车自动秒杀</li></ul></div><div class="admonition error"><p class="admonition-title">TODO</p><ul><li>增加定时秒杀的功能</li><li><code>time.sleep</code>的时间把控（短则逻辑错误，长则秒杀失败...）</li><li>实测，实战</li></ul></div><h3 id="环境">环境</h3><p>下面以 windows 环境为例，因为高度依赖 chrome ui 界面操作，linux 暂且按下不表</p><ul><li><p><code>pip3 install selenium</code>，直接下载最新的 <code>selenium</code> 库</p></li><li><p><code>chrome://version/</code>，在 <code>chrome</code> 浏览器输入 以查看当前版本</p></li><li><p><a href="https://registry.npmmirror.com/binary.html?path=chromedriver/"><code>mirrors/chromedriver/</code></a>，下载对应版本的 <code>chromedriver.exe</code></p></li></ul><h3 id="访问网页">访问网页</h3><p>只需要掌握 <code>webdriver</code> 的几个核心接口：<code>Chrome</code>、<code>ChromeOptions</code>、<code>find_element</code></p><ul><li><code>options = webdriver.ChromeOptions()</code><br>创建一个 chrome 的配置项，实际用途是避开反爬虫的js检测。<br>具体代码如下，复制粘贴即可：</li></ul><pre><code class="language-python">options.add_experimental_option('excludeSwitches', ['enable-automation'])options.add_argument("--disable-blink-features=AutomationControlled")</code></pre><ul><li><p><code>driver = webdriver.Chrome(executable_path='./chromedriver.exe', options=options)</code><br>创建一个 chrome 的自动化示例，它会唤起一个谷歌浏览器，但是又不同于正常打开的 <code>chrome.exe</code>。<br>注意，需要传入对应版本的 <code>chromedriver.exe</code> 的路径。</p></li><li><p><code>driver.get('https://cart.taobao.com/cart.htm')</code><br>利用 chrome 访问指定的网页</p></li><li><p><code>driver.find_element('id', 'xxx')</code><br>根据html、css规则，查找指定的对象。<br>可选的参数有 <code>id</code>、<code>xpath</code>、<code>name</code>…<br>注意，旧版的方法是 <code>find_element_by_id</code>…</p></li></ul><h3 id="自动登录">自动登录</h3><p>前面访问的网页是 <a href="https://cart.taobao.com/cart.htm">cart.taobao.com/cart.htm</a>，如果浏览器没有对应的缓存，则会自动跳转到登录界面。<br>这时候需要借助 <code>find_element</code> 实现自动登录与跳转。</p><table><thead><tr><th style="text-align:center">find_element</th><th style="text-align:center">Arg1</th><th style="text-align:center">Arg2</th></tr></thead><tbody><tr><td style="text-align:center">用户名</td><td style="text-align:center">name</td><td style="text-align:center">fm-login-id</td></tr><tr><td style="text-align:center">密码</td><td style="text-align:center">name</td><td style="text-align:center">fm-login-password</td></tr></tbody></table><p>代码示例为：</p><pre><code class="language-python"># 用户名input = driver.find_element('name', 'fm-login-id')input.clear() # 清空# time.sleep(0.2) # 防止过快input.send_keys('*******') # 输入您的用户名# 密码input = driver.find_element('name', 'fm-login-password')input.clear() # 清空# time.sleep(0.2) # 防止过快input.send_keys('*******') # 输入您的密码# 跳转driver.find_element("xpath", "//*[@id='login-form']/div[4]/button").click()</code></pre><h3 id="自动下单">自动下单</h3><div class="admonition note"><p class="admonition-title">某宝下单成功有三个步骤</p><ul><li>1.购物车中 “勾选商品”</li><li>2.点击 “结算” 按钮 （选中商品后，按钮才是可点击态）</li><li>3.点击 “提交订单” 按钮 （选择收货地址）</li></ul></div><table><thead><tr><th style="text-align:right">步骤</th><th style="text-align:right">Arg1</th><th style="text-align:right">Arg2</th></tr></thead><tbody><tr><td style="text-align:right">1. 勾选商品</td><td style="text-align:right"><code>id</code></td><td style="text-align:right"><code>J_SelectAll1</code></td></tr><tr><td style="text-align:right">2. 点击结算</td><td style="text-align:right"><code>id</code></td><td style="text-align:right"><code>J_Go</code></td></tr><tr><td style="text-align:right">3. 提交订单</td><td style="text-align:right"><code>link text</code></td><td style="text-align:right"><code>提交订单</code></td></tr></tbody></table><ul><li>勾选商品</li></ul><p>下面简化为购物车内的商品全选。</p><pre><code class="language-python">while 1:    try:        select_all = driver.find_element("id", 'J_SelectAll1')        if select_all:            select_all.click()            break    except:        print ('Retry: 全选商品')</code></pre><ul><li>点击结算</li></ul><pre><code class="language-python">while 1:    try:        buy = driver.find_element("id", 'J_Go')        if buy:            buy.click()            break    except:        print ('Retry: 点击结算')</code></pre><ul><li>提交订单</li></ul><pre><code class="language-python">while 1:    try:        a = driver.find_element("link text", "提交订单")        if a:            a.click()            break    except:        print ('Retry: 提交订单')</code></pre><h3 id="代码示例">代码示例</h3><pre><code class="language-python"># coding: utf-8import timefrom selenium import webdriverusername = ''password = ''TB_LOGIN_URL = 'https://cart.taobao.com/cart.htm'options = webdriver.ChromeOptions()options.add_experimental_option('excludeSwitches', ['enable-automation'])options.add_argument("--disable-blink-features=AutomationControlled")# exe path for chromedriver.exeexe_path = r'E:\chromedriver.exe'driver = webdriver.Chrome(executable_path=exe_path, options=options)driver.get(TB_LOGIN_URL)input = driver.find_element('name', 'fm-login-id')input.clear()driver.implicitly_wait(0.5)print ("Username:", username)input.send_keys(username)input = driver.find_element('name', 'fm-login-password')input.clear()driver.implicitly_wait(0.5)print ("password:", password)input.send_keys(password)driver.find_element("xpath", "//*[@id='login-form']/div[4]/button").click()time.sleep(0.2)# while 1:#     try:#         select_all = driver.find_element("id", 'J_SelectAll1')#         if select_all:#             select_all.click()#             break#     except:#         print ('Retry: 全选商品')# time.sleep(0.2)# while 1:#     try:#         buy = driver.find_element("id", 'J_Go')#         if buy:#             buy.click()#             break#     except:#         print ('Retry: 点击结算')# time.sleep(0.2)# while 1:#     try:#         a = driver.find_element("link text", "提交订单")#         if a:#             a.click()#             break#     except:#         print ('Retry: 提交订单')    assert(0)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;admonition note&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;概要
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;借助 &lt;code&gt;Python + Selenium&lt;/code&gt; 实现 &lt;code&gt;taobao&lt;/code&gt; 购物车自动秒杀&lt;/l</summary>
      
    
    
    
    <category term="Python" scheme="http://luhao.wiki/categories/Python/"/>
    
    <category term="Python" scheme="http://luhao.wiki/categories/Python/Python/"/>
    
    
    <category term="Python" scheme="http://luhao.wiki/tags/Python/"/>
    
    <category term="linux" scheme="http://luhao.wiki/tags/linux/"/>
    
  </entry>
  
</feed>
