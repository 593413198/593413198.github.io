<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode</title>
      <link href="/posts/leetcode/"/>
      <url>/posts/leetcode/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="52809598307c9d2d069360126ba1bfd3cd94bdee5ad874e6ba75288f4262f7d7">9f2b9e3585d2f45282fcbae6e5d2f979e1fcebfc392f5685d7a100c522052fdd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【SIGGRAPH23】Large Scale Terrain Rendering in Call of Duty</title>
      <link href="/posts/2JP3GCC/"/>
      <url>/posts/2JP3GCC/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/siggraph23-cod-ppt-demo.png" alt=""></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>这篇 SIGGRAPH 主要描述 COD 中的大规模地形渲染，并大量引用了之前GDC的技术分享</li><li>NETEASE WARNING: 已脱敏、与工作无关</li></ul></div><h3 id="技术参考">技术参考</h3><ul><li><a href="https://advances.realtimerendering.com/s2023/index.html#CODTerrain">SIGGRAPH 2023: Large Scale Terrain Rendering in Call of Duty</a></li><li><a href="https://research.activision.com/publications/2021/09/boots-on-the-ground--the-terrain-of-call-of-duty">GDC 2021: The Terrain of CoD</a></li><li><a href="https://www.gdcvault.com/play/1025480/Terrain-Rendering-in-Far-Cry">GDC 2018: Terrain Rendering in Far Cry 5</a></li><li><a href="https://www.gdcvault.com/play/1021761/Adaptive-Virtual-Texture-Rendering-in">GDC 2015: Adaptive Virtual Texture Rendering in Far Cry 4</a></li></ul><h3 id="大纲">大纲</h3><ul><li><a href="#Why-New-Terrain">Why New Terrain</a></li><li><a href="#Render-Process">Render Process</a></li><li>Virtual Texture</li><li>Color Remap</li><li>Displacement Decal</li><li>Cliff Shading</li><li>Stiching Fix</li><li>Summary</li></ul><h3 id="Why-New-Terrain">Why New Terrain</h3><p>作者阐述，之所需要开发新的地形系统，是因为传统的地形系统无法满足 现有的游戏需求（即策划不满意）。而传统地形主要有如下两个特征：</p><ol><li>地形范围小（如室内地面装饰）</li><li>依赖手动编辑（如魔兽争霸地图）</li></ol><p>作为对比，新的地形系统提出如下三个要求和挑战：</p><ol><li>Lerge-Scale（水平 + 垂直两个维度）   -&gt; 解决性能问题 runtime</li><li>画面多样性、细节保证                 -&gt; 解决表现问题 bugfix, tradeoff</li><li>依赖程序化生产                       -&gt; 解决工具问题 PCG</li></ol><p><img src="/images/siggraph23-cod-new-terrain.png" alt=""></p><h3 id="Render-Process">Render Process</h3><p>作者展示如何在forward管线下绘制一个朴素的地形：</p><ul><li><p>VS Input</p></li><li><p>VS Offset</p></li><li><p>PS Shading</p></li></ul><p><font color="#FF1E10"><strong>TODO</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>csv, hdf5, feather 三种数据性能对比</title>
      <link href="/posts/data-perf/"/>
      <url>/posts/data-perf/</url>
      
        <content type="html"><![CDATA[<p>用于量化金融数据，分析读、写、磁盘、内存性能<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="/posts/quant-data/">这篇blog</a> 介绍了金融相关的数据特性，它对于读写和存储性能有极高要求</li><li>本篇blog 会结合跑测数据，分析三种格式的性能</li></ul></div><h2 id="测试结论">测试结论</h2><p>结论放在最前面，测试数据见 <a href="#%E6%80%A7%E8%83%BD%E6%B1%87%E6%80%BB">文末</a></p><ul><li>数据量小，无脑使用 csv</li><li>数据量大，如果坚持 csv，请使用 <strong>zip</strong> 参数压缩（尽管这会降低读写速率）</li><li>百M级别以上数据，推荐使用 hdf5（而不是feather）<ul><li>性能强于 csv，<strong>读写快5~10倍</strong></li><li>hdf5 对于 Python/C++ 的API支持较好</li><li>feather 虽然性能更强，但限制更多 TODO</li></ul></li><li>切记！ <strong>此结论并不适用于所有类型的数据样本</strong>，最好自己针对性跑测，找到最适合自己数据的格式！<ul><li>对于期货 tick 数据（由于大量重复值），csv.zip 压缩比率能达到 15%，feather 能达到 30%</li></ul></li></ul><h2 id="基本介绍">基本介绍</h2><h3 id="csv"><a href="https://en.wikipedia.org/wiki/Comma-separated_values">csv</a></h3><p><code>csv</code> 全称是 <code>Comma-separated values</code>，<strong>即以逗号分隔的纯文本格式</strong>，常用后缀是 <code>*.csv</code>。<br>正因为其纯文本的性质，常见的编辑器（或者excel）都可以预览csv文件，所以它的优点是 <strong>简单直观</strong>。<br>然而事物都具有两面性，就像 <code>json</code> 存储格式，直观的代价往往是性能的损失。</p><h3 id="hdf5"><a href="https://en.wikipedia.org/wiki/Hierarchical_Data_Format">hdf5</a></h3><p>全称是 <code>Hierarchical Data Format version 5</code>，<strong>即高度层次化的二进制格式</strong>，常用后缀是 <code>*.h5</code>。<br>hdf5格式从设计之初，就是服务于大型数据。</p><h3 id="feather"><a href="https://arrow.apache.org/docs/python/feather.html">feather</a></h3><p>feather 是一种用于存储数据的 <strong>快速地、轻量级的二进制格式</strong>，常用后缀是 <code>*.fea</code>。<br>它早起就是为 Python(Pandas) 和 R 这两种编程语言所设计的。<br>目前广泛使用的其实是 feather v2 版本，它区别于早期的 v1 版本，这个不用过多了解。</p><h2 id="测试标准">测试标准</h2><p>主要从四个维度测量性能：</p><ul><li>1.写入速度</li><li>2.读取速度</li><li>3.磁盘大小</li><li>4.读取内存 (TODO)</li></ul><p>同时考虑到金融数据的存储格式，大多是 <code>int64</code>、<code>float64</code> 和 <code>timestamp</code>，因此也会分别考量 在这三种格式下的性能表现。</p><h3 id="压缩性">压缩性</h3><p>因为写入的csv文件较大，所以考虑 csv 结合各种压缩算法测试（压缩本质是牺牲性能、换取空间）。<br><code>df.to_csv('', compression)</code> 可以传入 <code>zip</code>、<code>gz</code>、<s><code>bz2</code></s> 等等参数。</p><h3 id="benchmark">benchmark</h3><p>使用 800w x 10 的DataFrame数据，取值范围是 0 ~ 16亿，格式是 <code>np.int64</code>。<br>数据大概长这样：</p><pre><code class="language-csv">0                d0                d1                d2                d3                d4                d5                d6                d70  5680658661046001  6886564689964211   777947290120004  6223515736992396  2823728071993317  8416657213663291  3500805963228465  10097481526053971  8952870328278778   306015862731108  9726241400443289  4237512935832667  2875425479333067  6311517969042662   878720088161354  87871182730650332  6858523177136352  1733196075769152   840572662722070  8438133907754012  6671944540650125  1147224095855703  1583106816125259  27980685687731413  2940819554234759  3142545317839947  4641209159206074  8194125756197731  4958881218032026  4405637321734842   500692399773906  35316179424621364  8149680042981168  6793238579260437  3891639455885689  3690167863144449  7552248224604567  6411717840330018  9556078695826276  4851668202438122......[8000000 rows x 9 columns]</code></pre><h3 id="测试源码">测试源码</h3><pre><code class="language-python">class DataPerf(object):    """ 数据 性能测试    """    @staticmethod    def get_random_datas(rows, cols):        """ 随机生成 rows行 x cols列 的DataFrame数据        :param rows: 行        :param cols: 列        """        data = np.random.randint(low=0, high=pow(10, 16), size=(rows, cols), dtype=np.int64)        df = pd.DataFrame(data, columns=[f'd{i}' for i in range(cols)])        return df        @staticmethod    def perf_write_speed():        """ 测试写入速度        """        df = DataPerf.get_random_datas(800 * 10000, 8)        PERF_TIME()        df.to_hdf('perf.h5', 'data')        PERF_TIME('hdf5')        df.to_feather('perf.fea')        PERF_TIME('fea')        df.to_csv('perf.csv')        PERF_TIME('csv')        df.to_csv('perf.csv.gz', compression='gzip')        PERF_TIME('csv (gz)')        df.to_csv('perf.csv.zip', compression='zip')        PERF_TIME('csv (zip)')        @staticmethod    def perf_read_speed():        """ 测试读取速度        """        PERF_TIME()        d1 = pd.read_csv('perf.csv')        PERF_TIME('csv')        d2 = pd.read_csv('perf.csv.gz', compression='gzip')        PERF_TIME('csv (gz)')        d3 = pd.read_csv('perf.csv.zip', compression='zip')        PERF_TIME('csv (zip)')        d4 = pd.read_hdf('perf.h5')        PERF_TIME('hdf5')        d5 = pd.read_feather('perf.fea')        PERF_TIME('fea')if __name__ == '__main__':    dp = DataPerf()    dp.perf_write_speed()    dp.perf_read_speed()</code></pre><h2 id="测试数据">测试数据</h2><h3 id="1-写入速度">1. 写入速度</h3><p>注意：因为 追加、覆盖 等模式会影响性能，所以重复测试前，记得删除已写入的数据。</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">write time (s)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">33.5</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">135</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">128</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">1.8</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">1.3</td></tr></tbody></table><h3 id="2-读取速度">2. 读取速度</h3><p>测试接口，全部选择 <code>pandas read_***</code> 系列，会全部转化为 DataFrame 格式。</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">read time (s)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">10.8</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">15.0</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">14.1</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">4.2</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">2.0</td></tr></tbody></table><h3 id="3-磁盘大小">3. 磁盘大小</h3><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">file size (GB)</th></tr></thead><tbody><tr><td style="text-align:center">csv</td><td style="text-align:center">1.10</td></tr><tr><td style="text-align:center">csv (gz)</td><td style="text-align:center">0.53 (48%)</td></tr><tr><td style="text-align:center">csv (zip)</td><td style="text-align:center">0.53 (48%)</td></tr><tr><td style="text-align:center">hdf5</td><td style="text-align:center">0.55 (50%)</td></tr><tr><td style="text-align:center">feather 👍</td><td style="text-align:center">0.49 (44%)</td></tr></tbody></table><h2 id="性能汇总">性能汇总</h2><ul><li>以下统计的是 <strong>相对得分</strong>，数值越高说明性能越好</li></ul><iframe src="/html/data-perf-echart.html" 替换这里的html="" height="600" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe>]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【量化】爬虫获取东财数据</title>
      <link href="/posts/spider-easymoney/"/>
      <url>/posts/spider-easymoney/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>这部分主要讨论<strong>基本面数据</strong>，获取<strong>行情数据</strong>看<a href="http://localhost:4000/posts/quant-data/#%E6%95%B0%E6%8D%AE%E6%8F%90%E4%BE%9B%E5%95%86">这篇文章</a></li><li>详细的爬取标准文档见这篇：<a href="/posts/cores/datasource/#Eastmoney">cores/datasource</a></li><li><strong>NOTE</strong>: <a href="https://akshare.xyz/index.html"><strong>akshare</strong></a> 已收录所有内容，不要重复造轮子啦</li></ul></div><div class="markmap-container" style="height:190px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;<a href=\&quot;#爬虫基础\&quot;>爬虫基础</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#爬取规则\&quot;>爬取规则(东财)</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;功能实现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#功能实现\&quot;>源码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#处理json\&quot;>处理json</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#数据存储\&quot;>数据存储</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#数据应用\&quot;>数据应用</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#示例一：寻找-“A股大鳄”\&quot;>示例一：寻找“A股大鳄”</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#示例二：财报公布后股价走向\&quot;>示例二：财报公布后股价走向</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><hr><h3 id="爬虫基础">爬虫基础</h3><p>本章要爬取的东方财富，数据结构非常简单，在爬虫领域中属于入门级别，使用 <code>request</code> 库即可。<br>下面代码示例，爬取 贵州茅台<code>600519</code> 的一些基础操盘信息：</p><pre><code class="language-py">import requestsimport jsonurl = 'https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/PageAjax?code=%s'res = requests.get(url % 'SH600519') # 贵州茅台info = json.loads(res.text) # dict</code></pre><h3 id="爬取规则">爬取规则</h3><p>东方财富的数据（<a href="https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/Index">示例链接</a>）主要有两个特点：</p><ul><li>优点：链接条理清晰，便于爬取</li><li>缺点：采用拼音缩写的命名，贼坑（例如 <code>yjbg</code> 表示<code>研究报告</code>）…</li></ul><hr><p>先分析信息页的基本结构，<strong>第一层级</strong>是下图红框部分，<strong>东财将它分为十六个板块</strong>。<br>我们会挑选需要的数据板块来爬取。</p><p><img src="/images/eastmoney-head.png" alt=""></p><hr><p>以 <strong>股东研究</strong> 为例，<strong>内部还会细分为多个第二层级</strong>，例如：</p><ul><li>股东人数：每隔一段时间公布股东数量</li><li>十大股东：前十大持股的对象，包含增减比例</li><li>机构持仓：有哪些公募、私募基金的持仓</li><li>…</li></ul><p><img src="/images/eastmoney-partners.png" alt=""></p><hr><h3 id="功能实现">功能实现</h3><p>源码: <a href="https://github.com/593413198/Alpha-Bet/blob/master/cores/datasource/Eastmoney.py"><em>cores/datasource/Eastmoney.py</em></a></p><p>先实现一个基础的爬取指定 url + code 的函数：</p><pre><code class="language-py">def crawl_base(self,                code,                url,                fields):    """ 根据指定规则爬取    :param code: 股票代码，如SH600519 (str)    :param fields: 爬取的键值，映射到中文 (dict)    :param url: 爬取的链接，股票代码用%s代替 (str)    """    url = url % code    res = requests.get(url)    info = json.loads(res.text)    info = { fields[k] : v for k, v in info.items() if k in fields}    return info</code></pre><p>后面依次实现爬取不同模块的函数，并选取有价值的字段 …</p><ul><li>操盘必读 板块</li><li>股东研究 板块</li><li>其他略 …</li></ul><pre><code class="language-py">def _crawl_cpbd(self, code):    """ 【操盘必读】    需要字段如下：        √ tszb: 特殊指标        √ ssbk: 所属板块        √ zxzbhq: 最新指标    https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/Index?type=soft&amp;code=SH600519#    """    fields = {        'tszb'  : '特殊指标',        'ssbk'  : '所属板块',        'zxzbhq': '最新指标',    }    url = 'https://emweb.securities.eastmoney.com/PC_HSF10/OperationsRequired/PageAjax?code=%s'    return self.crawl_base(code, url, fields)def _crawl_partner(self, code):    """ 【股东研究】    需要字段如下：        √ gdrs: 股东人数，通常股东数越少，代表股价越集中，则更容易上涨        √ sdgd: 十大股东，包含持股数和变动比例            sdltgd: 十大流通股东            jgcc: 机构持仓            jjcg: 基金持股    https://emweb.securities.eastmoney.com/PC_HSF10/ShareholderResearch/Index?type=soft&amp;code=SH600519#    """    fields = {        'gdrs' : '股东人数',        'sdgd' : '十大股东',    }    url = 'https://emweb.securities.eastmoney.com/PC_HSF10/ShareholderResearch/PageAjax?code=%s'    return self.crawl_base(code, url, fields)# 其他省略 ...</code></pre><hr><h3 id="处理json">处理json</h3><p>写入 <code>json</code> 文件时，需要注意中文编码问题，下面是一个万能模板：</p><pre><code class="language-py">with open(json_path, 'w', encoding='utf8') as f:    # infos是要写入的 dict    content = json.dumps(infos, ensure_ascii=False, indent=4)    f.write(content)</code></pre><h3 id="数据存储">数据存储</h3><p>结合多进程爬取五千多只股票池，注意处理空数据、网络错误等情形，最后分别以 <code>json</code> 格式存储在本地。</p><p><img src="/images/eastmoney-json.png" alt=""></p><hr><h3 id="数据应用">数据应用</h3><p>量化金融追求一个实用注意，那么获取这些数据究竟有什么用途?<br>除了常见的<strong>用作策略因子</strong>外，下面展示几个与众不同的用法：</p><h3 id="示例一：寻找-“A股大鳄”">示例一：寻找 “A股大鳄”</h3><p>股票市场的股权拥有者，一般有两种，要么是个人，要么是企业/地方政府/国家。</p><p>下面我们尝试统计 5000 多支股票的十大股东（从东财爬取的数据），然后稍作拟合，再按照持有数值（也可以是持有公司数量）排名，便得到如下图表（绘图来自 pyecharts）:</p><blockquote><ol><li>带 <strong>香港结算</strong> 字样的主体(及HKSCC)，一般香港/外国投资者通过港交所购买的股份，即所谓的 “北向资金”</li><li>实际持仓最多的是 <strong>中国财政部</strong>，他基本持有了各大银行的股份</li><li>其他排名高的主体，基本分布在 <strong>石油、保险、电信、证券</strong> 等国有行业</li></ol></blockquote><iframe src="/html/sort_by_amout.html" 替换这里的html="" height="500" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe><hr><p>看这些国有巨头的数据没啥意思，下面尝试筛选个人持股的排名。（筛选条件很简单，长度 <code>&lt;=3</code> 的便当做个人）</p><p>排名第一的大哥叫 <strong>魏巍</strong>（竟然是28家上市公司的前十大股东…），冲浪查一下，发现他位列 <strong>牛散F4</strong> 之一。<br>而排名第二的 <strong>徐开东</strong>，也是A股赫赫有名的个人投资者，跪了！<br>靠一己之力的买买买，坐拥如此多的上市公司（虽然只是前十股份），其艰难程度可想而知！</p><iframe src="/html/sort_by_num_personal.html" 替换这里的html="" height="500" width="100%" 修改高度即可="" frameborder="0" scrolling="yes"> 支持滚动条</iframe><hr><h3 id="示例二：财报公布后股价走向">示例二：财报公布后股价走向</h3><p><font color="#FF1E10"><strong>TODO</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日志：2023年10月</title>
      <link href="/posts/2023/10/"/>
      <url>/posts/2023/10/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d12e3ad16ba7076d6cdcb933db2e0ce2db97cbeb5075e9dd96f8bb8a26c74bb">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475de0b1305a637ea913974dff7410a14ed4dbbb40a5278eb14bbac34e59e12a284c7a294ab69a495d47e11e78ad50feb1070946a0084538613a8500fde76ee182cdc92156f5cc629c04691a80beeb70e034667984a29cb1db27ea11974521ef316310dd65dbfbb2a0d60f2a8ce6cab9f6cd825044604fed45aadefb22ba2321e19dee0566e6736947a45ad09061320fc24648d670849625fc22b98d3df0b29e61884776134c17e3975cd787312cffeee2c525c85de8f56243719b51201d8706c0a15d049f08670adf2e7bc6b1a77500e4653531fa511ec0c5a2deb7b4863ccc165ca06bad1ce5b7f06e9883803062ea7fce4b73c8436bf1318a645e40ae104849913df2337a808555b8015aae4fbfb5b092aa91b157772a070db9d03e5125cdd275b3295362d9d2ef437441e680a3b115eb7848b53ecc65f016beb3eee55f1ef332f9a59127639ea102d24482a72c0968e0aa7ce708f6b4557524572f49c4add3c7b75236d56df44af85b6a3fceb55023aad2701030da3fb307625baf5645735c0af0fb442edd13c06ae844902914cdcbacdbe9ca3c6f637ec5ed1027d0a8d303b443f041bc8a4c5cedde860053efe20a334bac285c70285b0083abf9627cecbcbcef0d58ff4fef3b47b47773b59e7db7fbd3d610586e12e7c3e53067c12501791ed14860d6a0e4a0ac15cdcc709e2d4243d14d6f319372ba480bb5065e6888a6cf0a6ebe9eacebb63d68fe227df210155bb0afd22585b6932743ebf37ba9c3d9fe45a614b32dddb36ad6117cff196af6974bb343d9bf25e7a83d1aec791fb222d0e7fa64d5becf1b7a2d164cdbba40776072fc4c798d8a548d4ec2fa214eeb619ea4a1d0bfe32faffc558c2cc3ecd4e5ab6159b536549ef24049992d953ce7948c03458b3c882747b9023ae96f4cbc1c2bf47a7f335b19bea8a5498e55e4802e368895cdd8125d61cef083210d310d2365ee7dc869c08ba186e882390ae739f186cbead2e0d43900ee9be4e69f8f95b17a925dd9c0ce46507d2092d1f45ef24349437787e9890d823456485e7799e8711008a2ea141091b94855c522986856551c75f30830c77331cc7153d48550b4f7146e5cf6146c3bf3e61de19dced882a36373f6730cbc892c019d99a7b8e550099d85d6de2bb7c9bc60da9d7e80d7db05e69b63b51a7b558d4cda9d1c5a8fa9ee875485326c3c673536cf0faf8db54acc5925e2f49434914e8e3da422545edea75f5112483fd969e07c753dcf887a78b8ebfac978da3daa7348656c590069c858f458f75d7ef578f7b96561ca90058d0776a58281aab57deb3f7f6cb2fe892863bd9f70a0ba0ebd1488fbb561fdaf98f98b93a30727c3ccc9ad7c8fbe1d4b68c5f9ca7f5f24e631c16d8edf805fe4550e957e226139e67a7db06c80ea3eb6eb04d05e1e323a0b1e55e4f0560de1f64b7082456aadf33a234a709fea9e29d6b8697e4c69435dd3d3315acef0d9d29b717bd1432bed20c945e33d59791103e78a766165c01b27b483d5a81b65311e24eab09747b25be7ee547966d4843573fe3311548919c263a09cc268c8e065936dbba7f1ef2e6662f542e833977589068c2e187dc7ec774dbb0de07c79f2e70895a0fa760f71a3bbb41bdffdc94cd8c86acf53439df911b315f436c0fa430a57d262442232e326844c235b9fd0a83286b99d9fd10e708032938b1453fa675931559281aed778e79fb13dc8bff549399cf250caf99a6fb16ba5ad8c7143ccd08c2ff82d91acc06013410ba742236d1462c8dc1e05b227624137602003f06270e4ffa015edccc8f98a274847eab73fa9ac4591967dfe906255b3ed1f9d8e78428321c8c6109bf51660a12846586fa2f02a0044a4d715628664374fbc9ece1f9dfc72fe4edf94e9204b46ccfb7302e7e84b9e8b331757a916ddd425faf6fdc83f9aa52383c843cf17abe29768d7b22434bcc76c063c71d246881beaf19dc08ea3ae1f3149ead62156c65e86fee1204b3f541999e1a3535101e5a6d37a5ead054f166c649871d386eee4b522a0972547621f8294a3e4bc6faa00e9246a763a0693e88fbd6b9260e2ed4e2054f1dc42dcd6237756b09aafe26656fd6a220896e69328925cdea4d018bb1b3aa9e892c63c69866e8d80930a4286cca98f375a54e02423633e9fc805ce94d19ca6d7eba1b47368afdbe98fd920f34dcf3e18cd041328a5ddc5ae46e3f700aacfe14a3015dd87ecdba84ae5b305c685341ca7cc1ff4bdc727d6297de7a0525a02cde6143368a96468d3de864f51f49188fc33f68dd5d30c3f86f57c9fa112f9caa04c9b0557e7f1b8152db9a6c93c4ef7887090967e7746517aff46e8b28c5a927010e69c9074deed7860bbb6230d88681465cc7b41479425ae3f68e05d5e050ae6c0ac588349512a5921acbe76c69c6255c929c5d07eaae1e9147c26000f32e0c94278dfc5c5f6a0c7e79452859f7130bc634cea692d4a144383d698f31b5956710de943c5710e03015d0bf6b398f2d40fc6bfd910780e3ebb0c19c209167159ea3d22ef5674fd248c0091f80a61bfe163f78ebb9d3657ea59b0c87e6a8a73e5c13bf9f41aa1e07d9ae6bcfc34989a9b45755f272371acf1fc1a81d9fc963d7553def5e151d1fa2e0cdb1673dd1c975b66bf639a3ba0664ff55427044a25f388e04d9a397d28fcc54da06aa558e110d83a5d52f935ad3c95a2a3245313529a70f6b6298f76eddc4c2f89a24bafb1e54e700912aa005001b7ce09cdc685f124466cc5f9ca603774292c6d4e43f3e7b741b997879ce10383d031d49343d20bd2908c11b5c10fcd0a540fbb66586ff362ec2520d4276c554fc578aa4cc827919222d550a4dbdf1d2a089c06ddc5d4bfa91163b181eec189768f12b5abbd4595ee9623e6ecbc5ca9957553d7725a1df0c2ddae1b5800a383e2765277fe11780bd475989c659c4926dd4988c15f2b7e7d10524e2c09d9688319bb4f6328290282b14a88aa789e1d97efdce1c5c92d2d68ae6ca3d32c512ff7a1585a10564420d0f3059e97993ffb8cdaa815184261d5d633cf756db04e25c472a9772d02445dda24edc45f8673fc578c3f45ed28c5a0b6c656417dcee3e5a24be50794b6ec3c83b71f2db4fc12e28d515fa1accf844a544a5c5d99f819b7781a56efbfb47f4aa64f5b6de30fde873a62c62de288c0972de411d9995dbe6d9b778285ec7ad06ee44604314b329f298d1119d5c749dc1a5abe85454172f934f1455a4faeeb27d697e6a43428df39ce6efda32e703fdb021f42ec1291b4ccae1e581b2bb843763789da14fdab1f7e20504c29c69f732a4c9331e686287af295383742879d43a847dc14ba65b89c7245c54d50251a8b24c1986587c80727f22b844820c9489cf598071c942243dabaa7504c48d2621ebc74c758412831f5e1c4f52a98a9f9e181008daa1c0f6eec19c8d17c17dbc3a6196e4befb7201cc47d07653be4bbc3df74ec1ce7b009e7fd825452000449d7fc40a9ec2cbf2e198758b7f264fcc4b3ca2f50d97b7668827ebea5daf23ebac73e3398ed5f22baa242e7a9af19cb35eb59ac2b5d03e8e1e30a574732eb5e1d067f54a18e995e562058adb73a109cb5348bb5777fb4115b1fc545897f8ed9bcb3b89d4919f842ea3ce803760d7f4c04c180ed1d9a62bd1fd58bd6c05f0b3b3a0a3a5369959b149bea7821077194daab6ec8e2eab804ac6586587a663c3237cd4ed8d9cd06c95899c6053b1fb82f4a975e062e22c8c8b6d82081b5c959ed5a14a1c8852bd2cee3fda2def3d0b9959cd374391d0e06e8a3d8fe8366ea3d714a350a3c0d23ff63d091b776def5080f9348f4f3ec423b08d13bec49dd3a6a6c8933e3acea5fd56797770aae5b426f6e3a4ea7fd7d010c3f582e9e12459e614dfa6153d46f735970933b5ef052f2e51304ae7d106725221c5b76dd521a428e9b4975e890d70607babeaaf8a893dbadbed925a87075ada9ef02c191244a81b98ffd95371070e975fa102de99214010d913bf855ef5690ded565dfc3049132244b519edbf816acb36b07fa37f30ab69678af635272e8b5844e0d8f563d780c1dde848827fa24a3eb020c876a6dac2714b9b92049f74dff52044bdc452e1e99cfe7ad14ef0dc31627b73c1c5bbb61dfc191bbe0e6cac0520fdaab245a9aa8970ed473b66b8285eca15510f90d0f2092ae3f709e84d83e5b96b774197762eba786d9ccc189a4fa0d58bac2cc8cd2726e44a7f145afd1e9ee552cfbe66a643a9ac947eb41e72b8aa7929e8344aa80d1fe38b7aa6ac3b6f72247dcf37e2da0708a2004f3d560a94</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AlphaBet】cores/datasource</title>
      <link href="/posts/cores/datasource/"/>
      <url>/posts/cores/datasource/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="337e4603dbf647d1e6be4b3d669adac67718d0c52142ef38e0f316c14b3a0de0">b3dc07a81f6459d120ce338ccca5504625d42614b93020ffae3fe33410b4b3b7b132d51143295cdac39b893eaf193f19c019943d7e59177912cd230786c73130f76d9215c2bfeb61246a440ea10f1093f8813644e0539c6bf43af0a466ef4a3869f03545f2371c4406e374164f0141df491302831c878c9bcf684755d710c17cb4b0117718299701c3e92d7e680e2d2efa6064966556690e77b81a309d85d8062be1c5b16f52b901b914a1111d41228d16b637e33b3fb8dfd796dd947c22ca30563139d3e404d882931db783f4126db99a7310744b338a985b524a9dac8083a2a5a5aa404a7c2aba3842b8f7170f7f93a7593facb8e80f8a87e073ace10df1f6817abad52038b81e62d6a1a3b5bc4d762953c1267b1f408b00733262f7146a94e3cc80d2df634050dee46a6355ee9af83995a7b5f4b80a5627ca71066f60f41aae74b02944fe44fae3e3890718da71a40dac85b3a4877d7fcc4da2b4de3a90168081f652bad4aa16c8811955fe8cc5f31d48e9e6b338f3a16d72afc12c1b30979360689fc8ffa09031579ecc5c27ead8281c37a80b03115545b47cd91d5c57bc6503fcf138d0842fb48ab0e4172b9d4698818bfb1ceb274eac3a0d6b9c3588d345b8728b191f6c2a76bc31b7cfd2696bae0070bdb02e358907df38197b78dcfe73ee8453a3b0e5fe968017f26b66fc424a40812601fc222a55e5611d4a8588216b604291816ee56365c21979ea5309e05fbe4406a199a103f743cac2b4f5490ed210d312f7892b3cd2200a2d21dfdb5da61de40922326ab8ba2ad850c74083ed76534b200289b9d29bce4d5386cdf542920306aebdb9c3f8c6298c1ae30e68a9c24dd7117c5df3fd9c7deea388325380c97ce330b91d3ebb1fb0b033257940b7290eb571146644e8a93ac55e78aff64e321aef22ec9b15358bec56c2b3fd8da25dcf16af0bce5d57d453df12ea5406d0a74b0eedaeb1a9c7e47305f5b02c5446a0c9e4274cfe77954f49a64ba12cf0bc45a1a2dbc0afbeec373af4d6afa3495d4a6b0ecae0de608b00b884fb1f557d13f85725e01671ea88d5ae21a0b9330dac467c4ba8da1717ddf53a28ed68df5660a0f8bebd570ac529decf18701148e894c18467465e42f493d8d8c001d57917e451508a2ace4118d39001de40361395a3531a11d097680b38a4007624078c15f34a4cb55f288905c349928d6835d288446ae3d5fc6d531cf78ec56cd77562d7d34ec90629b92aa74c7cde619188682a4c3a8d935328f7f592b577abd1736b6665ad22b05d87355899098d9a773fac03f33e74f683cd2788e5a48d9924788bab44530cc4252180e19c2dce27cdd741b4d68c4af08c9730801bb468143eb12c3e03683a42a89bc2b938d0e2406bf9674f7148ca36df459b8f28286b16fb2b19620b2310695282f23b856d60641cbe0fb0b0bbb295818dc3fc45b4822583aae177e1699996e564cd04dc83579dc50b32b2eab1ece7f11608513dbe33e92b6d8500df04b5bdaf3e2057484489d59fd2c202ce11e51071b0243fd98702c191eeeba49975046e2f0321274389f0ee38b38ba17dcc22269c6421c07295d978add3e4b39eb5c6bcedf8066cc32c710c6c7da9fc5465f8276a729e7f8964e04988ac671c3ed32a18efc6f0b257952b8062a4560a50c258d7ddf9e11586f0f247d73f8922fce8f0f85063e5639953a5e83c76861314ac570c4bfab80079b642eff679b77fcc7652081f53567ce6f738078aec6c0464e0757dac121c888324ab77d36b56d93ab474587f55ae7f9c7678b074fe74b67e705d849480785f48f626983f7e73b8914190c66c0acff9423b3ff018978d318b4116b966b96b2fc7cc01d378f3cbbe78c4c6cfa4564c5235abd487c8398a27a5d087521b2d286e146360c81aa211dadf8ab50e0504fe61c9f415dbb69baee0253c405994670ed499fc612dd3fadd774c09cb1b8c0146de7012530da18a36e23504aade93fb5965b42b0e338140f0e2d4843494e22d4ac97c29eaac4c8eee22ff610656d176994ebf8c849072c2b609af488ad23dd6d8b0afdb622d8bb88948fdf3c524155cfa5004b74077f3bcf763282ebd7cf35df8d78b5f8ea483e81aa99991e9c861eca205a7f232dc58ab2ead304f81f0853dcbaec534b69abc1fc7c9bc9bf07ffce250ce6332020fc0b0a3dbf86a86b8272fc119eb2d20f633698b3fb6caca8d8195e1129fca70aaa6488cec24af9aae5dec4ff98e616141a6dee7919163b05bdeac4c46d27c8527e45d18e7080b54af06dc001d7b31346fceaed2fd36ffd5aa12aab8bfbea72dc7cfa45b2c4f65910cdc1bb4154dda16197d7eaa50bd65d993af06f5f97559c11f8900ca12d4aa62b5fb42590d8be0bb28a9201d17fc68bb1efed243169fc47073686925da28fa41f770afc9c511ab59bef43040aa0e7720cd0cba71527c97b21523b87f59da4487cc883dee50543657cb35e293805af511b4546649e7c37378286a915a09174fda8b9f6f193a8f54b666f1e2226a1b4e59f3e2cc68407dfeb672a2dfab1377b50e225b8aa05622445b36f9a12f6971d7cc5c22c6273f758db0d42e0369d18ed1d715a55901a2032719ed1a993c835af9c6edc7e89eda5fddb0f393b3000dcdb279f70f8e66559fecc26a9af814fe3e441e701f38e3c0b59923f8a7a7aa0cc6f252be84de71a956e6c458ba1b695550c416ea425418acb4ee9e0dcebbef1dcea558ce829f443e537e783029899b9a910d874f268a71df3534f37d5de3230dedee42005c3cdd0f9dbd38cede9cfb313bef707f69baec26d1b313eb8ee0e319498899dbdbd4d9cbd7a4e711c28279137e845d77a90f46fd949d85aebcbad23bc66f60b878858fb261038c89eebd0e5cf75893ab5c7575e360ada4fbc37f055f0a641a5c8aa78a611e77e7a474401fa889bee27df70ebf99d39aca0a720a0e9ce38d7b26a0ea8d6de936969411faff90debdfa30994073f7c4fb37080ffdd18128cb8791254bf8646eb5e91dd18a91916f7bae949b880b98963ec899348ab4e892dd9cde88212de2318d8851e59823ccaa3b625a45b9c5a0dc768061292198089d2a19d876088644d6b3f597a1b0054b91a1e3eb0dbdb6831dd02a2116115ffd7d4687146fd668d9f663981abcb3f35ccfc1e5c3af87828d0d9d89bd0fbaf3626716bf9ee1d3b0702b9851b692d406dbc81d81b8739ba0f1188a55b65088087dc52a05543976d233fb3ac4992a8e5bda616d390190dde421d9441dc8316d554521b5ff63344ec00a9c082202deb541f7f5189d20ef9d540d08c7bf662aa8963246bfbe460ebf4384f4c05f62747f64c24ba6b71cb9bee2c06c705a268388b6327fd9e4202bcdaf5ef730fb79dfc30814d7225e73e95f0f767e52bb494fa47eed4e55e89136ed1bbabab3adeae620d75d36d0fc967003dc857349e39f13604b9576a79569368f01f20248cb4f278b0f119aefb6d1d56a125c8a4892ba0f84e4293834123cd575b97f3710db906771dbc13b8356b099b5f8a4f8bdd7538b4920ac2eefa79787c967832cc4d52da94d4870237f1c248c4f805dce115427ecc1665201b57ea482750d4b4da8d5bde11644603dc8ab6aa2665f08eb230d89bda28e510cc9fede06cc3cdae9a98962432aa9be99b4dce5120ff5be3493f578042e1b8d273f0224204f4f30b5e490b6af2363771f92e64f7e093e04fba243d7da82d3b4d4123ccfd428958c598a2799b22648a073bc6b4f9b6a2917a16e8d4ccd089600e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泡芙成长日记</title>
      <link href="/posts/paofu/"/>
      <url>/posts/paofu/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c78bd27c6bd0046deeaabc5c71061689e5d203c29ed3504ca7fdaf20daa5382b">b3dc07a81f6459d120ce338ccca55046d81ca386354419b6b77d6b55182b8ed301b3c2040d78f9d2f509a2f04ee45763854c7c389b18ca9301f9504a65415536caed1f6078a5933a1e86da75ab9d764257ebf175c8703c4a30d15bbbf7d92b3e403a1caef391b1614091ab770b4e4595b54cd1b310f8dbe1536409c8de8f79bc4348c1bc29c770dfa2315e36ce54739a172780106782350060c52eb57d286eb75fa04878f3cda90fb70f7cea791758878e87bd9cea4101225d90f42573e9709ba039eafbf4ac3e239721445477b2bafdcfe803cc6391fae439e7f1a958ddfc372c8c5d3d8d141fd4a6afb2f9e54b7b3b41df860024fd18e08c38f6e52b445e4d939b03c40370f1e6b774e3b96f4516cdaecfb256a2cf30b57347eb8cb5e55a971b8c485bb317b25d86f0bb77d12436a0c4580debbf73cb1ef658a04fa8e00e45bb46dfb81abd531bbbcb397b64220491dfceafb37390ae4c9f9163510289192df6b4a6344439d771050ceebbdcc97c64a6d10bd96f462781511c3392a795ce2ea09d63547e217b36f148524427d0e0479768f0474dd3236f3a4511c3af35a1ee4b63bb6a81ef4c7f23117aa444ed51ce8893dbb891ed914fbc62b39350da2622ac8cb9d5848e745e8ab58c01e69db620d0f75f64a2fe19aa7c1f1215ef04e78a6f32e4cc5d829e6e3e3a9ea1f833531299902c6be1ac12b99b1afde30b3718a25a9e5db3d02f6fbf37bd04f66720b67d5e989718f121b016ecc5dab29b54b1b92946fc4540d0ba419f5c57b90c085211c31391e5c10b025cd4fd6e3e9b3207259b277f1edc6437cc367f06b2a49aef1458648d2afd281e27ba5a3d143e5925818800faf5e622bc250d3d3a60f518d6583a63b4c7e16d65b4ef39a65e4a057a2c3b6e370a408964621073ba6f300667b6f1575d60f5d322cf642ef70e5cc1f1d7981482633e3b29eb99d2c2eaf62abce6c1c61cd3735ce383cac93be0ec97311acfded14c1ddbec0f5ef581f35ff2ac3d361086e3d5f93e8a370a7ed8953a4173</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AlphaBet Engine</title>
      <link href="/posts/alphabet/"/>
      <url>/posts/alphabet/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1c644bfa2e3ead880da6e3ac62f5a16660a198adff326ad2ce42fdf3d98a1b30">b3dc07a81f6459d120ce338ccca5504603780459e0306826441972681af56d621023a3b1e87082893d7f9f5a9cfdcbb2d60925685910ad1c3f4c7c6703be17e884d98345b93e039e1a24d1a8ebed568715753ccb25d7df8c5c7bae546cb9dd2d7867d1d67996d19fd8b59c04551be490a583a1a45c65d3695787a511f866d3303b0cb5e321ad68da8c1ef4da903d3e648ede58035c1885789bf30ba933ca7e4f14435d2f066a07bf5e0a85980ce41972a9957a1b08d33989c6bbb481850b08c8011435cf746a31c7aa1c540ceb73d5f324e874511482d50b76c6fdeb25c7cc40b23444dfa998fe7d941d124645dcef994f823caa949e964f6c6ca7dd790db5d6273289337aa3cf4e96020fabb36c413aa93d7f8dbada47cc068065082033da5bc32a18b7f9043518cce839f66e6f1da77013912881d1c9da15b53c7edb06fb745bf474543fd299749c4db849f1f39d49a0d52044cf4f305220b72b0f7a0c8df6d39fc0b2f883f756e1ef9b8baa252f48fbd2a56901ced22b0cdec9099b37f293bd34f4ccff931396d57b0fc61a4535fe3c8bbc0ef66fcafb23d87de0be56947237d9bb89ddb050fa33288866c5e8c1a1d51d5d6c74f152e0fa6a7cacb824dc10370b850c541884aa4eb486b6430a92fd0d761cb9d9ca005754aced8c48ca64a0cfc4d690b3dbdf8e94d305ddfe0ce93b3a7b4ed5c5cd41fb2455a611c0f265aec0729761616b8c9bfc6eb1898eec51f3ef378e79a6b3e9add02a4052a05881b50cca21d04bce7158a0547ae526e5f5036bb6219215baf73a9c0613194c202f6e1bc28b62bbc857203209779ad53d641fb8089b40a3d4014f7b99d85866e3b1fb16428d271d84be292f834fd16343943e55f8ab72816d51bcee30b3bfbdbc99828ddb7761e30dabcdab4dcbc363a0865299397809922b1c5ef9ef33ab68ccc4135bcfe368388885e6bd538ccbe12c75f76f86465ce679fd5ddcb367357ebca26d005d0ec7ae9a55573cffee31aa694999fe819d902acaa79bea554e0caed9bd0e7f75d20ab6f271bf59731e0bd543cf01132f7dae23f82aff90e843c6583458ddce030fa08a3c57a47326a9dc565bb0c67d58f788605605663a0884ca243364bbb59f7d1e197d7026bd0179e0d148bbbb126521b54263088d034acb9f41c9c7c85a591e0a8cf079b4266f4ad40c10fe2ae4213095e0ffb5278c52e5ea151321c817a1ed8822e23f224d9b048f9851f28e5d7dcdf61fb15d5ac6b24bb524c40654</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【大纲】Unreal Engine</title>
      <link href="/posts/ue/"/>
      <url>/posts/ue/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/EpicGames/UnrealEngine"><strong>EpicGames/UnrealEngine</strong></a></li><li><strong>吾生有涯而知也无涯</strong>，因为学不完，所以学一点是一点</li></ul></div><h2 id="0-背景">0. 背景</h2><p>UE5 官网给到引擎的定位是：</p><blockquote><p>The world’s most open and advanced real-time 3D creation tool</p></blockquote><p>三个核心关键词是：Open、Advanced、real-time 3D。</p><ul><li>Open 区别于其他闭源且生态狭小的Unity，想改源码需要花大价钱雇团队修改</li><li>Advanced 区别于国内外其他商业引擎，UE的开发团队和社区是遥遥领先的</li><li>realtime 3D 区别于cocos-2dx和一些离线的渲染引擎，它是游戏开发最核心的要素</li></ul><h2 id="1-准备工作">1. 准备工作</h2><h3 id="编译运行">编译运行</h3><p>看 github README 很清楚，建议使用 VS2022 + Incredibuild，不然编译速度非常慢。<br>直接将 <code>UE5</code> 设置为启动项目，然后右键选择 Build，耐心等待即可。<br>中途出现一个编译报错，搜索许久无果，最终选择 Rebuild 解决…</p><blockquote><p><code>error MSB3075: 命令“D:\git_project\UnrealEngine\Engine\Build\BatchFiles\Build.bat -Target="ShaderCompileWorker Win64 Development" -Target="CTutorialEditor Win64 Development -Project=\"D:\ue_project\CTutorial\CTutorial.uproject\"" -WaitMutex -FromMsBuild”已退出，代码为 6</code><br>搜索过几个中文回答，说是通过改MSVC版本来解决，感觉纯粹扯蛋…</p></blockquote><h3 id="目录结构">目录结构</h3><blockquote><p>参考 <a href="https://docs.unrealengine.com/5.3/zh-CN/unreal-engine-directory-structure/">UE5.3 目录结构</a></p></blockquote><p>UE引擎目录 和 UE游戏项目的目录，注意这两者是不同的，重点关注如下目录：</p><ul><li>Templates：创建项目的模板</li><li>Engine：引擎源码<ul><li>Binaries：编译后的可执行文件</li><li>Build：编译所需文件（跨平台）</li><li>Intermediate：临时文件</li><li>Shader：着色器（.usf）</li><li><strong>Source：引擎的所有源码</strong><ul><li><strong>Editor：编辑器代码</strong></li><li><strong>Runtime：引擎代码</strong></li><li>Developer：编辑器/引擎 共同使用的代码</li><li>Programs：外部工具</li></ul></li></ul></li><li>Content：项目资产（项目特有）</li></ul><h3 id="Renderoc抓帧">Renderoc抓帧</h3><p>参考这篇文章：<a href="https://www.cnblogs.com/kekec/p/11760288.html">博客园: UE4中使用RenderDoc截帧</a></p><h2 id="X-计划">X. 计划</h2><ul><li>快速过一遍 <a href="https://docs.unrealengine.com/5.3/zh-CN/">UE5.3文档</a>，先俯瞰全貌</li><li>挑选出感兴趣的 <a href="https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/tabs/88-unreal-engine-5-3">UE功能模块</a>，并逐次深入</li></ul><p>【方法论】<br>可以先挑选在 <code>NeoX</code> 中熟络的模块，以观摩其在 <code>UE</code> 中的实现，并<strong>对比两者实现的异同优缺，思考有无借鉴糅合的可能性…</strong></p>]]></content>
      
      
      <categories>
          
          <category> 3D Engine </category>
          
          <category> 3D Engine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日志：2023年9月</title>
      <link href="/posts/2023/9/"/>
      <url>/posts/2023/9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cbf1ecc07e1f6a61d57168f47d8b137e542242d8be7f083ef46933f12f70f3f2">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475de0b1305a637ea913974dff7410a14ed4dbbb40a5278eb14bbac34e59e12a284c7a294ab69a495d47e11e78ad50feb1070a468302317925759b63d81d1a890d91bb247f88a2922744d34b0dccccece2ea7b156e500c0039cfd827310258914cf02387296f49579859a12f70fb57cd977715c82a3748c321a9a025e128a2cce7f1de3dc03b281972aa543ebeddc996b02a417d9199a94914424bfe81c44ba3eabf2c80e4e270af2ca8407ae2a85ff69b0c1fc536f95c6144a12dfa7ffb8ccdccd84134a688fc70c762745ffb27c1d7f5c04309f944cf5a21383babeb4809120af766173cd3913c8397f6e4c96eb7384f89954fa660cd52a67795cc60cbbdc39c1b58ae0a544dfa11a95645a948f05dae5f8e4a73672048fdc14fc952a5849dd401a3784b6c89bd951f0ab835ac1a4a9f70d444ae242f4dea85b2f9d8d9a7e9305be6ab28cad14ba0c2b7a571fa964999e0ffaa760a2fa7600eff40d891f5e0c65b1fc925a7af5120ff3379ed5731a4194270d519619feed43fd2b6a44c393002a33c3d67c746dee94be0af2ebd54e04a4b20731890f02c5682483b33ee0f28b7da3574f7d08c5f02bdfcf451a36a3333061975b30b4fe8d031b74c782518cab023906e9989aa95522ae03c37da39cda6fde3a576407660e733a7059c3a0f80e97991159b711d583d54f3289b252d70ab0038a7b288566f8903e8861af824a96f2fd0e681502bb84c68c7b026dbc1cdd48f77049005108be76f62fb72f817997c97f0a8f300c100eded8b35f427afd0b17a654dbfa3b8664dd933d00c755cdf46020a148ce26e82760da79b1455507d496518b8d707ff0bd13b0f0cae9e6b9150e6bd32060a04054c6c41140d97ff93653793ffe18ffdf7701d29c0df7b70ac5bd75df406b5d979447871f37bf928d3a76d46f5a28d7d625b444c0ce0e2f3cd6051830a7e1248d45e254e2e93a3f8570ffa7ecdb11e0084db744bbff2c61f2a851c84517e281db403919018b838efe44a580270d83c4ac3adf7aca236dfdb85b7fd93aafc866dc3671e7f15d4182c17043fd91ab23a517451a5e71a719c1324e7e3dfc13edca5bcbdd2c9b5d44300593869ea5e70b4eb2ff3631497ea992cf96107bb632236d00fbdb9c878d90beaaebbc8f45e1759d1ba4c940d200eb660b09a2d7a68b42600a23764e4725996059cd22d90473009bb50ef579822bb481b46b4cea1cf58ae2935fcb9ecbb2a88171e006ff6590583cdd66434631bd5139a8ed79443bb5c9801f184c9c03197e895989864722c465a8c92d88993a6ba26faac43ceac0f9d2522580fc5a24994c852b0e1d47360ca5dc0d1acdbff9c25629eade6fa687009be6397ce3048cf795071d7508e2648a2eb9a3ddb9d5be23570d89bed72fda368d04f427c23915628a2f5059728f3ff6e6c3a87c545465a0faefe26a2386232928017e481e7430a618cbd7c9103d7af6370f88110a6b8b9d62268d1cbff439e51921719ea9251416d227e8ba25874da2394926b328b29b3faca6fca6302468c78a87ef6bc4c01cb9f62a094255ea8246c27b6ce8a36f16e163ca3dc533f8a5f48fb144bffc910c17fc5a85963b6e1b858ac3a3132a05be5a976d78a9e6fb95f5f84845679039f951011c1f52454b4b1cbcc3f8c68549ac3b256431b44b945be0e8717e3a978636dbb454c22a3ba7ee90acc36290bf6dbcc507973d85ee7cce3db7ee3c55b722f813b509f5583b81643b46d9dae38a1eb98a81fe3165d046dc0038d9a2b098352bb655fbb1a7c6ee868de2e0d357748abd976dc89d3d9516473dea8143f4db516ef8c6266fb05d16357670eecf6f2214745bd9aed35dd3bd1612b1840885f22aac29f36731cba2b7c2756c3fdee8b3eda90fbf4b4d487b41128e61d60cf12927750a4b28cf4722a8c936fb7cf1f39a16ba7f0beffe31079dd0f0da462ec44d62270ce4b56fa66293ca95c218faff7b72ef70ef4a42d4ce50a65df10ed61eb32189e6d63bd178a84bef850852aeb50458b826c3fd2857b49428b1b630c83a660b88ed767bc7bd30cca9051f4f1d10ba700e3c969403170fb1372c610cb89a7e247e23f6e17a4a19fb93a0ac559f54e5860c613f6cbf5f52a99ab5493d8fb016cbd948c890e0ce001c3d8649f8a9f6a7f1e9965566fb2da0e5d5147152467dc3441b953aa054ce38a234ba257ddcbeb17f1403224f03a5e68b5ac4036f51b43530a457d19fbb98265858b4822281d07af0a2f205395da54b88dd11529fff47cfad68d842268b66497d90178bf85c43cd1b90048a8c35c8fc177d01f8eb428ae05768673d2dace3e426e2d193aa40c273702653ba8523fa752413ffb2ed2635efbd05be85aa69665531381c78f9a1242f6d49bf8829459b60da404bdcf775465d01daaf39b7b02288a68cae6531459d4cb43673baab5bb4eaa4431fcbd599542f45ef3cba579d3ac2a0beee72ee6143bf869a92a9ed20546b02da8f8824741a7f1e9c6365e19521183e0c3cd6d174e3ce008e0c732d88055f11eaa1efaf15d4c5ff8f0f8b0e441a3496936a181830cc1624f2c4b6a3a7fcaa4f2365297e7c14a9b5f111a8f317120a249afe2dcba85e096c54e561a8031184a8bfda19ee31a5783193dc26ef82f4c8f874638f3136272303f5b52e698f3c116c3e551d4cd811bfb16b2fec613152056dd53548cad1eed03474e6eae3b9f1edf61e2563d8a088bd8819beff6246d5ad831cf1a7a0e5d0cc297a09c71168c074f83a0f11369ee0907b819b86cc3eb91024f97e39b3e2ec1a0bf22cf1cd40bc9dbc86c06ca2a383b92be92c9d74589d4c966e0b6aff543d472add9881655e6559591ffe23738fded6d6bc322a1c127bbf88316ab83357c026e16036d9256869038d1d8bf344203421b3022affd4ded033c4d93d7c57f90ec36c5a7b8cf820bdc8f7f22047068bbcd6c71568ac32bcd20b7c41ce3cc026f8c6c756ed6e45ad43ba20ad54f370019d5ec550d3d4f07ceabc8e020fc37a95efdd85c5a3ed55d822f7441abe3c3fc70d2232fde2dfd7bc0ec50c274b62bc6d97a8931c289af2546e1e9f1fa217b0558fcd5a51133eadda1af7044ef317c241ecee30918013d92f8ee6d26da319a50adb30032d14c7a675c7126b857031bb01ab3896bf291c9f0313d8f0626b7b6e87234ca7c3f02e80b6983a156322dcb24997ff4b057b782058a6bb085b240aabd8186ee9c7e194bbd39639fe548f77a66f02b9f02d74db5246c85798d729bca96eb78e2205520c0fb216f26961e238d47db3bcbb2fd251296bbdaca80b2d83076954021e49a50d59698ebe9cb871a58212dc4b16fe25a926c5aa9b709f74b7f4fb8050eecd589c61ae60bc5abeb4f12ae3159f79596d30f8f3015b3fa8a5c50dc01527284da248747592689bbbad3d8de41bbc2de72772a3152009847e702a1fe23c8375822c9cc9375506fbcc5194c028d57a04f468c3bdc16c19af651e4c825fad715874e0408efe9f89b1ec866d87324c287685820291228168c903c9bc151e6163a4a466f6d16712080916781157dd02d1fe9d0e59c9f0741ad046afec2b2f4dc3c3c526ce3248326501e06aff3574c5d3a5bac9479b3e3584b738c748f53e29dfd7d999134ae922a425eecd06c2c0fb709f1aef9d9df125ddc07c9d02676dc6a705ffe7fa9672f57380fe88c9595ee6e341ffbc7b38b1cfe37c87a2bf1d35c7a770c1608bd1e4448542270913c880a56d372816a30bf8556edf8391bcecb8c89602e996e9958ec84c168e447117a650fba0ab3a297b566d3d5b58751be39798437f2fbb3eedbc03d8bb886f2a03b3e879e5db11708a8930ded16ad669b3dc19e811fecc967da05ee0b2a0b628da60abb45611736c790241679ee46a6bbfd7234aa86cf49f41f984971fe8c23e4e5296748c245ff7dc6711a3813139f69677a74385089d7f5a8ba439be63a72ed81caaed1891586b5ab4dcfea75a252bda347489b172babde966483bc78f8fda30b15edcc176311091f72dc7c6e73172658813784dfbc837e3a283c3cca3ea0d5f41718ade096db607377118b75381d2d9759f210790b8d1f6e5214aaa61d8bb0a4d0a3256aef437eada410c0d34563bcfd4678af647c9d4380af2e82b9e2b3924ff01715d6167e238ac868b5151c2cf48eb3e3c6b11b8369dc99be04c2653eedfc5711f21b48ba8996167b922b512b5d56f484d311251eccc94b7735c75c6735513c6e8cbc0f343a7cfe485dce5af6a7206980141a69dd81aefbbd0c9858428990567e3e2397fc22db911897c79e30de9ec0ed698357598ffd73c5674549d588a091a4377d73ef21201b319ad28ea3798ec1bf2cb3ca074d76ffff0aee2ad816041e6bb381acc79114215db200a8e7c724ecaffb92c20363763841662dd2a7161a9cac3a818d7375a0b4d83217f2056b0e3a1a52e98ced53619aaf537ce552ee0f4c433736752cc26c50ff86a7c402b3ce926cf6a27d2f003168c6e8b46003c967b854817d635c494cfaa2c53be2dbbaf32142dd503b1a45ec027d5314cf92988e3a8fbcd975a0e0c7ee04654</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AI】chatgpt入门</title>
      <link href="/posts/3GDXTCB/"/>
      <url>/posts/3GDXTCB/</url>
      
        <content type="html"><![CDATA[<p>OpenAI注册闭坑、GPT Api调用指南<span id="more"></span></p><h3 id="注册-OpenAI">注册 <a href="https://openai.com/">OpenAI</a></h3><p>跟这个教程操作即可：<a href="https://www.awyerwu.com/9829.html">ChatGPT最新注册教程</a></p><p>核心问题是两个：</p><ol><li>借助 VPN 绕过 OpenAI 的IP检测封控，直接挂美国</li><li>借助 <a href="https://sms-activate.org/">sms-activate</a> 接收外国手机的验证码</li></ol><h3 id="调用-GPT-Api">调用 <a href="https://platform.openai.com/docs/api-reference">GPT Api</a></h3><p>开发环境使用 <code>python3</code>，通过 <code>pip3 install openai</code> 安装依赖包。<br>注意生产环境也要挂VPN，下面是一段测试代码：</p><pre><code class="language-python"># -*- coding: utf-8 -*-import openaiopenai.api_key = "***********************"completion = openai.ChatCompletion.create(  model="gpt-3.5-turbo-0613",  messages=[    {      "role": "user",       "content": "解释厄尔尼诺现象",    }  ],  temperature = 0.7)print (completion.choices[0].message.content)</code></pre><h3 id="开源推荐">开源推荐</h3><ul><li><a href="https://github.com/zhayujie/chatgpt-on-wechat">chatgpt-on-wechat</a></li></ul><p>微信聊天机器人，支持GPT3.5/GPT4.0/文心一言/讯飞星火模型，支持个人微信、公众号、企业微信，支持文本、语音和图片的处理。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【量化】数据专题</title>
      <link href="/posts/quant-data/"/>
      <url>/posts/quant-data/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>交易需要与 <strong>哪些数据</strong> 打交道？</li><li>如何获取 <strong>可靠、实惠</strong> 的数据？</li><li>如何高效地 <strong>存储、读写、计算</strong> 数据？</li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;数据管线&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Tick&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;Bar&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;K-line&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#数据类型\&quot;>数据类型</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;基本数据&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;市场(行情)数据&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;第三方数据&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#数据提供商\&quot;>数据提供商</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#数据格式\&quot;>数据格式</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;金融常识&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#复权\&quot;>复权</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#财报数据\&quot;>财报数据</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#Pandas\&quot;>Pandas</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#性能相关\&quot;>性能相关</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;#内存相关\&quot;>内存相关</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#时间相关\&quot;>时间相关</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="数据管线">数据管线</h2><p>交易数据可以分为三类（从左到右）：</p><p><img src="/images/quant-data-chart.png" alt=""></p><p>换一个角度理解：Bar是Tick数据的重要性采样（有点像光栅化），K-Line是Bar数据的可视化展现（有点像Pixel-Shading）。<br>在这个处理流程中，信息的原貌是不断被丢失的，因此<strong>越原始的数据，价值含量越高</strong>，就像《舌尖上的中国》所说：高端的食材，往往只需最简单的烹饪。</p><p>同时也不能忽略 图形化展示的意义，因为：</p><ul><li><strong>主观交易</strong> 依赖 K线图、技术指标 等作出趋势性、预测性地判断</li><li><strong>量化交易</strong> 往往需要借助 Tick数据 去解读更多的市场微观信息。</li></ul><p><strong>如何理解Tick数据?</strong></p><ul><li>交易所收发交易数据的<strong>最小间隔</strong></li><li>可能是每一笔撮合成交（A股），也可能是每500毫秒的交易快照（商品期货）</li></ul><h2 id="数据类型">数据类型</h2><p>狭义理解的金融数据，大概只有 成交量 和 价格 等关键值，但真正的金融市场是错综复杂、影响纷繁的，需要从如下几个领域考量：</p><ul><li><p><font color="#ef6d3b"><strong>Fundamental Data</strong></font><br><strong>基本面数据</strong>，主要是企业的营收、财报等宏观信息，传统投资领域中的分析师，往往是对着海量的财报作出投资决策的。</p></li><li><p><font color="#ef6d3b"><strong>Market Data</strong></font><br><strong>市场数据</strong>，主要是市值、市盈率、股价、成家量等金融数据，特点是 频率高、时效性强、噪声大，提取有价值信息的难度也非常大。</p></li><li><p><font color="#ef6d3b"><strong>Analytics Data</strong></font><br>（第三方）<strong>分析数据</strong>是很宽泛的概念，可能是机构的研报、社交舆情的数据，甚至是相关政策的颁布、天气信息的变幻等等。特点是获取难度大、归纳提取有效信息难度更大。</p></li></ul><hr><p>考虑到数据获取的难度因素，我们一般基于 <code>Market Data</code> 的数据进行提炼和研究，这部分信息获取公开、透明、平等，且能得到的数据量也是最大的。<br>下面介绍一些常见的市场数据的提供商（获取渠道）。</p><h2 id="数据提供商">数据提供商</h2><p>这里推荐几个具有一定性价比的渠道，相较于个人投资者（爱好者）而言：</p><table><thead><tr><th style="text-align:center">渠道</th><th style="text-align:center">价格</th><th style="text-align:center">准确度</th><th style="text-align:center">覆盖度</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://baostock.com/">baostock</a></td><td style="text-align:center">免费</td><td style="text-align:center">中</td><td style="text-align:center">A股</td></tr><tr><td style="text-align:center"><a href="http://www.jinshuyuan.net/">金数源</a></td><td style="text-align:center">中</td><td style="text-align:center">高</td><td style="text-align:center">期货、A股</td></tr><tr><td style="text-align:center"><a href="https://shinnytech.com/">天勤量化</a></td><td style="text-align:center">部分免费</td><td style="text-align:center">高</td><td style="text-align:center">期货、A股(18年起)</td></tr><tr><td style="text-align:center"><a href="http://www.juejinshuju.com/">掘金数据</a></td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">期货、A股、数字货币</td></tr></tbody></table><p>如果你的策略有所起色，甚至扭亏为盈了，后面可以考虑向专业的数据提供商（如<a href="https://www.wind.com.cn/mobile/WDS/zh.html">Wind</a>、同花顺）购买昂贵但准确的市场数据，有句话说得好：贵的东西总有贵的道理！</p><p><strong>再按照股票、期货细分来看：</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">频率</th><th style="text-align:center">数据体量</th><th style="text-align:center">推荐数据源</th></tr></thead><tbody><tr><td style="text-align:center">A股 ①</td><td style="text-align:center">5档逐笔</td><td style="text-align:center">1T /年</td><td style="text-align:center">tqsdk白嫖</td></tr><tr><td style="text-align:center">1990年~2023年</td><td style="text-align:center">1 min</td><td style="text-align:center">25G /年</td><td style="text-align:center">tqsdk白嫖</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5 min</td><td style="text-align:center">5G /年</td><td style="text-align:center">baostock免费</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">日k</td><td style="text-align:center">累计 2G</td><td style="text-align:center">baostock免费</td></tr><tr><td style="text-align:center">期货 ②</td><td style="text-align:center">tick</td><td style="text-align:center">单品种 1G /年</td><td style="text-align:center">taobao购买 / tqsdk</td></tr><tr><td style="text-align:center">2016年~2023年</td><td style="text-align:center">1 min</td><td style="text-align:center">累计 1.5G</td><td style="text-align:center">tqsdk</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5 min</td><td style="text-align:center">累计 0.3G</td><td style="text-align:center">tqsdk</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">日k</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数字货币</td><td style="text-align:center">tick</td><td style="text-align:center"></td><td style="text-align:center">掘金数据</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">1 min</td><td style="text-align:center"></td><td style="text-align:center">掘金数据</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5 min</td><td style="text-align:center"></td><td style="text-align:center">掘金数据</td></tr></tbody></table><ul><li>① <strong>国内主要上市股票约 5000 只</strong>，平均上市时间 11.9 个年份（截至发文日期 2023年10月）<ul><li><a href="http://www.sse.com.cn/market/stockdata/statistic/">上交所 2288只</a> 主板(1727)，科创板(561)</li><li><a href="https://www.szse.cn/market/">深交所 2827只</a> 主板(1506)，创业板(1321)</li><li>首支上市日期为 1990年 平安银行</li></ul></li><li>② <strong>国内商品期货、金融期货等，约 80 个种类</strong></li></ul><h2 id="数据格式">数据格式</h2><p>推荐阅读：<a href="/posts/data-perf/">csv, hdf5, feather 三种数据性能对比</a></p><h2 id="复权">复权</h2><p>在理解为什么要复权之前，先理解几个金融市场的基本概念：</p><ul><li><p><strong>分红：每10股派发6元</strong><br>本质是将股票市值中的6元兑换成现金，发放到你的账户，等同于套现</p></li><li><p><strong>拆股：每1股拆分为5股</strong><br>本质是因为股价过高作拆分，单只股票价格也会变成五分之一</p></li></ul><p>金融数据中的市场价格（包括开盘价、收盘价），往往都是不考虑分红、拆股的背景条件，因此经常见到股价突然腰斩 <code>90%</code> 的情况，其实并不是股价跌这么多，而是因为该上司公司拆股了。</p><p>因此，复权价格就是为了<strong>抹除非市场因素带来的涨跌，让价格保持平滑、连续性</strong></p><div class="admonition note"><p class="admonition-title">前复权和后复权</p><ul><li>前复权：以 <strong>第一天</strong> 的价格为基准，推算后面的价格</li><li>后复权：以 <strong>最后一天</strong> 的价格为基准，推算之前的价格</li><li><a href="https://www.zhihu.com/question/31004373">知乎: 通俗易懂的解释前复权，不复权和后复权有什么区别？</a></li></ul></div><h2 id="财报数据">财报数据</h2><p><strong>核心是区分毛利润和净利润</strong></p><ul><li>毛利润(gross profit) = 收入 - 生产成本</li><li>净利润(net income)= 毛利润 - 销售/管理/研发/财务成本 - 税收</li></ul><p>以白酒行业为例，假设一瓶售价为880的白酒，其原材料成本是80元，则其毛利率为 <code>800/880=91%</code>。观察国内相关上司企业，就能够发现 <code>90%+</code> 的毛利率是普遍现象。<br>但由于销售成本（如广告）和人工成本的存在，其真实的净利率往往在 <code>50%</code> 以下。</p><p><strong>指标的含义?</strong></p><ul><li>毛利润衡量的是<strong>产品价值</strong>，毛利率高，说明这是一门好生意（白酒、互联网）</li><li>净利润衡量的是<strong>企业价值</strong>，净利率高，说明其赚钱能力强（九安医疗 …）</li></ul><div class="admonition warning"><p class="admonition-title">留几个没想明白的问题</p><ol><li>对于没有实体的 <strong>互联网行业</strong>，如何衡量其生产成本?</li><li>毛利润是否扣除 <strong>员工工资</strong>?</li><li><strong>为什么要统计毛利率?</strong> 光有净利率不足够吗?</li></ol></div><h2 id="Pandas">Pandas</h2><p><a href="https://pandas.pydata.org/">Pandas</a> 是 应用最广泛的 Python数据处理库，在量化交易、数据清洗中非常重要。</p><h4 id="性能相关">性能相关</h4><ul><li><a href="https://numba.readthedocs.io/en/stable/user/5minguide.html"><font color="#1A9BFF"><em><strong>numba</strong></em></font></a></li><li>读取较多个csv文件耗时较长, 如何用 <font color="#1A9BFF"><em><strong>multiprocess + pandas</strong></em></font> 读取?</li></ul><pre><code class="language-python">from multiprocessing import Pooldef read_csv(file_name):    return pandas.read_csv(file_name)file_list = [...]with Pool(processes=6) as pool:    df_list = pool.map(read_csv, file_list)    df_all = pd.concat(df_list, ignore_index=True)    """ 推荐在read_csv里将数据写到一个全局的dict """</code></pre><h4 id="内存相关">内存相关</h4><p>为了节省runtime内存, DataFrame默认读取的是<code>float64</code> &amp; <code>int64</code>格式, 占用内存大且浪费</p><ul><li><code>np.dtype('int32')</code>: 表示int32类型</li><li><code>np.iinfo('int64').max</code>: 获取int64的最大值</li><li><code>np.finfo('float64').max</code>: float64</li><li><code>int64: 64 bits = 8 byte</code></li></ul><p>建议如下:</p><ul><li>不考虑负数, 用uint代替int</li><li>能用<code>int16</code>, 就不要用<code>int32</code></li><li><font color="#FF1E10"><strong>为什么<code>float64</code>比<code>int64</code>表示范围大? 占内存是一样的</strong></font></li></ul><h4 id="时间相关">时间相关</h4><p>这里要写很多篇幅, 先介绍Pandas自带的转化:<br><font color="#FF1E10"><strong><code>TODO</code></strong></font><br><code>pandas.to_datetime(df)</code>: 返回类型是pandas的timestamp, 可以访问.date(), .day</p><h4 id="注意项">注意项</h4><ul><li><p>读取中文报错: <code>pd.read_csv(file_name, encoding = "gbk")</code></p></li><li><p>UserWarning: Pandas doesn’t allow columns to be created via a new attribute name</p><ul><li>正确写法: <code>df['name'] = xxx</code></li><li><s>错误写法: <code>df.name = xxx</code></s></li></ul></li></ul><h4 id="复杂操作">复杂操作</h4><ul><li><p><strong>groupby</strong></p><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html?highlight=groupby#pandas.DataFrame.groupby">Pandas Groupby</a></li><li><a href="https://zhuanlan.zhihu.com/p/101284491">知乎</a></li><li><code>DataFrame.groupby(by=None)</code>: 按照by这一column筛选</li><li><code>Group.get_group()</code>: 获取指定的group, 返回DataFrame</li></ul></li><li><p><strong>merge</strong></p><ul><li>DataFrame, Series之间任意合并</li><li>注意<code>left</code>, <code>right</code>, <code>outer</code>等几种方式, 底层就是<code>SQL</code>的逻辑</li><li>merge完赋值如果不对齐，可以去重: <code>mf = mf[~mf.index.duplicated()]</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【名人访谈】BBC采访马斯克</title>
      <link href="/posts/2YS1Y71/"/>
      <url>/posts/2YS1Y71/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://www.youtube.com/watch?v=donC2VuVTtM"><strong>Youtube采访视频 2023年4月21日</strong></a></li><li><a href="https://www.bilibili.com/video/BV18F411y7ac"><strong>B站解说视频</strong></a></li><li>马斯克的核心技能：屌爆的思维逻辑 + 烂熟的辩论技巧</li><li>这一派还有个大佬是罗永浩，可以看他锤王自如的视频</li><li><font color="#FF1E10"><strong>TODO:</strong></font> 文章排版不满意，等录个视频锻炼口头表达</li></ul></div><h2 id="采访背景">采访背景</h2><h3 id="马斯克方面">马斯克方面</h3><blockquote><p>阅读材料：<a href="https://zh.wikipedia.org/zh-hans/%E5%9F%83%E9%9A%86%C2%B7%E9%A9%AC%E6%96%AF%E5%85%8B%E6%94%B6%E8%B4%AD%E6%8E%A8%E7%89%B9%E6%A1%88">维基百科 埃隆·马斯克收购推特案</a></p></blockquote><p>马斯克与 <strong>2022年10月</strong> 以 <strong>440亿美金</strong> 价格，收购美国社交巨头 <em><strong>Twitter</strong></em>，其过程经历三个阶段：</p><ul><li>【提出】马斯克提出收购，遭到Twitter和市场反对</li><li>【后悔】马斯克发现Twitter用户数据造假，尝试放弃收购计划</li><li>【被迫】马斯克迫于法律诉讼，被迫收购Twitter</li></ul><p>收购 <em>Twitter</em> 后，马斯克主要实行四大措施：</p><ul><li>大量裁员（8000人-&gt;1500人）</li><li>开源 <em>Twitter</em> 内容推荐算法</li><li>删除垃圾机器人</li><li>退出收费认证服务</li></ul><h3 id="BBC方面">BBC方面</h3><p>其次，BBC的采访素来以 <strong>尝试刁难采访者，角度狠辣，制造爆点话题</strong> 为主，围绕收购案本身，（从BBC角度）有如下几点值得 <strong>埋坑</strong>：</p><ol><li>【道德角度】接手公司后大量裁员</li><li>【媒体角度】Twitter充斥越来越多的虚假信息</li><li>【决策角度】收费认证被所有人吐槽</li></ol><p>所以，这次采访不是一个歌颂丰功伟绩的 “单口相声”，而更像是互相博弈的 “双人对线”，可以说火药味十足。</p><h2 id="采访正题">采访正题</h2><ul><li><font color="#ef6d3b"><strong>❓BBC: 聊聊Twitter收购案</strong></font></li></ul><p>这里马斯克谈了两点，【1】为什么停止收购，【2】强调最终收购是迫不得已。</p><blockquote><p>在谈【1】时，马斯克举了一个非常形象的例子：</p><ul><li>你想购买一袋大米，本来约定允许10%的米是坏的，最后发现30%的米都是坏的。这显然无法接受。</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【进攻三连】：1. 你解雇大量员工，2. 你裁员的行为很随意，3. 你毫无同情心</strong></font></li></ul><p>这里有三个观点，分别是【事实】-&gt;【表象】-&gt;【推断】，层层推进，层层致命。</p><blockquote><p><strong>马斯克的回复很经典</strong>，其实核心是马保国的 <strong>接化发</strong> （太极）：</p><ul><li>【接】：部分认同，但留有余旋 （Musk：确实裁员了…）</li><li>【化】：转移到对自己有利的话题 （Musk：公司账面只能4个月，不裁员所有人都死…）</li><li>【发】：用刁钻假设，反问对方（Musk：换做你怎么做? <a href="https://zhuanlan.zhihu.com/p/338604183">有轨电车难题</a>…）</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【换角度进攻】：你是世界首富，为什么不自己掏钱帮自己公司?</strong></font></li></ul><blockquote><p>这里马斯克没有技巧，全靠<strong>真诚+卖惨</strong>：我贱卖了很多特斯拉的股票才能买下Twitter（别再道德绑架俺…）</p></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【问句埋坑】：你是否后悔裁员？</strong></font></li></ul><p>这是记者经典的疑问圈套，不论回答是否都是下策。</p><blockquote><p>回答是：马斯克认错了！亲口承认裁员不明智<br>回答否：马斯克心狠手辣！裁员毫无愧疚</p></blockquote><p>因此马斯克直接不回答该问题，而是侧面讲了两个自己的观点：</p><blockquote><p>【1】公司有自己的运转规律<br>【2】卖特斯拉股票很困难，它还导致其市值暴跌（寻求弱势低位）</p><ul><li>但如果光说第一点还不够，因为是 <strong>贱卖股票</strong> 让马斯克把自己放到了一个弱势地位，有效阻止记者继续纠缠。</li></ul></blockquote><ul><li><font color="#ef6d3b"><strong>❓BBC【聊政治，埋坑】：Twitter被你收购后解封了Trump，他何时回归?</strong></font></li></ul><p>政治是敏感话题，在西方也是如此。因此马斯克直截了当地说 <strong>不知道</strong>。<br>到这里还没完，高手厉害之处就是，<strong>抓住任何机会宣传自己的企业</strong>，于是他说：</p><blockquote><p>我在选举投了Biden，但解封了Trump，说明 <strong>Twitter是自由发声的地方</strong></p></blockquote><p>牛逼！但BBC也是高手，顺着自由发声的话题，立刻谈到Twitter的一些负面问题 ↓</p><ul><li><font color="#ef6d3b"><strong>❓BBC【开始抨击】：Twitter强调言论自由，是否助长错误信息（言论）?</strong></font></li></ul><p>再一次经典的疑问圈套，马斯克作为高手，自然不会落入俗套。他直接反问记者：<strong>谁定义错误信息？</strong>，<strong>BBC难道没有发布过错误信息？</strong></p><ul><li><font color="#ef6d3b"><strong>❓BBC【开始抨击】：Twitter裁掉整个内容审核部门，是否助长仇恨言论?</strong></font></li></ul><blockquote><p>这里介绍一个背景，大部分的社交媒体，都是通过人工（为主）+AI（为辅）过滤仇恨言论（如政治、宗教、法律），但马斯克背其道而行之（裁掉部门）。</p></blockquote><p>马斯克仍然 <strong>以反问起手</strong>：什么是仇恨言论？你用过Twitter吧（必然用过）。那举一个你见过的仇恨言论的例子。</p><blockquote><p>【若记者举了】可以逐点反驳击破，因为很多仇恨言论是片面的，如LSBT，且没法在公开场合说<br>【若记者不举】根据 “谁主张 谁举证” 的规则，其不攻自破</p></blockquote><h2 id="马斯克传达的观念">马斯克传达的观念</h2><p><strong>俗手总是去证明自己，高手往往是在表达自己</strong></p><p>抛开辩论技巧，大佬传达的观念也是值得学习的，马斯克在一个小时的采访中主要传达了这几个观点:</p><ul><li><p>【方法论】想生存? 降本增效</p><ul><li>一方面裁员，一方面裁设备（虽然导致服务崩溃）</li><li>拉回旧的广告商，提高收入</li></ul></li><li><p>【方法论】开源核心算法</p><ul><li>就像餐厅把自己的后厨公开到幕前。</li><li>只有公开透明的算法，才能让民众感到安心（尤其是社交领域）</li></ul></li><li><p>【价值观】社交媒体的意义</p><ul><li>马斯克不在乎赚钱（前提是企业能活下去）</li><li>好的社交媒体，是人们信赖的真相的来源，且人们会自发去评判和追求事物的真相</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++11】lvalue &amp; rvalue (references)</title>
      <link href="/posts/rvalue/"/>
      <url>/posts/rvalue/</url>
      
        <content type="html"><![CDATA[<p><code>C++</code> 左值、右值引用<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://www.internalpointers.com/post/understanding-meaning-lvalues-and-rvalues-c"><em><strong>Understanding the meaning of lvalues and rvalues in C++</strong></em></a></li><li><a href="https://www.internalpointers.com/post/c-rvalue-references-and-move-semantics-beginners"><em><strong>C++ rvalue references and move semantics for beginners</strong></em></a></li><li><a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html"><em><strong>Move semantics and rvalue references in C++11</strong></em></a></li></ul></div><div class="markmap-container" style="height:200px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;左值和右值&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#左值-→-右值\&quot;>左值 → 右值</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#右值-→-左值\&quot;>右值 → 左值</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;右值引用&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#move语义-🔥\&quot;>move语义</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#std-move\&quot;>std::move</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#std-remove-reference\&quot;>std::remove_reference</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#三种传参\&quot;>三种传参</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#1-const-T\&quot;>const T</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#2-const-T\&quot;>const T&amp;amp;</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#3-T\&quot;>T&amp;amp;&amp;amp;</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="前言">前言</h2><p>从接触、学习、运用 <code>C++</code> 至今，左右值引用一直是自己困惑的点。伴随着现代C++的发展，它们开始扮演越来越重要的作用（如 <code>std::move</code>、<code>std::remove_reference</code>…）。<br>这篇争取彻底搞懂他们。</p><p>先看 <code>gcc</code> 一个编译报错，为什么 <code>666 = x</code> 的语法是错误的？<br><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as left operand of assignment</em></p><p>编译器是在说：<strong>赋值符号 <code>=</code> 的左操作数，必须是左值 <code>lvalue</code> ! 换句话说，这里的 <code>666</code> 不是一个左值。</strong></p><pre><code class="language-c">int x;666 = x;</code></pre><h2 id="左值和右值">左值和右值</h2><p>如何区分 左值 和 右值？</p><ul><li><strong><code>lvalue</code>：指向明确的内存地址</strong>，又称 <code>variable</code></li><li><strong><code>rvalue</code>：没有明确的内存地址</strong>，又称 <code>literal constant</code></li></ul><p>下面看几个示例：</p><ul><li><code>int x = 666</code>：<code>x</code> 是 <code>lvalue</code>，<code>666</code> 是 <code>rvalue</code></li><li><code>int* y = &amp;x</code>：<code>x</code> 是 <code>lvalue</code>，<code>y</code> 是 <code>lvalue reference</code></li></ul><p>编译规则，赋值<code>=</code> 和取地址<code>&amp;</code> 的左边必须是 <code>lvalue</code>，不然会报如下错误：</p><blockquote><p><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as left operand of assignment</em><br><em><font color="#FF1E10"><strong>error:</strong></font> lvalue required as unary ‘&amp;’ operand`</em></p></blockquote><div class="admonition warning"><p class="admonition-title">区分 左值 和 左值引用</p><ul><li><code>int x = 1</code>：x是左值</li><li><code>int&amp; y = x</code>：y是左值引用</li></ul></div><h3 id="function-reference">function reference</h3><p>函数的返回值可以是 左值，也可以是 右值。</p><ul><li>右值 ×</li></ul><pre><code class="language-c">int setValue() { return 6; };setValue() = 3; // error: lvalue required as left operand of assignment</code></pre><ul><li>左值 √</li></ul><pre><code class="language-c">int x = 100;int&amp; setValue() { return x; };setValue() = 1;</code></pre><h2 id="左值-→-右值">左值 → 右值</h2><p>左值 经常会被转化为 右值，如下示例：</p><ul><li><code>x, y</code> 都是 左值</li><li><code>x + y</code> 被转化为 右值</li></ul><pre><code class="language-c">int x = 1;int y = 3;int z = x + y;   // ok</code></pre><p>上面经历了一次 <strong>lvalue -&gt; rvalue</strong>  的隐式转换，很多操作符（<code>+, -, /</code>）都会提供。</p><h2 id="右值-→-左值">右值 → 左值</h2><p>右值 到 左值 的转换是被禁止的，如下代码是非法的：</p><pre><code class="language-c">int&amp; x = 10;// error: cannot bind non-const lvalue reference of type 'int&amp;' to an rvalue of type 'int'</code></pre><h2 id="右值引用-🔥">右值引用 🔥</h2><p>C++ 的一条重要编译规则是：<strong>你无法绑定一个 右值 的地址，除非绑定到一个 <code>const</code> 类型</strong>，例如：</p><pre><code class="language-c">int&amp; x = 666; // error: cannot bind non-const lvalue reference of type 'int&amp;' to an rvalue of type 'int'const int&amp; x = 666; // OKstd::string s1 = "Hello ";std::string s2 = "world";const std::string&amp; s3 = s1 + s2;s3 += " luhao";  // error: no match for 'operator+=' (operand types are 'const std::string'</code></pre><p>但是上面的写法有个弊端，<strong>即无法再修改 <code>s3</code> 的值</strong>。<br>为了能够修改右值（即临时变量），<code>C++11</code> 正式引入右值引用（<code>rvalue reference</code>），其符号是 <code>&amp;&amp;</code>：</p><pre><code class="language-c">std::string s1 = "Hello ";std::string s2 = "world";std::string&amp;&amp; s3 = s1 + s2;s3 += " luhao"; // OK</code></pre><p>上面的示例看出来用处不大，<strong>因为 <code>rvalue reference</code> 真正大展拳脚的地方，是在 移动语义（<code>move semantics</code>）。</strong></p><h2 id="move语义-🔥">move语义 🔥</h2><p>阅读资料</p><ul><li><a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html"><em><strong>Move semantics and rvalue references in C++11</strong></em></a></li></ul><p><strong>移动语义 是一种利用右值引用的技术，来避免拷贝临时变量的优化手段。</strong></p><h3 id="为什么需要-move-semantics-💡">为什么需要 move semantics? 💡</h3><p>假设 <code>class Holder</code> 是一个(内存)非常繁重的类，考虑到如下的构造和拷贝构造函数。<br>当调用 <code>Holder h1(h)</code> 时，因为 <code>std::copy</code> 造成巨大的内存拷贝开销，如果后文中 <code>h</code> 也不再继续使用，为什么不尝试将 <code>h</code> 转交给 <code>h1</code> 呢?</p><pre><code class="language-c">class Holder{public:    Holder(int size) {        m_data = new int[size];        m_size = size;    }    Holder(const Holder&amp; other)    {        m_data = new int[other.m_size];        std::copy(other.m_data, other.m_data + other.m_size, m_data);        m_size = other.m_size;    }    ~Holder() { delete[] m_data; }private:    int*   m_data;    size_t m_size;}int main(){    Holder h(10000);    Holder h1(h); // 调用 std::copy 带来非必要开销    return 1;}</code></pre><p>借助移动语义，可以优化掉上面的拷贝。注意到下面使用了 <a href="#std-move"><em><strong>std::move</strong></em></a>，它能将左值转化为右值，是C++标准库的成员函数，后面有介绍。</p><pre><code class="language-c">Holder(Holder&amp;&amp; other){    // 赋值    m_data = other.m_data;    m_size = other.m_size;    // 清空other的状态    other.m_data = nullptr;    other.m_size = 0;}int main(){    Holder h(10000);    Holder h1(std::move(h));    return 1;}</code></pre><h3 id="std-move">std::move</h3><p>阅读材料：</p><ul><li><a href="https://en.cppreference.com/w/cpp/utility/move"><em>cppreference</em></a></li><li><a href="https://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-api-4.5/a00936_source.html"><em>libstdc++: move.h</em></a></li></ul><p>阅读 <code>std::move</code> 的源码，其实只是作了类型转化，将 任意形式的<code>_Tp</code> 转化成右值:</p><ul><li><code>std::remove_reference</code>：去掉引用</li><li><code>static_cast</code>：隐式转换</li></ul><div class="admonition note"><p class="admonition-title">std::move</p><ul><li><code>move</code> 右值：直接返回</li><li><code>move</code> 左值：转成右值，并返回</li></ul></div><pre><code class="language-c">  /**   *  @brief  Convert a value to an rvalue.   *  @param  __t  A thing of arbitrary type.   *  @return The parameter cast to an rvalue-reference to allow moving it.  */  template&lt;typename _Tp&gt;    constexpr typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;    move(_Tp&amp;&amp; __t) noexcept    { return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t); }</code></pre><h3 id="std-remove-reference">std::remove_reference</h3><p><code>remove_reference</code> 顾名思义，就是去除任意类型的引用，借助模板实现。<br>核心是对于 <code>_Tp&amp;</code> 和 <code>_Tp&amp;&amp;</code> 这两种带引用的传参，需要去掉其引用的部分，只获取其类型（通过 <code>::type</code> 获取）</p><pre><code class="language-c">  template&lt;typename _Tp&gt;    struct remove_reference    { typedef _Tp   type; };  // 特化  template&lt;typename _Tp&gt;    struct remove_reference&lt;_Tp&amp;&gt;    { typedef _Tp   type; };  // 特化  template&lt;typename _Tp&gt;    struct remove_reference&lt;_Tp&amp;&amp;&gt;    { typedef _Tp   type; };</code></pre><h2 id="三种传参">三种传参</h2><h3 id="1-const-T"><code>1. const T</code></h3><p>常量值传递，默认有一次拷贝开销。<br>如果是 <code>builtin-types (int、float ...)</code> 推荐使用这种传递方式</p><h3 id="2-const-T"><code>2. const T&amp;</code></h3><p>常量引用传递，<code>&amp;</code> 避免拷贝带来的开销，<code>const</code> 避免被修改。<br>但会将生命周期延续</p><h3 id="3-T"><code>3. T&amp;&amp;</code></h3><p>右值传递，避免拷贝带来的开销，推荐复杂结构体如 <code>std::vector ...</code><br>缺点是调用者必须传入右值，否则编译期间报错，如果是通用接口比较难受</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++17】refl-cpp</title>
      <link href="/posts/refl-cpp/"/>
      <url>/posts/refl-cpp/</url>
      
        <content type="html"><![CDATA[<p>品读<code>C++</code>经典反射库<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>源码：<a href="https://github.com/veselink1/refl-cpp"><em><strong>veselink1/refl-cpp</strong></em></a></li><li>blog：<a href="https://veselink1.github.io/blog/cpp/metaprogramming/2019/07/13/refl-cpp-deep-dive.html"><em>refl-cpp — A deep dive into this compile-time reflection library for C++</em></a></li><li>这篇博客大致是英文版的 直译 + 自己理解，旨在提高对 <code>templates</code> + <code>reflections</code> 的掌握</li><li>精读blog ➜ 理解源码 ➜ 上手仿造</li></ul></div><h2 id="目录">目录</h2><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#compile-time%E5%8F%8D%E5%B0%84">compile-time反射</a></li><li><a href="#%E6%9E%84%E5%BB%BA%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98">构建类的成员</a></li><li><a href="#%E4%BD%BF%E7%94%A8-macros-%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81">使用 <code>macros</code> 组织代码</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%8F%8D%E5%B0%84">函数反射</a></li><li><a href="#%E9%81%8D%E5%8E%86%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98">遍历类的成员</a></li></ul><h2 id="前言">前言</h2><p><code>refl-cpp</code> 的设计初衷是：</p><ul><li>支持 在 <strong><code>C++17</code></strong> 及更高版本 <strong>提供编译期反射（Compile-time）</strong> 的方法。</li><li>支持 <code>enumeration</code>，<code>introspection</code><ul><li><code>enumeration</code>：类似 <code>Python dir()</code> 枚举对象所有的属性</li><li><code>introsection</code>：类似 <code>Python getattr</code> 访问对象的指定属性</li></ul></li><li>支持 类型模板、成员模板</li><li>支持 <code>attributes</code> <font color="#FF1E10"><strong>TODO</strong></font></li></ul><p><code>refl-cpp</code> 的设计避免如下：</p><ul><li>避免 使用宏魔法</li><li>避免 <code>Private</code> 私有成员的反射</li><li>避免 运行时 按名称查询类型信息</li></ul><h2 id="compile-time反射">compile-time反射</h2><p>首先 <code>refl-cpp</code> 是一个 <code>compile-time</code> 的反射库，这意味着它不会维护一个 runtime 的数据结构来实现反射目的，例如下面是不可取的：</p><pre><code class="language-c">struct TypeInfo {    std::string name;           // 对象的类型名称    std::vector&lt;?&gt; members;     // 对象的所有成员    std::vector&lt;?&gt; attributes;  // 对象的所有成员取值}// ↓ 维护一个全局的反射数据结构std::unordered_map&lt;std::string, TypeInfo&gt; s_typeRegistry;</code></pre><p>相反，<code>refl-cpp</code> 的做法是，通过 cpp模板特化 以一种类相关的方式（<code>type-dependent</code>）来存储 <code>metadata</code>，例如下面的做法：</p><pre><code class="language-c">template &lt;typename&gt; struct TypeInfo {};// ↓ Point类的编译期信息template &lt;&gt;struct TypeInfo&lt;Point&gt; {  static constexpr char name[] = "Point";  ??? members = {};  ??? attributes = {};};</code></pre><h2 id="构建类的成员">构建类的成员</h2><p>上一节提供了存储 类信息 的方法，但是如何存储 其成员变量（和方法）呢？<br><code>refl-cpp</code> 使用一种新颖的方式来存储：</p><pre><code class="language-c">template &lt;size_t N&gt;struct MemberInfo;/* 第0个成员的模板特化 */template &lt;&gt;struct MemberInfo&lt;0&gt; {  /* ... */};/* 第1个成员的模板特化 */template &lt;&gt;struct MemberInfo&lt;1&gt; {  /* ... */};static constexpr size_t MemberCount = 2;</code></pre><p><code>MemberInfo</code> 是类成员的模板特化，因此将其添加到 <code>TypeInfo</code> 的作用域（如下）。<br><code>typename Dummy</code> 是因为C++不允许成员完全模板特化，而部分成员的模板特化是允许的。<font color="#FF1E10"><strong>TODO</strong></font></p><pre><code class="language-c">template &lt;&gt;struct TypeInfo&lt;Point&gt; {  template &lt;size_t N, typename Dummy&gt;  struct MemberInfo;  /* 第0个成员的模板特化 */  template &lt;typename Dummy&gt;  struct MemberInfo&lt;0&gt; {    /* ... */  };  /* 第1个成员的模板特化 */  template &lt;typename Dummy&gt;  struct MemberInfo&lt;1&gt; {    /* ... */  };  static constexpr size_t MemberCount = 2;};</code></pre><h2 id="使用-macros-组织代码">使用 <code>macros</code> 组织代码</h2><p>上一节提供了粗略的 类 + 类成员 的反射方案，那么如何声明它们呢？<br>答案是借助 <code>macros</code> 实现（作者不是不建议使用宏么😂…）</p><ul><li><code>__COUNTER__</code> 是非标准库的宏，每次调用增加<code>1</code>，且从<code>0</code>开始</li><li>宏展开后的代码，可看示例：<a href="https://gist.github.com/veselink1/f4e2fa94bda0514631753f13a9b93f9b"><em>refl-cpp-deep-dive-5-generated.cpp</em></a></li><li>另外每个 <code>TypeInfo</code> 和 <code>MemberInfo</code> 还应该包含如下内容：<ul><li><code>static constexpr char name[] = …</code></li><li><code>static constexpr std::tuple&lt;…&gt; attributes = {…}</code></li><li><code>static constexpr auto* pointer = &amp;Type::MemberName</code></li></ul></li></ul><pre><code class="language-c">template &lt;typename T&gt;struct TypeInfo {};#define REFLECT_TYPE(TypeName) \  template&lt;&gt; struct TypeInfo&lt;TypeName&gt; { \    template &lt;size_t, typename&gt; struct MemberInfo; \    static constexpr size_t MemberIndexOffset = __COUNTER__ + 1; #define REFLECT_FIELD(FieldName) \  template &lt;typename Dummy&gt; struct MemberInfo&lt;__COUNTER__ - MemberIndexOffset&gt; \  {}; \#define REFLECT_END \    static constexpr size_t MemberCount = __COUNTER__ - MemberIndexOffset; \  };// Usage:REFLECT_TYPE(Point)   REFLECT_FIELD(x)   REFLECT_FIELD(y)REFLECT_END</code></pre><div class="admonition note"><p class="admonition-title">Tips: 借助 VisualStudio 查看宏展开</p><ul><li>鼠标悬停在宏上，点击 <code>Expand Inline</code><img src="/images/vs-macros-expand.png" alt=""></li></ul></div><h2 id="函数反射">函数反射</h2><p><code>refl-cpp</code> 还提供反射函数的功能。</p><p>为了区分成员（是变量还是方法），每个 <code>MemberInfo</code> 有一个公共的 <code>typedef</code>，它等同于 <code>refl::members::field</code> 和 <code>refl::members::function</code> 两者之一。而考虑到 函数的重载和模板，这部分功能（相对于反射成员）会更加复杂。</p><p><code>refl-cpp</code> 通过如下方法：<font color="#FF1E10"><strong>TODO</strong></font></p><pre><code class="language-c">template &lt;typename R, typename... Args&gt;auto resolve(R(*fn)(Args...), Args&amp;&amp;... args) -&gt; decltype(fn);/*   Imagine 12 more overloads of resolve for different pointer-to-member   combinations (plain, &amp;, &amp;&amp;, const, volatile qualifiers)*/template &lt;typename... Args&gt;static constexpr decltype(detail::resolve(&amp;Type::MemberName, std::declval&lt;Args&gt;()...)) pointer { &amp;Type::MemberName };</code></pre><p>↑ 上面这段代码理解起来较为困难，我们可以将其功能拆解一下，它是为了解决什么问题？</p><p>想象类型 <code>A</code> 具有两个函数重载：</p><ul><li><code>f(int)</code></li><li><code>f(const std::string)</code></li></ul><p>当拥有一个指向f的函数指针（<code>&amp;f</code>）时，编译器怎么知道调用哪个？<br><code>refl-cpp</code> 实际会帮助编译器 推导出正确的重载函数（通过将 <code>&amp;f</code> 作为参数传递给另一个函数的方式，来直接触发函数）。<br><code>resolve</code> 没有任何定义，它只是一个 <code>prototype</code>，作用是作为编译器的一个提示。</p><p>这种方法总结起来是：<strong>传递函数性质的参数（由 <code>std::decalval</code> 产生）</strong>。它的好处是：所有的参数类型转换都适用，即我们可以通过 <code>MemberInfo&lt;?&gt;::pointer&lt;int&gt;</code> 并得到一个 <code>void(*)(long)</code> 类型的指针作为结果。</p><h2 id="遍历类的成员">遍历类的成员</h2><p>前面讲了如何创建和存储类成员的 <code>metadata</code>，这节介绍如何遍历它们（<code>compile-time</code>）。<br>核心思想是 借助可变参数模板，创建一个 <code>TypeList</code> 的类型成员列表，并提供枚举的方法。</p><pre><code class="language-c">template &lt;typename... Ts&gt;struct TypeList {};</code></pre><p>!!! NOTE 这块讲的不是很细，没搞懂…</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【cpp】Templates</title>
      <link href="/posts/templates/"/>
      <url>/posts/templates/</url>
      
        <content type="html"><![CDATA[<p>C++模板、meta-programming<span id="more"></span></p><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Function Templates&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#模板基础\&quot;>模板基础</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#编译检查\&quot;>编译检查</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#参数推导\&quot;>参数推导</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#多参数\&quot;>多参数</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#函数重载\&quot;>函数重载</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Class Templates&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#模板特化\&quot;>模板特化</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;偏特化&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#模板特化-代码示例\&quot;>代码示例</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;SFINAE <font color=#FF1E10><strong>TODO</strong></font>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;std&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#⭐std-max\&quot;>std::max</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#⭐std-pair\&quot;>std::pair</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#⭐type-traits\&quot;>type_traits::is_integral</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;/posts/rvalue/#std-move\&quot;>std::move</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;反射 <font color=#FF1E10>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;/posts/refl-cpp/\&quot;>refl-cpp</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Function-Templates">Function Templates</h2><h3 id="模板基础">模板基础</h3><p>下面是一个最简单的函数模板示例：</p><pre><code class="language-c">template &lt;typename T&gt;T max (T a, T b){    return b &lt; a ? a : b;}</code></pre><ul><li><code>T</code> 是定义类型的变量，它可以是 <code>int</code>、<code>float</code>、任何class…</li><li><code>typename</code> 是关键字，<code>template&lt;class T&gt;</code> 是兼容 C++98 的一种正确写法</li><li>上面有两个潜在约束：1. <code>T</code>必须支持<code>&lt;</code>操作符，2. <code>T</code>必须支持拷贝构造函数，为了<code>return</code></li></ul><p>下面是简单的模板使用实例：</p><pre><code class="language-c">::max(7, 8);          // 8::max(1.2, 1.5);      // 1.5::max("abc", "abcd"); // abcd</code></pre><p>当调用上者时，模板会自动实例化为：</p><pre><code>int max(int, int);double max(double, double);char const* max(char const*, char const*);</code></pre><h3 id="编译检查">编译检查</h3><p>模板的编译检查分为两个阶段（<code>Two-Phase Translation</code>）</p><ul><li>定义阶段</li><li>实例化阶段</li></ul><pre><code class="language-c">template &lt;typename T&gt;void foo(T t){    undeclared(); // 未定义函数，定义阶段报错    undeclared(t); // 引用了T，所以实例化阶段才报错}</code></pre><h3 id="参数推导">参数推导</h3><p>编译器会根据传入参数的类型，自动推导 <code>T</code> 的取值</p><ul><li>若引用传递：不允许类型转化</li><li>若值传递：只允许退化（<code>decay</code>），<code>const</code>和<code>volatile</code>会被忽略。引用会被转化成引用的类型。</li></ul><pre><code class="language-c">int const c = 42;int i = 1;::max(i, c); // OK: (int, int)::max(c, c); // OK: (int, int)int&amp; ir = i;::max(i, ir); // OK: (int, int)int arr[4];::max(&amp;i, arr); // OK: (int*, int*)</code></pre><h3 id="多参数">多参数</h3><p>模板允许定义多组不同的参数，以如下函数示例，其<strong>返回值的类型是不确定的</strong>：</p><pre><code class="language-c">template&lt;typename T1, typename T2&gt;T1 max (T1 a, T2 b){    return b &lt; a ? a : b;}</code></pre><ul><li><font color="#ef6d3b"><strong>返回类型推断</strong></font></li></ul><p>从<code>C++14</code>开始，允许使用 <code>auto</code> 声明函数的返回值，即让编译器自己决定。</p><pre><code class="language-c">template&lt;typename T1, typename T2&gt;auto max (T1 a, T2 b){    return b &lt; a ? a : b;}</code></pre><p>在<code>C++11</code>中，<code>auto</code>必须配合 <code>trailing return type</code> 使用，否则编译报错如下：</p><div class="admonition error"><p class="admonition-title">error: 'xxx' function uses 'auto' type specifier without trailing return type</p></div><pre><code class="language-c">template&lt;typename T1, typename T2&gt;auto max (T1 a, T2 b) -&gt; decltype(b&lt;a?a:b);</code></pre><ul><li><font color="#ef6d3b"><strong>类型萃取</strong></font></li></ul><pre><code class="language-c">#include &lt;type_traits&gt;template&lt;typename T1, typename T2&gt;std::common_type_t&lt;T1,T2&gt; max (T1 a, T2 b)</code></pre><div class="admonition note"><p class="admonition-title">Trick: C++如何获取变量x的类型?</p><ul><li><code>#include &lt;typeinfo&gt;</code></li><li><code>typeid(x).name()</code></li></ul></div><h2 id="Class-Templates">Class Templates</h2><h3 id="模板特化">模板特化</h3><ul><li>这篇中文资料说得通俗易懂：<a href="https://sg-first.gitbooks.io/cpp-template-tutorial/content/jie_te_hua_yu_pian_te_hua.html"><em><strong>深入理解特化与偏特化</strong></em></a></li><li>源码 推荐阅读： <a href="#%E2%AD%90type-traits"><em><strong>type_traits</strong></em></a></li></ul><p>模板特化的作用是，<strong>针对模板的参数类型，从而定义不同的实现</strong>。<br><font color="#ef6d3b"><strong>只要你教得好，它可以 “见人说人话，见鬼说鬼话”</strong></font><br>（有点类似 函数重载 和 虚函数继承 的思想）</p><p>模板特化实现思路是：</p><ul><li>先定义基本模板（能说话）</li><li>再针对每种参数实现特例（能见人下菜碟）</li></ul><p>下面仿照 <code>Python</code> 实现 <code>C++</code> 的 <code>type</code> 函数:</p><pre><code class="language-c">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;template&lt;typename T&gt;class TypeId{public:    static constexpr char const* type = "NULL";    TypeId(T t) {}};template&lt;&gt;class TypeId&lt;int&gt;{public:    static constexpr char const* type = "INT";    TypeId(int t) {}};template&lt;&gt;class TypeId&lt;std::string&gt;{public:    static constexpr char const* type = "STRING";    TypeId(std::string t) {}};int main(){    ::cout &lt;&lt; TypeId(1).type &lt;&lt; "\n";                   // INT    ::cout &lt;&lt; TypeId(std::string("abc")).type &lt;&lt; "\n";  // STRING    return 1;}</code></pre><h3 id="模板特化-规则">模板特化 规则</h3><p>模板特化 符合 函数重载 的两个条件之一：</p><ul><li>参数数量相同、类型不同</li><li>参数数量不同（<strong>特化只能少于等于</strong>）</li></ul><p>否则出现报错：</p><div class="admonition error"><p class="admonition-title">error: too many template arguments for class template xxx</p></div><p>示例如下：</p><pre><code class="language-c">template &lt;typename T, typename U&gt; struct X            ;    // 0 // 原型有两个类型参数// 所以下面的这些偏特化的实参列表// 也需要两个类型参数对应template &lt;typename T&gt;             struct X&lt;T,  T  &gt; {};    // 1template &lt;typename T&gt;             struct X&lt;T*, T  &gt; {};    // 2template &lt;typename T&gt;             struct X&lt;T,  T* &gt; {};    // 3template &lt;typename U&gt;             struct X&lt;U,  int&gt; {};    // 4template &lt;typename U&gt;             struct X&lt;U*, int&gt; {};    // 5template &lt;typename U, typename T&gt; struct X&lt;U*, T* &gt; {};    // 6template &lt;typename U, typename T&gt; struct X&lt;U,  T* &gt; {};    // 7template &lt;typename U, typename T&gt; struct X&lt;U,  T, T &gt; {};  // Error</code></pre><h3 id="模板特化-代码示例">模板特化 代码示例</h3><ul><li><a href="/code/refl-sum.cpp"><em><strong>refl-sum.cpp</strong></em></a></li><li><a href="/code/refl-factorial.cpp"><em><strong>refl-factorial.cpp</strong></em></a></li></ul><h2 id="std">std</h2><h3 id="⭐std-max"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.9.2/libstdc++/api/a01226_source.html">⭐std::max</a></h3><ul><li><code>_GLIBCXX14_CONSTEXPR</code> 在 <code>C++14</code> 会被替换为 <code>constexpr</code></li><li>实际可以展开为：<code>constexpr inline const _Tp&amp; max(const _Tp&amp; __a, const _Tp&amp; __b)</code><ul><li><code>constexpr</code>无实质作用，重点是参数使用 <code>const &amp;</code></li></ul></li></ul><pre><code class="language-c">  template&lt;typename _Tp&gt;    _GLIBCXX14_CONSTEXPR    inline const _Tp&amp;    max(const _Tp&amp; __a, const _Tp&amp; __b)    {      // concept requirements      __glibcxx_function_requires(_LessThanComparableConcept&lt;_Tp&gt;)      //return  __a &lt; __b ? __b : __a;      if (__a &lt; __b)return __b;      return __a;    }</code></pre><!-- ### [⭐std::stack](https://gcc.gnu.org/onlinedocs/gcc-4.8.3/libstdc++/api/a01566_source.html) --><h3 id="⭐std-pair"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.9.2/libstdc++/api/a01240_source.html">⭐std::pair</a></h3><ul><li><a href="https://en.cppreference.com/w/cpp/utility/pair/pair"><em><strong>[cppreference] std::pair</strong></em></a></li><li><a href="https://stackoverflow.com/a/9270585/16823597"><em><strong>[stackoverflow] What is the purpose of std::make_pair vs the constructor of std::pair?</strong></em></a><ul><li>c++14及之前，<code>std::pair</code>需要显式指定类型，<code>std::make_pair</code>不需要</li></ul></li></ul><pre><code class="language-c"> template&lt;typename _T1, typename _T2&gt;    struct pair    : private __pair_base&lt;_T1, _T2&gt;    {      typedef _T1 first_type;    ///&lt; The type of the `first` member      typedef _T2 second_type;   ///&lt; The type of the `second` member      _T1 first;                 ///&lt; The first member      _T2 second;                ///&lt; The second member      _GLIBCXX_CONSTEXPR pair()      : first(), second() { }      // ...    }</code></pre><h3 id="⭐type-traits"><a href="https://gcc.gnu.org/onlinedocs/gcc-4.7.4/libstdc++/api/a01417_source.html">⭐type_traits</a></h3><ul><li>以 <code>is_integral</code> 为例，判断是否为整型</li></ul><pre><code class="language-c">  template&lt;typename _Tp&gt;    struct is_integral    : public __is_integral_helper&lt;__remove_cv_t&lt;_Tp&gt;&gt;::type    { };</code></pre><ul><li><code>__is_integral_helper</code> 是一个标准的模板特化，<strong>非常简单</strong>！</li></ul><pre><code class="language-c">template&lt;typename&gt;    struct __is_integral_helper    : public false_type { };  template&lt;&gt;    struct __is_integral_helper&lt;int&gt;    : public true_type { };  template&lt;&gt;    struct __is_integral_helper&lt;char&gt;    : public true_type { };  // ...</code></pre><ul><li><code>true_type</code> 相关定义如下，其<code>value</code>变量就是一个bool类型的 <code>true</code></li></ul><pre><code class="language-c">  /// integral_constant  template&lt;typename _Tp, _Tp __v&gt;    struct integral_constant    {      static constexpr _Tp                  value = __v;      typedef _Tp                           value_type;      typedef integral_constant&lt;_Tp, __v&gt;   type;      constexpr operator value_type() const noexcept { return value; }      // ...    };  template&lt;typename _Tp, _Tp __v&gt;    constexpr _Tp integral_constant&lt;_Tp, __v&gt;::value;  /// The type used as a compile-time boolean with true value.  typedef integral_constant&lt;bool, true&gt;     true_type;  /// The type used as a compile-time boolean with false value.  typedef integral_constant&lt;bool, false&gt;    false_type;</code></pre><h2 id="反射">反射</h2><p>先看看什么是 <a href="https://en.wikipedia.org/wiki/Reflective_programming"><em><strong>reflection</strong></em></a>:</p><blockquote><p><em>reflection is the ability of a process to examine, introspect, and modify its own structure and behavior.</em></p></blockquote><ul><li>通俗解释，反射就是从一个对象(<code>object</code>)，能够反推其类型、成员和方法</li><li>以<code>Python</code>为例，<code>getattr</code> 就是经典的反射功能</li></ul><div class="admonition warning"><p class="admonition-title">为什么cpp没有反射?</p><ul><li>反射会导致编译后文件过大</li><li>cpp很少用到元编程（相对于C#)</li><li>cpp有模板，足够应付大部分需求...</li></ul></div><h2 id="阅读材料">阅读材料</h2><ul><li><p><a href="http://110.42.228.178/pdf/CPP_Templates_2nd.pdf">CPP-Templates-2nd 英文</a></p><ul><li><a href="https://github.com/wuye9036/CppTemplateTutorial">CPP-Templates-2nd 中文版翻译</a></li><li><a href="https://github.com/r00tk1ts/cpp-templates-2nd">cpp-templates-2nd 中文版翻译</a></li></ul></li><li><p><a href="https://github.com/wuye9036/CppTemplateTutorial">C++ Template 进阶指南</a></p></li><li><p><a href="https://veselink1.github.io/blog/cpp/metaprogramming/2019/07/13/refl-cpp-deep-dive.html">refl-cpp</a></p></li><li><p><a href="https://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/">What Does Haskell Have to Do with C++?</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志：2023年8月</title>
      <link href="/posts/2023/8/"/>
      <url>/posts/2023/8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="088c707709b995861e4e58c94a61b527368d8a83cfc58edb93edc304acbc9c56"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vscode】vim定制化插件</title>
      <link href="/posts/vscode-vim/"/>
      <url>/posts/vscode-vim/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a> 是仿照vim的vscode插件</li><li>本文在其基础上添加一些额外的个性化功能</li></ul></div><h3 id="VSCodeVim">VSCodeVim</h3><p>vscode vim主流插件有两款，分别是:</p><ul><li><a href="https://github.com/VSCodeVim/Vim">VSCodeVim</a>：仿vim的插件，功能不全</li><li><a href="https://github.com/vscode-neovim/vscode-neovim">VSCode Neovim</a>：基于Neovim，功能较全，但依赖nvim环境且配置复杂</li></ul><p>笔者一直使用前者，因此本文全部围绕 VSCodeVim展开。</p><h3 id="缺陷-😞">缺陷 😞</h3><p>VSCodeVim Github 拥有 1.5k 未处理的 Issues，作者的维护迭代速度非常慢，因此有很多缺陷和功能不足之处：</p><ul><li>不支持 vimscript function</li><li>不支持 vim bash</li><li><font color="#FF1E10"><strong>【bug】</strong></font>经常Esc失效，弹窗报错 <code>vim.Escape is undefined</code>… 需要重装插件</li></ul><h3 id="亮点-🎉">亮点 🎉</h3><p>打开 <code>"vim.statusBarColorControl": true</code>，可以使底部 <code>statusBar</code> 跟随 vim模式 而改变颜色。<br>本文希望进而改变 Cursor 和 当前行 的颜色、高亮显示，并支持 config 配置，效果图如下：</p><p><img src="/images/vim-mode-demo.png" alt=""></p><h3 id="改进-💡">改进 💡</h3><ul><li><p><strong>支持配置 StatusBar, Highlight 等颜色配置</strong></p></li><li><p><strong>支持区分 Normal, Insert, Visual 三种模式的颜色</strong></p></li><li><p>下载链接:<br><a href="https://github.com/593413198/Vim/releases/tag/vim-mode-1.0">https://github.com/593413198/Vim/releases/tag/vim-mode-1.0</a></p></li><li><p>配置文件:</p></li></ul><pre><code>    "vim.statusBarColorControl": true,    "vim.alpha": "80",    "vim.statusBarColors.visual": "#005f5f",    "vim.statusBarColors.insert": "#5f0000",</code></pre>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随手记</title>
      <link href="/posts/idea/"/>
      <url>/posts/idea/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0c5c25ccc3b1d155ad6ea1bcb79024d41de2d107cc1107c8a51186a23ed763b4">b3dc07a81f6459d120ce338ccca550463faa708b9b4d89df9ab14ba4edd809f60b32d15b5672ce84c5d84744f7f475debb79baf718116b8398ebb7a36965f5712db04a990a04196bf7d89b9188d2f5969b089300c199c887ad4490953d1810357cd375ac06e732d356d4ec27b642aa2d46c8fdf198d48a4b9620936f8c18efa99cd53c0e6c5befbd6da9ebb0e8d473ba88daf9814bf097589053470cd244c49759b29258898ae147d3b92406541ecc1426781b7f965d69488f8227468d25ace43c6b69c8a19f97354453e8ff96435fa7c142eabaa7418866597b071d73575a4fa98f09916a3b6256959c82764411afd8c8baf90fb4965fdfacbf4695b2488acf5d7f161a49b796a0b1b992232c56c8393b9705588b441acf55138be81fe973cf0e644444f60301071e149e7788696fb98684774596c09a87b8d44ff780e78e5a657a2a5580c8749587dc7d65ae05a8cb2594174783fd8fa497d8cc4a84947227afe8329650281ddb4595068235ed79e470b4868c26c2713685a5a93c0f1280e53b3df1720e4da8e8a09f8a6c99c3921a4b6850c328a6dc36e2202e0b4f1be867149ef931cb38587d704e6c911e58a15f05eab1e8cc352fd6424983c5800bf4f3d49dded1f663f23d4913e49064ba3cf91499fb213e96ac0af65deafd2c9fabc6e4e36b2dc5f38aaa95de286bcc604f0fe11b2f0bb8fcf181906004cd02cea773816c2f37a108e5bdf894e0d8012a39ba8b2ae6b924b924f6cf7384324e220677c36cbc43355060db7d4353fc4d2cf1e0f870385842ec30394027ac67562af4526e5a862983fcc5343ff658dd75ac60bf343a35df981950c50299447033daf22310f580432dd96559a8a198effa21454f024111215c9584bb1f2ce51ad7b39851bdc55c9adcbd4fa77d824d22167066cb7ad4f4ccd8fc8eac382e7f4eaa6436bf7cb8ee2b9c86bc7e2a6d318576055b79b6cfbc159ef03b44d59c10724d75f9869f93579be0f41be9412bae43c70d983b55a89660e48ba54240a3d1445b2aebca2752304a24161fedc49f17d991078ecc7b6d4864ecf742e1cd4e8d157ba47adf98e1ec449086362f097efcfe17ce562bdf7c5cc56733334d6f4b5b625b796230f58c7a9f1cda72376df7f986703ece3432b4a61b545e92dc888cf2a624961fb5a79ea69d4a73ae47a526bf867c6590695f393674b676152e38088676fdcd056be934930c4ef734512e90ae881e80e1d1ef962835704827aa85aeb62251707e90f0d8fcadeedc0c29abf6920ff959de86f14803b11c996289ea189d3f68cb9fa3be352f64b3e55649579438eb783d2f70f77997807e47094fd69a417bfc9431d19c843f74a8242599afd07f83fed5d8706cd44e33526ee1d1322853287d417c59aa62f14f89c0eb720d295d69054be38348ed1fc24e73345de69509daf98255a0c0d4ea3e967999cf53cf038c92ecb79e1e4a9f06fa8f600343839101e1c5dc1620e832ef1e0898898ae22727614645bd30fa7b987ab43cff16ff4d0a9053c0c4d7cd87c7191ad4c4dc3ca5a31a238292eabdea0e394959c378acc8aba059748f6ddada7efe8708b357e6b9b697556abf8b31523350af8a5487af0f457f2ce07e0cb25ee98bb758c359caf69a403993dafd0ab3760742759e114b3cf185e16559dca6fa67b5227d19e231078bc9b8d6f5af1de393abf5af8a3e9dfd4bff946608c0a3cc24e1360fc36e4af099c23b74bf0cf814384d79793dcbf658738314beb3421de4872867d68d45ffb6ea2a480d348d61d8180e2e6dd9f5b1302c6d71259d6d289a996dfd821329c365f66fa6fc412053481b4e0fce112e1512560f78b01a86332f0a8ca3ed32f89446a0dc2e0e315748bfad11ef53a7929da0f8cc7aefcd3ce9b25cbdf6042c795f8cfd9e8139436982f49dcbf76e8129707e743177f629b14e3c17ae6d2773315b267889735b70bbf1b6210ea3cf34f16cbe51e5c416adf52542e3c6b8ee1c37cf50bae1c6c831ec5d7b468cc8d3dbde615b3dacf79b70f7b3f12cb81c5f03caec57b1753a167389025c621c8ba684efa28af26fdde0cf2c845012fea0d28599054de052c2aa083f3a53b6b879863d6ebd770a7fd0ce776d181608f7a6154bd83d21171ba14b5ce589a1c0175c72f7faad0ce3a2f25b1c0f7b6f40d7031639d42e6a7dad316b3348b19d21575a21651291f76c34b1100b966602689e8eff43ed852221005af04e6a7219fdbf8215508f53b8810069be883565b9f160b119a9288d9bb1d6917aa588367f9f2c6903c2edb41e9d2076a14c7348aa9aa22e4d6ed89848a51256cff9f3b79e74949626d3b3a7241c3b7cfbdcd986c0bf04bb91488bab3efbfff476a1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【表达技巧】跟罗永浩学演讲</title>
      <link href="/posts/talk/"/>
      <url>/posts/talk/</url>
      
        <content type="html"><![CDATA[<p><code>罗永浩15堂演讲私教课</code>学习总结<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>B站视频：<a href="https://www.bilibili.com/video/BV1PP411T7fv">【演讲】罗永浩15堂演讲私教课</a></li><li>知乎：<a href="https://zhuanlan.zhihu.com/p/619973080">【学习笔记】罗永浩演讲私教课</a></li></ul></div><h2 id="前言">前言</h2><p>开这篇是因为近期，有一个在公司内部分享的计划。<br>因为不是技术类型的讲座，技巧因素占比就会很低（而技术分享更注重将东西解释清楚）。所以萌生学习这类演讲 + 表达技巧的念头。<br>认识罗永浩，最初是 6个亿 的负债梗，更深入的是在 脱口秀大会 作为嘉宾时期的发言，对其有几个认识：</p><ul><li><p><strong>听感</strong>：表达清晰连贯，但嗓音条件恶劣（据本人调侃是老太监音色）</p></li><li><p><strong>逻辑</strong>：知识涉猎广泛，且临场反应迅速（后者是幽默感 + 经验累积）</p></li><li><p><strong>内核</strong>：善于制造一句<strong>核心话题</strong>，并反复洗脑callback（如脱口秀的“大局观”，如演讲课的“因为大脑就是被这样设计的”…）</p></li></ul><h3 id="关于这个教程">关于这个教程</h3><p>基于罗老师 <strong>“演讲都是有套路和技巧”</strong> 的观点，将其演讲课的套路总结如下三点：</p><ul><li><p><strong>为什么要这样?（赢得认同）</strong></p></li><li><p><strong>如何达到这样?（方法论）</strong></p></li><li><p><strong>举例、类比论证（深入人心）</strong></p></li></ul><h2 id="十三个要素">十三个要素</h2><p>这些技巧比较多，难以短时间记忆和掌握，因此先记录一下核心观念，剩下的在实践中掌握和理解。</p><div class="markmap-container" style="height:350px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;让观众听下去&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<strong>讲笑话</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;吹牛逼&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;装逼&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;让观众容易理解&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;讲故事&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<strong>作类比</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<strong>三段式</strong>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;提问题&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;具有说服力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;有逻辑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;有数据&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;让观众产生共鸣&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;有激情&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;有情感&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<strong>升华境界</strong>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;核心&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<strong>有画面</strong>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h3 id="精华摘要">精华摘要</h3><ul><li><p>开始一场演讲的最好方式，就是<font color="#ef6d3b"><strong>讲笑话或讲故事</strong></font>。（千万不能讲道理）</p></li><li><p>对于晦涩或陌生的事物，要<font color="#ef6d3b"><strong>巧用类比</strong></font>，如 谈判就是找交集。</p></li><li><p>开始主体内容前，用<font color="#ef6d3b"><strong>三段式</strong></font>介绍提纲。（思维导图）</p></li><li><p>讲故事的三要素：冲突（吸引注意力） + 行动（故事的发展） + 结局（表达的内涵）</p></li></ul><h2 id="其他技巧">其他技巧</h2><h3 id="1-用坐标系描述事物">1. 用坐标系描述事物</h3><p>举例，如何看待 <strong>“量化交易”</strong>?</p><p>首先，一个交易策略的评判标准有两个维度，分别是：</p><ul><li>Interpret：（金融底层的）解释能力</li><li>Predict：（金融市场的）预测能力</li></ul><p>因此，引入一个二维坐标系，甚至可以类比不同事物在其分布，例如：</p><ul><li>进化论：能解释为什么猿猴进化到人类，但无法预测人类未来进化的趋势</li><li>地心说：能预测太阳东升西落，但底层科学原理是错的</li></ul><p><img src="/images/interpret-predict.png" alt=""></p><p>最后，根据 量化交易 预测能力强，但无法自圆其说的特点，可以将它放在类似进化论的位置。</p><p><strong>该方法论可以让听众直观清晰地了解事物的多维度特征。</strong></p><hr><h3 id="2-结尾升华主题">2. 结尾升华主题</h3><ul><li><p>几天过后，观众未必会记得你讲了什么，但他们或许能从情感上认同你。</p></li><li><p>这很大程度上，来源于结尾的几句升华。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【cpp】Memory</title>
      <link href="/posts/memory/"/>
      <url>/posts/memory/</url>
      
        <content type="html"><![CDATA[<p>C++的内存分配与管理<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li>理论偏：<a href="/posts/virtual-memory/">【CSAPP】Virtual Memory</a></li><li>本篇结合 C/C++ 了解内存分配相关领域知识</li><li>ptmalloc，tcmalloc，jemalloc ...</li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;malloc / free&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;new / delete&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;system-call&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#brk-sbrk\&quot;>brk / sbrk</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#mmap\&quot;>mmap</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;c-malloc&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#ptmalloc\&quot;>ptmalloc（glibc）</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;tcmalloc（google）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;jemalloc（facebok）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;mimalloc（microsoft）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;c++&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;std::allocator&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="malloc-free">malloc/free</h2><ul><li>阅读文档：<a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li>使用的时候多查阅文档，注意 <code>malloc</code> 使用时要判断 <code>NULL</code> 避免内存分配失败</li></ul><pre><code class="language-c++">#include &lt;unistd.h&gt;void *malloc(size_t size);void *calloc( size_t num, size_t size );void *realloc( void *ptr, size_t new_size );</code></pre><ul><li>分配过程：↓</li><li>需要考虑字节对齐，注意被释放后的内存也可能重复利用，这也解释了为什么野指针的 <code>undefined behavior</code></li></ul><p><img src="/images/malloc-demo.png" alt=""></p><h2 id="new-delete">new/delete</h2><p><a href="/posts/virtual-memory/#u-class-black-mallco-free-u">malloc / free</a> 前面有介绍过。</p><p><strong>以 <code>A* a = new A</code>为例，通过 <a href="https://gcc.godbolt.org/">godbolt</a> 查看汇编代码，发现其有两段逻辑组成：</strong></p><ul><li>调用 <code>new operator</code></li><li>调用 <code>class's constructor</code></li></ul><pre><code class="language-asm">call    operator new(unsigned long)mov     rbx, raxmov     rdi, rbxcall    A::A() [complete object constructor]</code></pre><p><strong>相应的 <code>delete</code> 方法，也对应如下的两段逻辑：</strong></p><ul><li>调用 <code>class's destructor</code></li><li>调用 <code>delete operator</code></li></ul><p>下面重点展开对 <code>new / delete</code> 两个操作符的学习（推荐阅读 <a href="https://www.programiz.com/cpp-programming/operators">C++ Operators</a> 和 <a href="https://en.cppreference.com/w/cpp/language/operators">cppreference operator overloading</a>）</p><p><strong>先看 libc 的 <a href="https://codebrowser.dev/llvm/libcxx/src/new.cpp.html">源码实现</a>，可以看到是对 <code>malloc</code> 的一层封装。</strong><br>如果类自定义了 <code>new /delete</code>，则优先调用它们。</p><pre><code class="language-C++">void *operator new(std::size_t size) _THROW_BAD_ALLOC{    if (size == 0)        size = 1;    void* p;    while ((p = ::malloc(size)) == nullptr)    {        // If malloc fails and there is a new_handler,        // call it to try free up memory.        std::new_handler nh = std::get_new_handler();        if (nh)            nh();        else#ifndef _LIBCPP_HAS_NO_EXCEPTIONS            throw std::bad_alloc();#else            break;#endif    }    return p;}voidoperator delete(void* ptr) noexcept{    ::free(ptr);}</code></pre><h2 id="System-Call">System Call</h2><p>程序中的内存分配有三个层次，如下图。<br>最终调用的还是Linux/Windows中的操作系统API：如sbrk, mmap… 因此需要重点掌握这些系统调用。</p><p><img src="/images/memory-call.png" alt=""></p><h3 id="brk-sbrk">brk, sbrk</h3><blockquote><p><em>change data segment size</em></p></blockquote><p>参考阅读  <a href="https://www.cnblogs.com/sylar5/p/11508821.html">cnblog: brk 和 sbrk 区别</a></p><p>linux man 手册中描述两者的作用是改变 <code>data segment</code> 的结束地址。<br>通俗地理解就是，<code>brk</code>函数会重新设置 <code>heap</code> 的高位地址，而 <code>sbrk</code>函数会根据大小来调整 <code>heap</code> 的容量。</p><p>两个函数的定义如下：</p><pre><code class="language-C++"> #include &lt;unistd.h&gt;int brk(void *addr);void *sbrk(intptr_t increment);</code></pre><h3 id="mmap">mmap</h3><blockquote><p><em>map (or unmap) files or devices into memory</em></p></blockquote><pre><code class="language-C++">#include &lt;sys/mman.h&gt;void *mmap(void *addr, size_t length, int prot, int flags,            int fd, off_t offset);int munmap(void *addr, size_t length);</code></pre><h2 id="ptmalloc">ptmalloc</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志：2023年7月</title>
      <link href="/posts/2023/7/"/>
      <url>/posts/2023/7/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="97e14be9e854e1b3237cbaf95d9dc3cf8f8b75fab2a1a1bc54fde494d8cb23cd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google评分卡💯及自评</title>
      <link href="/posts/grade/"/>
      <url>/posts/grade/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>Google将技术能力划分为 0~11 的等级</li><li>自我评估技术，判断下一步需要作出的努力</li></ul></div><h2 id="↓-Self-Evaluation">↓ Self-Evaluation</h2><table><thead><tr><th style="text-align:left">↓ 基础要求</th><th style="text-align:center">grade</th></tr></thead><tbody><tr><td style="text-align:left">熟悉数据结构与算法</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟练使用 C++11</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">熟悉并掌握 C++高级特性 (14/17/20)</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟练使用 Python 等脚本语言</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left">熟悉batch、Shell、Linux常见指令</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉MySQL等数据库的设计、优化</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">熟悉编译原理、编译优化</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉 vscode、sublime、vim 等IDE、Editor</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">熟悉 Jenkins、TeamCity 等 CI&amp;CD 平台</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉 ChatGPT、CodeMaker 等 AI工具</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉Linux内核，如进程管理、内存管理、文件系统等</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉网络协议和网络编程，熟悉websocket、HTTP、socket、TCP/IP等</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">↓ <strong>C/C++领域</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">内存管理、内存分配、ASan原理、内存错误及排查</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">模板、SFINAE、type traits、metaprogramming</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">并发、memory order、同步、互斥、boost::asio</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">编译优化、SIMD、ISPC、CPU性能分析</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">C++编码规范</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">↓ <strong>Python2/3领域</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Todo</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">↓ <strong>工具/pipline领域</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Jenkins 日常工作使用，无阻碍</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">VSCode 日常开发使用、多个插件开发经验</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Vim 熟练使用、vimrc配置</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left">Git 基本的GUI、CMD操作</td><td style="text-align:center">2 ~ 3</td></tr><tr><td style="text-align:left">↓ <strong>加分项</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">具备内存优化经验、熟悉linux内存分配</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">熟悉GPU使用，或有底层基础库（CUDA，mkl、openblas等）优化经验</td><td style="text-align:center">0 ~ 1</td></tr><tr><td style="text-align:left">良好的系统设计能力，如 performance、reliability、availability 多维度考量程序</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">熟悉机器学习平台相关工具，比如k8s，kubeflow，mlflow，automl等</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">有视频解码和渲染开发经验者优先</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left">有存储系统、分布式系统等底层开发经验</td><td style="text-align:center">0</td></tr></tbody></table><br>## ↓ Google-Standards<table><thead><tr><th style="text-align:center">等级</th><th style="text-align:left">标准</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">You are unfamiliar with the subject area</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">一窍不通</td></tr><tr><td style="text-align:center">1</td><td style="text-align:left">You can read/understand the most fundamental aspects of the subject area</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">理解基本概念</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">Ability to implement small changes,understand basic principles and able to figure out additional details with minimal help</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">能够实现一些小改动，在别人帮助下钻研更多细节</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">Basic proficiency in a subject area without relying on help</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">基本掌握和熟练使用</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">You are comfortable with the subject area and all routine work on it</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">足够精通，足够应对所有日常工作</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">An even lower degree of reliance on reference materials. Deeper skills in a field or specific technology in the subject area.</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">深耕某个细分领域</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">Ability to develop large programs and systems from scratch</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">独立开发大型系统</td></tr><tr><td style="text-align:center">7~10</td><td style="text-align:left">脚踏实地慢慢来吧…</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络】HTTP协议进阶</title>
      <link href="/posts/http/2/"/>
      <url>/posts/http/2/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE">专栏：透视HTTP协议</a> 墙裂推荐 ⭐</li><li><a href="/posts/http-1/">HTTP协议入门</a></li></ul></div><div class="markmap-container" style="height:500px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTTP数据编码&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#MIME-type\&quot;>MIME-type</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;&amp;quot;Accept&amp;quot;&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;&amp;quot;Content-Type&amp;quot;&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;HTTP大文件&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;数据压缩&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;chunked传输&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;HTTP连接&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;短连接&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;长连接&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#队首阻塞\&quot;>队首阻塞</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie\&quot;>Cookie</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie原理\&quot;>Cookie原理</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie生命周期\&quot;>Cookie生命周期</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie作用域\&quot;>Cookie作用域</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Cookie应用&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie应用：身份识别⭐\&quot;>身份识别</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#Cookie应用：广告追踪\&quot;>广告追踪</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP代理\&quot;>HTTP代理</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#代理字段\&quot;>代理字段</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#代理协议\&quot;>代理协议</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#负载均衡\&quot;>负载均衡</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;Cache&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#Cache：浏览器\&quot;>浏览器cache</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#Cache：服务器\&quot;>服务器cache</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;<a href=\&quot;#Chrome调试\&quot;>Chrome调试</a>&quot;}],&quot;p&quot;:{}}"></svg></div><h2 id="HTTP数据编码">HTTP数据编码</h2><p><font color="#FF1E10"><strong>todo</strong></font></p><h3 id="MIME-type">MIME-type</h3><p>使用svn更新的时候有一栏会标注 <code>Mime type</code>，可以观察到除了常见代码文件外，都是以 <code>application/octet-stream</code> 格式传输，它代表未知的二进制数据。</p><p><img src="/images/svn-mime-type.png" alt=""></p><h2 id="HTTP大文件">HTTP大文件</h2><p><font color="#FF1E10"><strong>todo</strong></font></p><h2 id="HTTP连接">HTTP连接</h2><p><a href="/posts/http-1/#TCP">前面说过</a>，HTTP协议 是运行在 TCP/IP协议 之上，因此每一次新的HTTP连接，都需要经过TCP协议的 <strong>“3次握手 &amp; 4次挥手”</strong>，这无形中降低了HTTP协议连接的代价。</p><p>因为 TCP位于传输层，HTTP位于应用层，所以可以用如下的类比来理解连接的代价：</p><ul><li>开关机：TCP连接</li><li>使用电脑办公：HTTP连接</li></ul><p>每次使用电脑办公，都需要打开电脑，在使用完毕后又需要关闭电脑。这就好比 <strong>HTTP 短连接</strong>。而更常规地做法是，保持电脑的始终开启，这样利于随时使用，这就好比 <strong>HTTP 长连接</strong>。</p><p><img src="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/assets/57b3d80234a1f1b8c538a376aa01d3b4.png" alt=""></p><h3 id="Connection字段">Connection字段</h3><p>当HTTP请求采取长连接时，在响应报文的 “Connection” 字段会标记为 <strong>keep-alive</strong>，此时服务器不会在短时间内断开连接，但是为了降低服务器的无效占用，Web-Server 往往会在一段时间内若没有任何数据收发，便会主动断开连接，断开后会收到 “Connection: close” 的字段。</p><h3 id="队首阻塞">队首阻塞</h3><p>因为 HTTP协议 采取 “一问一答” 的模式，即典型的 <strong>FIFO</strong> 结构，当队首的请求因为处理太慢而耽误时间，那么队列后面的所有请求也会相应地被阻塞，这就是 <a href="https://en.wikipedia.org/wiki/Head-of-line_blocking"><strong>Head-of-line blocking</strong></a>。</p><p>类比理解为：食堂排队打饭，每次刷卡是一次 Request，每次领到饭是一次 Response，每处理完一次成对的 Request-Response，队伍才能往前推进一步。只要前面打饭的慢了，后面所有人都会受影响。</p><p>解决方案是：并发连接，即增加打饭的窗口。这里不详细介绍。</p><h2 id="Cookie">Cookie</h2><p>前面说过 <strong>HTTP连接 是无状态的，即没有任何记忆</strong>。即使某个请求会让服务器出现500的错误，下次请求时服务器依然会 “热情招待”。这迫切得需要一种缓存的机制，Cookie应运而生。</p><blockquote><p>Cookie 是服务器委托浏览器存储的一些数据，让服务器有了“记忆能力”</p></blockquote><h3 id="Cookie原理">Cookie原理</h3><p>Response报文中，<strong>利用 <code>Set-Cookie</code>字段发送多个 “key=value” 形式的 cookie值</strong>，这些会由浏览器负责记录下来。当浏览器下次访问同样的地址时，Request报文会自动利用 <code>Cookie</code>字段将本地缓存的 cookie 发送给服务器，这样服务器就知道自己的身份了。</p><p>因为 Cookie 是与浏览器绑定的，如果你换个浏览器或者换台电脑，就会丢失之前的 Cookie记录，此时服务器也会重走一遍新的 <code>Set-Cookie</code> 流程。</p><h3 id="Cookie生命周期">Cookie生命周期</h3><p>Cookie拥有自己的生命周期，它通过 <code>Expires</code> 或 <code>Max-Age</code> 两个字段实现。当超过标记的有效期后，浏览器会自动在本地删除记录，不会再通过HTTP请求发送给服务器。</p><ul><li><code>Expires</code>：记录“过期时间”，如 <code>Fri, 07-Jun-23 20:00:00 GMT</code></li><li><code>Max-Age</code>：记录“保质期”，单秒是秒。将浏览器收到相应的时间加上 <code>Max-Age</code>，即得到 <code>Expires</code></li></ul><h3 id="Cookie作用域">Cookie作用域</h3><p>浏览器会存储大量的Cookies，因此需要标记其作用域，即发送给哪个服务器或者URL，常用字段是：（不清楚的推荐阅读 <a href="/posts/http-1/#URL">HTTP协议之URL</a>）</p><ul><li><code>Domain</code>：域名</li><li><code>Path</code>：路径</li></ul><h3 id="Cookie应用：身份识别⭐">Cookie应用：身份识别⭐</h3><p>登录taobao等电商网站时，浏览器会自动保存你的登录账户（或密码），就便是利用cookies实现的。它同时还会记录你的浏览记录和购物车。</p><p>大概格式为：<code>name=xxxxx....</code></p><h3 id="Cookie应用：广告追踪">Cookie应用：广告追踪</h3><p>当你浏览各种网站时，它们会根据你的访问喜好作行为分析，然后定向推荐一些图片广告给你，这就是利用cookies的原理。<br>这部分成为 “第三方Cookie”，属于搜集用户隐私的行为，浏览器经常会弹出确认框以请求权限。</p><h2 id="HTTP代理">HTTP代理</h2><p>传统的HTTP请求是 <code>Client-Server</code>，现在常常有“第三者插足”，即在中间会引入一个 <strong>代理服务器（Proxy Server）</strong>，它的角色是双面的：</p><ul><li>面对上游：充当客户端，发送请求</li><li>面对下游：充当服务端，响应请求</li></ul><div class="admonition note"><p class="admonition-title">类比：消费者（浏览器）—— 便利店（代理）—— 源服务器（批发市场）</p></div><div class="admonition note"><p class="admonition-title">定理：计算机领域的任何问题，都可以通过引入一个中间层来解决</p></div><p><img src="/images/proxy-server.png" alt=""></p><h3 id="代理字段">代理字段</h3><p><strong>代理服务器 通过字段 <code>Via</code> 标明代理的身份</strong>，在HTTP请求的链路中，每当报文经过一个代理节点，代理服务器就会将自身的信息追加到 <code>Via</code>字段的末尾。<br>另通过如下字段标明其他信息：</p><ul><li><code>X-Forwarded-For</code>：追加代理的域名</li><li><code>X-Real-IP</code>：客户端真实IP</li></ul><p><img src="/images/proxy-process.png" alt=""></p><h3 id="代理协议">代理协议</h3><p>针对代理的HTTP请求，<a href="https://www.haproxy.org/">HAProxy</a> 公司推出了专门的代理请求协议，The Proxy Protocol。<br>其基本格式为：开头必须是“PROXY”五个大写字母，然后是“TCP4”或者“TCP6”，表示客户端的 IP 地址类型，再后面是请求方地址、应答方地址、请求方端口号、应答方端口号，最后用一个回车换行（\r\n）结束。</p><pre><code>PROXY TCP4 1.15.115.4 110.42.228.178 32200 80\r\n</code></pre><h3 id="负载均衡">负载均衡</h3><p>当一个区域所有的消费者，都蜂拥而至一个批发市场购物，就会造成堵塞排场对的现象。<br>因此 “负载均衡” 的解决方案是，在每个居民集中地地区设置一个小商超，或者经销商，而自己只负责货物的批发和调配。消费者 择近择闲 选择小商超去购物即可。</p><p><strong>通过中间的代理服务器，将请求均匀合理地分散到多台源服务器</strong>，能够有效提高系统的响应速度和利用率，这就是 负载均衡 的基本原理。</p><p>而如何挑选转发的服务器，有如下的思路：</p><ul><li>哈希：如尾数单号的去A服，尾数双号的去B服</li><li>轮询：对于新请求，分配一个最空闲的Server去处理</li></ul><h2 id="Cache">Cache</h2><div class="admonition note"><p class="admonition-title">两句话讲清楚Cache</p><ul><li>浏览器Cache：消费者家里囤（上次买的）货</li><li>服务器Cache：小商超囤（上次卖的）货</li></ul></div><h3 id="Cache：浏览器">Cache：浏览器</h3><p>当浏览器频繁每秒请求同样的数据时，如果服务器不厌其烦的依次发送，会造成很大的性能和流量浪费。因此需要客户端（即浏览器）的缓存。</p><p><strong>一个带Cache的HTTP请求流程是：</strong></p><ul><li><p>浏览器检查cache，若有则直接读取，若无则发送新的HTTP请求；</p></li><li><p>服务器响应请求，并返回资源，同时标记资源的有限期；</p></li><li><p>浏览器接受请求，并缓存资源；</p></li></ul><p>而<strong>标记资源的有效期字段是 <code>max-age</code></strong>，即cache的生存时间（秒），过期则被浏览器自动销毁。<br>其他常见字段有：</p><ul><li><code>no_store</code>：不允许缓存，如一些高频的秒杀字段</li><li><code>no_cache</code>：使用缓存前，检查是否有最新版本</li><li><code>muster-revalidate</code>：不过期则直接使用缓存</li></ul><h3 id="Cache：服务器">Cache：服务器</h3><p><font color="#FF1E10"><strong>Todo</strong></font>，与HTTP协议关系不大，可以了解 Redis、Varnish 等缓存技术。</p><h2 id="Chrome调试">Chrome调试</h2><p>Chrome浏览器提供了丰富而强大的调试功能，按下 <code>F12</code> 或者右键点击“检查” 以进入调试页面。</p><img src="/images/chrome-http-debug.png" height="400">]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networking</title>
      <link href="/posts/network/"/>
      <url>/posts/network/</url>
      
        <content type="html"><![CDATA[<p>计算机网络大纲，HTTP/TCP/UDP…<span id="more"></span></p><div class="markmap-container" style="height:425px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Network Model&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;TCP/IP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;OSI&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;Protocol&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;HTTP&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;/posts/http-1/\&quot;>HTTP协议入门</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;/posts/http-2/\&quot;>HTTP协议进阶</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;TCP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;UDP&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;KCP&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;Web Server&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;Apache&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Nginx&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;Performance&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;RPS：每秒处理数&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;TPR：平均响应时间&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;Concurrency：并发量&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;Tools&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;Telnet&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#/posts/2G7VBZ2/#curl\&quot;>curl</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;wireshark&quot;}]}],&quot;p&quot;:{}}"></svg></div>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【网络】HTTP协议入门</title>
      <link href="/posts/http/1/"/>
      <url>/posts/http/1/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE">专栏：透视HTTP协议</a> 墙裂推荐 ⭐</li></ul></div><div class="markmap-container" style="height:480px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;HTTP&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#Hypertext\&quot;>Hypertext</a>（html）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;text&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;media&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;hyperlink&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#Transfer\&quot;>Transfer</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;client&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Chrome, Edge&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;Telnet&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;server&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;https://nginx.org/\&quot;>Nginx</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;https://httpd.apache.org/\&quot;>Apache</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;CDN（内容分发）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\&quot;>负载均衡</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;加速访问&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;#Protocol\&quot;>Protocol</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#TCP-IP\&quot;>TCP/IP</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#IP\&quot;>IP</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#TCP\&quot;>TCP</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#DNS\&quot;>DNS</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#域名解析\&quot;>域名解析</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#DNS缓存\&quot;>DNS缓存</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#URL\&quot;>URL</a>（网址）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#URL\&quot;>示例⭐</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP抓包\&quot;>HTTP抓包</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;wireshark&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP报文\&quot;>HTTP报文⭐</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;start-line&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;headers&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;body&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP方法\&quot;>HTTP方法⭐</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;GET, HEAD&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;POST&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP状态码\&quot;>HTTP状态码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;<a href=\&quot;#HTTP特点\&quot;>HTTP特点</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;.&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;.&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;可靠传输&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;明文传输&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;无状态&quot;}]}]}]}],&quot;p&quot;:{}}"></svg></div><h2 id="HTTP协议">HTTP协议</h2><p>HTTP 协议是 <a href="https://en.wikipedia.org/wiki/HTTP"><em><strong>HyperText Transfer Protocol</strong></em></a> 的缩写，它是一种用于超媒体信息传输的应用层协议，是互联网通信的基础。</p><p>如何通俗地理解 HTTP协议 呢？</p><div class="admonition todo"><p class="admonition-title">如何理解新概念?</p><ol><li>任何技术思想，在现实生活中都能找到映射</li><li>巧用 “类比” 的手段</li></ol></div><h3 id="Hypertext">Hypertext</h3><p>在互联网早期，传输的信息只有简单的字符文字，即 <code>Text</code>。随着信息爆炸式地增长，网络需要传输的信息被扩展为 图片、音频、视频等等，这些就是超文本。<br>超文本的核心是 <a href="https://en.wikipedia.org/wiki/Hyperlink">超链接 Hyperlink</a>，通过互相引用而形成复杂的网状信息结构。</p><h3 id="Transfer">Transfer</h3><p>HTTP 是一种 <code>Request-Response</code>协议，即将信息在 A、B 两个点之间双向传输，因此有两类参与方：</p><ul><li><code>client</code><br>http请求的发起方，通常指浏览器（如Chrome、Edge）</li><li><code>server</code><br>http请求的接收方，又称为 <code>Web Server</code>，如 <a href="https://nginx.org/">Nginx</a>、<a href="https://httpd.apache.org/">Apache</a> 都是常见的服务器框架</li><li><code>CDN</code><br>client和server之间通常不会直连，而是经过 <code>CDN</code>(<a href="https://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Network</a>) 这个中间商。它能够实现安全防护、负载均衡等常见功能。</li></ul><h3 id="Protocol">Protocol</h3><p>HTTP 是众多网络协议中的一个，先理解什么是协议?<br>以毕业生签署的“三方协议”为例，参与对象是多元的（自己、学校、企业），同时协议还会规定各方需履行的义务，以及该做什么和不该做什么。因此协议的核心要素是：</p><ul><li><p>多方参与<br>client、server、中转者…</p></li><li><p>通信规范<br>如规定 <code>Get</code>、<code>Post</code> 的请求报文格式，如请求的错误处理等等</p></li></ul><p>在 HTTP 的发展历程中，也经历过很多大版本的迭代，如 <code>HTTP/0.9</code>、<code>HTTP/1.0</code>、<code>HTTP/2</code>、<code>HTTP/3</code>等等。</p><h2 id="TCP-IP">TCP/IP</h2><p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP协议</a> 是整个互联网的标准通信协议，它实际上是一系列协议的统称，其中最核心的是 TCP 和 IP，这里篇幅有限只作简单介绍。</p><h3 id="IP">IP</h3><p><strong>IP协议（<a href="https://en.wikipedia.org/wiki/Internet_Protocol">Internet Protocol</a>）主要解决寻址和路由问题</strong>，它提出 <strong>IP地址</strong> 的概念来定位互联网上的每一台计算机。因此可以将其类比为电话号码，而整个运营商的拨号系统就是一个 IP协议。</p><p>IP协议又分为 IPv4 和 IPv6，大部分仍在使用前者，即IP地址是4个用冒号分割的数字，例如 <code>1.15.115.4</code>。之所以出现 IPv6，是因为v4分配的地址已经捉襟见肘，不够整个互联网的使用。</p><h3 id="TCP">TCP</h3><p><strong>TCP协议（<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol</a>）是一种 传输控制协议</strong>，它基于 IP协议 之上，提供可靠的、字节流形式的通信，也是HTTP协议得以实现的基础。</p><p>之所以了解TCP/IP协议，是因为HTTP运行在前者上，因此又称为 <code>HTTP over TCP/IP</code>。</p><h2 id="DNS">DNS</h2><p>在TCP/IP协议中，通常使用纯数字的 IP地址 来标记计算机，这非常不利于用于的使用和记忆。<br>因此 <strong>DNS（<a href="https://en.wikipedia.org/wiki/Domain_Name_System">Domain Name System</a>）域名系统</strong> 应运而生，它使用具有实际含义的名称来替代IP地址（即英文+数字的组合，也可以是汉字），例如：<code>95.211.80.227</code>是IP地址，<code>nginx.org</code>是其域名，两者指向的是同一个web服务器。</p><h3 id="域名解析">域名解析</h3><p>以 <code>www.apple.com</code> 这个域名为例，当用户尝试访问该域名时，会经过至少3次的DNS域名解析服务器：</p><ul><li><em>Root DNS Server</em>：管理 <code>com</code>, <code>cn</code>, <code>net</code>等顶级域名的IP地址。</li><li><em>Top-level DNS Server</em>：管理 <code>apple.com</code> 的IP地址。</li><li><em>Authoritative DNS Server</em>：管理 <code>www.apple.com</code>的IP地址。</li></ul><h3 id="DNS缓存">DNS缓存</h3><p>目前全世界有 13组 <code>Root-DNS-Server</code> 提供顶级域名的解析服务，但因为全世界的网民都在请求，会造成系统的拥挤并降低访问速度，优化手段之一就是利用 <em>DNS缓存</em>。</p><p>当你已经访问过 <code>www.apple.com</code>，操作系统就会在某个文件（如下↓）<strong>缓存解析后的IP地址</strong>，这样下次访问时，就不再需要经过 DNF解析服务器了。</p><ul><li>linux: <code>/etc/hosts</code></li><li>windows: <code>C:\WINDOWS\system32\drivers\etc\hosts</code></li></ul><h2 id="URL">URL</h2><p>通过 TCP/IP协议 加上 DNS 的组合，我们实现了访问互联网中任意一台机器，但是每台机器上的资源仍然有很多，如何对他们加以区分呢？</p><p><strong>URL（<a href="https://en.wikipedia.org/wiki/URL">Uniform Resource Locator</a>）含义是 统一资源定位符，即俗称的网址</strong>，如下是其组成格式：</p><p><img src="/images/URI.svg" alt=""></p><ul><li><code>scheme</code>：指定http、https、ftp等协议<ul><li><code>file</code>：本地文件</li><li><code>ftp</code>：文件传输</li><li><code>ssh</code>：加密登录</li></ul></li><li><code>://</code>：约定俗成的分隔符</li><li><code>user:passwd@</code>：明文身份信息，已被弃用</li><li><code>host:port</code>：省略端口会用默认值，如 HTTP 80，HTTPS 443</li><li><code>path</code>：资源的在主机的路径，也可能是服务路径</li><li><code>?query</code>：查询参数</li><li><code>#fragment</code>：仅浏览器使用，用于锚点跳转</li></ul><h2 id="HTTP抓包">HTTP抓包</h2><p>“纸上得来终觉浅”，我们通过在windows下快速搭建一个最小化的HTTP模拟环境，借助抓包工具 wireshark 来对 HTTP 的细节一探究竟。</p><blockquote><ul><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/07%20%20%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%EF%BC%8C%E6%90%AD%E5%BB%BAHTTP%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83.md">搭建http本地实验环境</a></li><li><a href="https://zhuanlan.zhihu.com/p/82498482">知乎: Wireshark抓包指南</a></li></ul></blockquote><p>在启动本地web服务器后，尝试在浏览器输入 <code>127.0.0.1</code> 访问该server，然后按下回车，wireshark抓包（限制<code>http/tcp port 80</code>）抓包的结果如下：</p><ul><li>前三个包：TCP协议的 “三次握手”</li><li>中间四个包：HTTP协议发送了一个 <code>GET /HTTP/1.1</code> 的请求报文，Server回复OK</li><li>后四个包：HTTP协议发送了请求 <code>/favicon.io</code> 的请求报文，Server回复404</li></ul><p>通过http抓包，基本清楚了http协议的工作流程，<strong>核心是 “Requst-Response”，即 “一问一答”的模式</strong>。</p><p><img src="/images/wireshark-http.png" alt=""></p><h2 id="HTTP报文">HTTP报文</h2><p>通过wireshark也可以清楚看到http请求发送的报文内容，其全部由 ASCII文本 组成，非常容易肉眼阅读。</p><p>HTTP协议的 requet报文 和 response报文 的组成机构基本相同，由三个部分组成，每个部分由一个空行 “CRLF（0x0D0A）” 隔开:</p><ul><li>请求报文</li></ul><div class="markmap-container" style="height:220px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Request-line&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Method&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;URI&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;http-version&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;Request-header&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Key-Value&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;eg. Host: 127.0.0.1&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;eg. Connection: keep-alive&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;eg. User-Agent: xxxxxx&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Request-body（空）&quot;}],&quot;p&quot;:{}}"></svg></div><ul><li>回复报文</li></ul><div class="markmap-container" style="height:180px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Response-line&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;http-version&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;Status-code&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;200：成功&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;404：查找失败&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Reason（描述原因）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Response-header（同上）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Response-body&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;eg. name=luhao&amp;amp;password=1234&quot;}]}],&quot;p&quot;:{}}"></svg></div><ul><li>报文示例<br><img src="/images/http-request.png" alt=""></li></ul><h2 id="HTTP状态码">HTTP状态码</h2><p>既然 HTTP协议 采用 “一问一答” 的模式，那么响应报文内应该包含请求的结果信息，即状态码（Status Code）。<br>目前 RFC标准 规定状态码是三位数，即取值范围是 000 到 999，其从设计之初也有具体的含义区分：</p><ul><li>1xx：提示信息</li><li>2xx：成功<ul><li>200 OK</li></ul></li><li>3xx：重定向</li><li>4xx：客户端请求报文错误<ul><li>400 Bad Request</li><li>403 Forbidden</li><li>404 Not Found</li><li>408 Request Timeout</li></ul></li><li>5xx：服务端内部错误<ul><li>500 Internal Server Error</li><li>502 Bad Gateway</li></ul></li></ul><h2 id="HTTP特点">HTTP特点</h2><p>作为本篇的收尾总结，HTTP协议可以概括为三大特点：</p><ul><li><p>可靠传输<br>注意，“可靠”只是确保 Request方 的必定传输，由于一些网络原因未必能确保 Response方 的成功接收。</p></li><li><p>明文传输<br>HTTP报文的所有信息都回暴露在 “光天化日之下”，HTTPS协议实现了加密版本的HTTP传输。</p></li><li><p>无状态<br>区分于 TCP协议 的状态，HTTPS协议 是没有状态的，即 “没有记忆能力”。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GAMES101】Shading</title>
      <link href="/posts/shading/"/>
      <url>/posts/shading/</url>
      
        <content type="html"><![CDATA[<p>Lambertian、Blinn-phong、shading-tech<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">GAMES101 Shading</a></li><li><a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/schedule.html">CS130 Shading</a></li><li><a href="https://www.cs.toronto.edu/~jacobson/phong-demo/">WebGL demo</a></li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Factors&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2],&quot;f&quot;:true},&quot;v&quot;:&quot;光源&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3],&quot;f&quot;:true},&quot;v&quot;:&quot;平行光&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4],&quot;f&quot;:true},&quot;v&quot;:&quot;点光&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5],&quot;f&quot;:true},&quot;v&quot;:&quot;聚光灯&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6],&quot;f&quot;:true},&quot;v&quot;:&quot;相对位置&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7],&quot;f&quot;:true},&quot;v&quot;:&quot;距离衰减&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;角度（Lambert’s cosine law）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;材质&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;Ambient&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[10,11],&quot;f&quot;:true},&quot;v&quot;:&quot;Diffuse&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[11,12],&quot;f&quot;:true},&quot;v&quot;:&quot;Specular&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Shading-Reflection⭐&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#font-color-750000-Lambertian-Reflection-⭐-font\&quot;>Lambertian</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#font-color-750000-Blinn-Phong-Reflection-⭐-font\&quot;>Blinn-Phong</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Shading-Tech&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#1-Flat-Shading\&quot;>Flat</a>（poly）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#2-Gouraud-Shading\&quot;>Gouraund</a>（vertex）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#3-Phong-Shading\&quot;>Phong</a>（pixel）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;Shading-Normal&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#1-顶点法线\&quot;>Vertex-normal</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#2-像素法线\&quot;>Pixel-normal</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Shading">Shading</h2><p><a href="https://en.wikipedia.org/wiki/Shading">Wikipedia: Shading</a><br>维基百科对于 shading 的定义非常清楚，即对3维场景中模型 <strong>着色</strong> 的过程，且着色的效果取决于如下几个因素：</p><h3 id="1-光源">1.光源</h3><p>推荐阅读：<a href="https://learnopengl.com/Lighting/Multiple-lights">LearnOpenGL</a>，<a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/content/Lecture12.pdf">CS130-Lecture12</a></p><ul><li><p>Ambient lighting<br>环境光照，即使在最黑暗的情况下，存在一些微弱的光亮使得物体呈现出一些颜色。</p></li><li><p>Directional lighting<br>平行光，也称作天光，在固定的光源方向上无任何衰减。</p></li><li><p>Point lighing<br>点光，向四周照射，随距离衰减。</p></li><li><p>Spotlighting<br>聚光灯，呈一个锥形范围照射，随距离衰减。</p></li></ul><h3 id="2-相对位置">2.相对位置</h3><ul><li><p>距离关系<br>光照强度一般随 <strong>距离的平方</strong> 衰减，$ ~ I / r^{2}$</p></li><li><p>角度关系<br>根据 <a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Lambert’s cosine law</a>，$\vec {n} * \vec {l}$ （结合后面的 Lambertian Reflection 理解）</p></li></ul><h3 id="3-材质">3.材质</h3><ul><li><p>Roughness<br>粗糙度越高，镜面反射能力越强，典型代表如镜子。</p></li><li><p>Metallic<br>金属度越高，漫反射越弱。</p></li><li><p>Translucent<br>具有透光属性，如典型的 <a href="https://en.wikipedia.org/wiki/Subsurface_scattering">SSS</a>。</p></li></ul><h2 id="Local-Shading">Local Shading</h2><p>现实中的光照，需要考虑各种直接光、间接光的反射、吸收效果，想要在图形引擎中模拟它们非常不现实。因此一些大佬提出局部的着色算法，以模拟 <strong>一个独立点的shading计算</strong>，这里统称为 local-shading。<br>我们需要了解 <code>Lambertian Reflection</code> 和 <code>Blinn-Phong Reflection</code>。</p><h3 id="font-color-750000-Lambertian-Reflection-⭐-font"><font color="#750000">Lambertian Reflection ⭐</font></h3><p><strong>Lambertian模型</strong> 一般用来模拟 diffuse光，核心影响分别是：距离、角度。<br>距离基本的衰减关系，前面讲过了。角度根据 <a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Lambert’s cosine law</a> 计算得一个光照强度的系数，其中 $max(0, n \cdot l)$ 表示任何大于90度的夹角，光照强度都为0。</p><p><img src="/images/lambert-shading.png" alt=""></p><hr><h3 id="font-color-750000-Blinn-Phong-Reflection-⭐-font"><font color="#750000">Blinn-Phong Reflection ⭐</font></h3><p><strong>Blinn-Phong模型</strong> 在前者的基础上引入了 <strong>Ambient 环境光</strong> 和 <strong>Specular高光</strong>，它是一个叫<code>Blinn</code>的教授拓展了<code>Phong</code>的光照模型，其计算方式分别为：</p><ul><li><strong>Specular</strong></li></ul><blockquote><p>$L_{s} = K_{s}(I/r^{2}) max(0, n \cdot h)^{p}$<br>引入一个 <strong>半程向量 $h (=\frac{v+l}{|v+l|})$</strong>，实际含义为入射角和观察角的二分之一夹角。此时衡量 $h$ 和 $n$ 的接近程度，即点乘 $n \cdot h$（<code>Phong</code>模型选取的是 $cos(\alpha)$，$\alpha$是夹角）， $n, h$ 越接近 则点乘值越大，则高光越强烈。<br><br>其中的 p 衡量 <strong>高光随夹角的衰减速度</strong>，p值越大，则呈现高光的范围越小（如下图）。</p><ul><li>p = 5 … 10：塑料</li><li>p = 100 … 200：金属<br><img src="/images/blinn-phong-demo-all.png" alt=""></li></ul></blockquote><ul><li><strong>Diffuse</strong></li></ul><blockquote><p>同 Lambertian模型</p></blockquote><ul><li><strong>Ambient</strong></li></ul><blockquote><p>$L_{a} = k_{a}I_{a}$<br>环境光假设任何点来自环境的 <strong>光照强度是一致的</strong>，即 $I_{a}$，它与实际光照方向无关。<br>笔者粗暴地理解为自发光、固有色。</p></blockquote><p><img src="/images/blinn-phong.png" alt=""><br><br></p><h2 id="Shading-Tech">Shading Tech</h2><p>推荐阅读：<a href="https://en.wikipedia.org/wiki/Shading">Wikipedia</a>，<a href="https://www.cs.ucr.edu/~shinar/courses/cs130-spring-2012/content/Lecture14.pdf">CS130-Lecture14</a></p><p>前面讨论光照模型的计算，但是忽略了一个重点：<strong>以什么对象（或粒度）进行Shading?</strong><br>基于前面的知识得到，任何 mesh 都是由顶点和三角形（或Poly）组成，因此自然想到如下几种方案：</p><ul><li>Tri（Poly）：基于三角面的 Flat Shading</li><li>Vertex：基于顶点的 Gouraud Shading</li><li>Pixel：基于像素的 Phong Shading</li></ul><p><img src="/images/shading-tech.png" alt=""></p><h3 id="1-Flat-Shading">1. Flat Shading</h3><p>对<strong>每个三角形（或Poly）</strong> 计算出一个法线，可以通过叉乘得到，并基于法线作光照计算。此时三角形内的Shading结果是一样的。可以理解为 <code>Low-Poly</code> 的渲染风格。</p><h3 id="2-Gouraud-Shading">2. Gouraud Shading</h3><p>对<strong>每个顶点</strong>作计算（假设顶点没有自己法线，可以根据周围几个三角面的法线求均值）。可以理解为 <code>Vertex-Shader</code>。</p><p><img src="/images/gouraud-shading.png" alt=""></p><h3 id="3-Phong-Shading">3. Phong Shading</h3><p>对<strong>每个像素</strong>插值出单独的法线，基于此作光照计算。因为是全像素的，所以性能开销高。可以理解为 <code>Pixel-Shader</code></p><h3 id="三种方案对比">三种方案对比</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Flat</th><th style="text-align:center">Gouraud</th><th style="text-align:center">Phong</th></tr></thead><tbody><tr><td style="text-align:center">光照粒度</td><td style="text-align:center">poly</td><td style="text-align:center">Vertex</td><td style="text-align:center">pixel</td></tr><tr><td style="text-align:center">表现</td><td style="text-align:center">劣</td><td style="text-align:center">中</td><td style="text-align:center">优</td></tr><tr><td style="text-align:center">性能需求</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">需要顶点法线</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><h2 id="Normal">Normal</h2><p>Shading的着色计算非常依赖 <strong>法线</strong>，下面介绍两种常见的法线计算方式：</p><h3 id="1-顶点法线">1. 顶点法线</h3><ul><li><p>模型自带，例如 <code>obj</code> 格式可以指定逐顶点的法线</p></li><li><p>计算顶点周围 <code>Poly</code> 的法线均值</p></li></ul><p><img src="/images/vertex-normal.png" alt=""></p><h3 id="2-像素法线">2. 像素法线</h3><ul><li>通过两个顶点的法线插值，记得归一化！</li></ul><p><img src="/images/pixel-vertex.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSAPP】Virtual Memory</title>
      <link href="/posts/virtual-memory/"/>
      <url>/posts/virtual-memory/</url>
      
        <content type="html"><![CDATA[<p>虚拟内存、cache、内存分配、内存泄漏…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="http://1.15.115.4/CSAPP-3rd.pdf">CSAPP 第9章：Virtual Memory</a>（已读完，通俗 &amp; 受益匪浅）</li><li><a href="/posts/3RBTN4W/">汇编（一）：计算机架构入门</a>（站内文章，硬件基础知识）</li><li><a href="https://fengmuzi2003.gitbook.io/csapp3e/dixzhang-xu-ni-nei-cun">CSAPP重点解读：虚拟内存</a></li><li><a href="https://people.freebsd.org/~lstewart/articles/cpumemory.pdf">What Every Programmer Should Know About Memory</a>（114页pdf）</li><li><a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li><a href="https://www.usna.edu/Users/cs/roche/courses/s19ic221/lab05.html">IC221 Lab 05: Memory Leaks</a></li></ul></div><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;What，Why&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;physics-memory 及弊端&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;virtual-memory&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;virtual page&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#PTE\&quot;>页表 PTE</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Cache&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#page-hits-✔\&quot;>页命中</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#page-faults-❌\&quot;>缺页</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#locality\&quot;>Locality</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;时间局部性&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;空间局部性&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;<a href=\&quot;#memory-allocator\&quot;>memory allocator</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#衡量标准\&quot;>衡量标准</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;1. 分配&amp;amp;释放速率&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;2. 内存利用率&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;Explicit allocator&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#u-class-black-mallco-free-u\&quot;>malloc &amp;amp; free</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;new &amp;amp; delete&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;Implicit allocator&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#垃圾回收\&quot;>垃圾回收</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#memory-leaks\&quot;>memory leaks</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#Valgrind\&quot;>Valgrind</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#ASan\&quot;>ASan</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#memory-bugs\&quot;>memory bugs</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;<a href=\&quot;#引用坏指针❌\&quot;>引用坏指针</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;<a href=\&quot;#未初始化的堆内存❌\&quot;>未初始化的堆内存</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;<a href=\&quot;#缓冲区溢出❌\&quot;>缓冲区溢出</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="virtual-memory">virtual memory</h2><p>物理内存有什么问题？1. 内存空间不够，2. 产生内存碎片，3. 没有内存保护。从这个角度看，<strong>虚拟内存是一个中间层，本质是到物理内存的一层映射关系</strong>。<br>并非所有系统都会使用虚拟内存，一些古老or简单的系统就会直接使用物理内存。</p><p>物理地址和虚拟地址的对比如下：</p><ul><li><p><strong>Physical-Address</strong>：物理地址，从0开始每个byte递增1<br>物理地址可以直观反应内存大小，且是连续的，例如 <code>0x0000 ~ 0xFFFF</code> 表示 <code>64KB</code> 的内存。</p></li><li><p><strong>Virtual-Address</strong>：虚拟地址，是一种到物理地址的映射（<a href="https://en.wikipedia.org/wiki/Memory_management_unit">MMU</a>）<br>使用虚拟地址，可以节省地址总线的位数，且利于cache实现。</p></li></ul><p><img src="/images/virtual-memory.png" alt=""></p><h2 id="cache">cache</h2><p><strong>存储器</strong> 是计算机用来存储数据的器件，即通常所说的磁盘。其根据读写特性又可以分为两类：</p><ul><li><p><strong>ROM（Read-Only-Memory）</strong><br>只读，一般是显卡、网卡上的默认系统，如<code>BIOS</code></p></li><li><p><strong>RAM（Random-Access-Memory）</strong><br>可读可写，显卡上的RAM又成为显存</p></li></ul><p>为了提高CPU读写数据的速度，现代计算机在 CPU和RAM之间又增加了 <strong>速度更快、内存更小、造价更高的</strong> <em><strong>L1, L2, L3 Cache</strong></em>，这部分称为 SRAM（Static）。<br>作为对比，DRAM（Dynamic） 一般用作虚拟内存的cache。<font color="#FF1E10"><strong>（???）</strong></font></p><p>至于为什么 SRAM 速度要比 DRAM 快很多？这需要从硬件制造上理解，参考阅读：<a href="https://rf.eefocus.com/article/id-336795">存储技术SRAM详解</a></p><h2 id="page">page</h2><p>计算机内存会被划分为固定大小的 <strong>页（page）</strong>，划分页是为了实现缓存的功能。</p><p>对于虚拟内存而言，任何一个 <strong>虚拟页（virtual page, VP）</strong> 中的内存只能处于如下三种状态：</p><ul><li>unallocated：未分配内存（即不在物理内存中）</li><li>cached：已缓存（但在物理内存中）</li><li>uncached：未缓存（但在物理内存中）</li></ul><h3 id="PTE">PTE</h3><p>为了描述 虚拟页 和 DRAM 之间的缓存关系，操作系统引入 <strong>页表 PTE（Page Table Entry）</strong> 的概念。通常情况下，它有一个有效位和一个n位地址 组成：</p><ul><li><strong>有效位</strong>：对应的虚拟页是否 cached</li><li><strong>地址位</strong>：若cached，则对应 DRAM 的物理地址</li><li>其他许可位：如可读、可写、可在内核运行等</li></ul><p>配合下图理解，一段虚拟内存被分为 8个虚拟页，对应着左侧的 8个PTE，其中的虚拟页1、2、4、7已经在物理内存中被缓存，同时在PTE中存储了对应地址。</p><p><img src="/images/virtual-page.png" alt=""></p><div class="admonition note"><p class="admonition-title">虚拟内存访问页的两种情形</p><ul><li>已缓存，即 page hits</li><li>未缓存，即 page faults</li></ul></div><h3 id="page-hits-✔">page hits ✔</h3><p>页命中，即虚拟页已经在DRAM中被缓存，读取时只需根据 PTE 找到对应的物理地址。</p><h3 id="page-faults-❌">page faults ❌</h3><p>页缺失，即虚拟页 <code>cache miss</code>，这是它在 PTE 中的有效位是0，即代表其在 DRAM 中未缓存。<br>此时内核会选择一个已经被缓存的 “无辜儿” 去替换成该页，这个无辜儿又称为 <strong>牺牲页（victim page）</strong>，同时进行如下两个操作：</p><ol><li>（物理内存中）用 查找页 替换 牺牲页</li><li>（页表PTE中）交换 查找页和牺牲页 的 cache有效位</li></ol><p>注意这里的 <a href="https://forum.huawei.com/enterprise/en/thread/667215004455288832?page=1">替换策略</a> 很重要，主要有如下两种（实际应用会更复杂）：</p><ul><li>write-through：直写，发生改变时更新cache和内存</li><li>write-back：回写，发生改变时只更新cache</li></ul><p>DRAM 为了性能考虑，采取的是 <code>write-back</code> 方案。</p><h2 id="locality">locality</h2><p>虚拟内存、分页之所以能达到非常好的cache优化，是因为程序的局部性原理 <a href="https://en.wikipedia.org/wiki/Locality_of_reference">Locality of reference</a></p><ul><li><p><strong>时间局部性</strong>：一个刚刚被访问的内存地址，在未来有更大概率被再次访问</p></li><li><p><strong>空间局部性</strong>：被访问的内存地址，其周围的内存更容易被访问</p></li></ul><h2 id="memory-allocator">memory allocator</h2><p>实际开发中，当需要申请一段内存时，其大小往往不是固定的（与runtime有关），此时有如下两种内存分配到方式：</p><ul><li><code>int arr[10000];</code> 静态定义偏 <code>hard-code</code>，浪费较多内存</li><li><code>int* arr;</code> <strong>需要时动态分配内存⭐，本章重点介绍</strong></li></ul><p>C++ 提供一种在 <strong>堆(heap)</strong> 上动态分配内存的方法，一个 <code>runtime</code> 程序的内存划分如下：<br><img src="/images/section.png" alt=""></p><p>C++ 的动态内存分配器有两种类型，区别在于<strong>如何释放内存</strong>：</p><ul><li><p><font color="#ef6d3b"><strong>Explicit allocator</strong></font><br>显示分配器，要求程序自己去释放掉申请的内存，C-Style的方法是 <code>malloc/free</code>，Cpp-Style的方法是 <code>new/delete</code>；<br>当程序没有正确或及时地释放内存，就会造成 <em><strong>Memory Leaks</strong></em>。</p></li><li><p><font color="#ef6d3b"><strong>Implicit allocator</strong></font><br>隐式分配器，它会自动检测未被释放的内存块，并主动去释放掉，它有一个通俗的名称叫 <strong>Garbage Collector（垃圾回收）</strong>；<br>诸如 Java、Python 等拥有自己的垃圾回收（这部分不作讨论）。</p></li></ul><h3 id="u-class-black-mallco-free-u"><u class="black">mallco &amp; free</u></h3><ul><li>阅读文档：<a href="https://en.cppreference.com/w/c/memory">cppreference: Dynamic memory management</a></li><li>使用的时候多查阅文档，注意 <code>malloc</code> 使用时要判断 <code>NULL</code> 避免内存分配失败</li></ul><pre><code class="language-c++">#include &lt;unistd.h&gt;void *malloc(size_t size);void *calloc( size_t num, size_t size );void *realloc( void *ptr, size_t new_size );</code></pre><ul><li>分配过程：↓</li><li>需要考虑字节对齐，注意被释放后的内存也可能重复利用，这也解释了为什么野指针的 <code>undefined behavior</code></li></ul><p><img src="/images/malloc-demo.png" alt=""></p><h3 id="衡量标准">衡量标准</h3><p>动态内存分配器的实现有很多种（<code>malloc</code>是非常普遍的一种），一个优秀的分配器应该兼顾如下两种性质：</p><ul><li><p><strong>分配&amp;释放的速率</strong><br>即每秒可以进行多少次的内存分配 和 释放操作，又称为吞吐率。</p></li><li><p><strong>内存利用率</strong><br>即内存的实际利用率，受牵制与内存中的小碎片。</p></li></ul><h2 id="垃圾回收">垃圾回收</h2><p>垃圾回收（Garbage Collection）是现代高级语言的常见特性，它最早可追溯于 1960s Lisp语言，如今也已经发展为 Java、Python 等语言的重要部分。</p><h3 id="What-is-Garbage">What is Garbage?</h3><p>正所谓知己知彼方能百战百胜，欲消灭“垃圾”，先搞清楚“垃圾”的定义。<br>阅读下段代码，其中的指针<code>p</code>在函数<code>garbage</code>内部没有被释放掉，因此函数调用返回后，这就是一段内存垃圾，也称为<strong>内存泄漏</strong>。</p><blockquote><p>因此垃圾回收，就是自动释放 泄漏的内存</p></blockquote><pre><code class="language-c++">void garbage(){    int *p = (int *)Malloc(15213);    return; /* Array p is garbage at this point */}</code></pre><ul><li>实际的垃圾做法比较复杂，这里简要提一下其实现原理。</li></ul><p>垃圾回收器 会维护一个内存块的有向图，其中 <code>Reachable</code>节点就是有指针指向的，可以被手动释放；而 <code>Unreachable</code>节点就是无内存泄漏的节点，垃圾回收就是去释放它们。</p><p><img src="/images/memory-garbage.png" alt=""></p><h2 id="memory-leaks">memory leaks</h2><p>关于内存泄漏的定义，<a href="#What-is-Garbage">上面有提到</a>。这里重点介绍两种检测内存泄漏的工具。推荐阅读这篇材料: <a href="https://www.usna.edu/Users/cs/roche/courses/s19ic221/lab05.html">IC221 Lab 05: Memory Leaks</a></p><h3 id="Valgrind">Valgrind</h3><ul><li><code>valgrind ./a.out</code>：跟踪内存泄漏</li><li><code>valgrind --leak-check=full ./a.out</code>：查看更详细的内存泄漏信息</li><li><code>LEAK SUMMARY</code>：该标签，就是潜在的泄漏部分</li></ul><pre><code class="language-c++">==2392771== HEAP SUMMARY:==2392771==     in use at exit: 0 bytes in 0 blocks==2392771==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated</code></pre><h3 id="ASan">ASan</h3><p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer"><strong>AddressSanitizer</strong></a> 已集成到 gcc、clang 等编译器，添加 <code>-fsanitize=address</code> 的编译选项 并运行即可。</p><ul><li><code>g++ -fsanitize=address -g main.cp</code></li></ul><pre><code class="language-c++">===================================================================2392472==ERROR: LeakSanitizer: detected memory leaksDirect leak of 5 byte(s) in 1 object(s) allocated from:</code></pre><h2 id="memory-bugs">memory bugs</h2><p>内存bug 相对于其他类型的bug，往往更难以定义和排查。这篇文章 <a href="/posts/2F2QH5R/#Bug%E4%BA%A7%E7%94%9F%E5%8E%9F%E7%90%86">调试理论与实践</a> 指出：<strong>程序代码错（Bug）到 可观测错（Failure）之间的跨度距离，决定一个bug排查的难易程度</strong>，而内存bug的跨度尤长。</p><blockquote><p>换言之，不论是时间还是空间上，内存的错误 往往距离错误源有较长一段距离。</p></blockquote><h3 id="引用坏指针❌">引用坏指针❌</h3><p>错误表现是 <code>segmentation fault</code>，错误原因有：</p><ul><li>访问非法内存地址，如读取 <code>0x0000001</code> 地址的值；</li><li>对 “只读内存” 进行写操作，如 <code>scanf("%d", val)</code></li></ul><div class="admonition warning"><p class="admonition-title">WARNING</p><ul><li><code>scanf("%d", val)</code> 会将 <code>val</code> 的值解释为一个地址</li><li>如果该地址只读，会出现 <code>segmentation fault</code></li><li>如果该地址可写，程序会覆盖这段内存，造成无法预测的后果...</li></ul></div><h3 id="未初始化的堆内存❌">未初始化的堆内存❌</h3><p>对于 <code>.bss</code> 的静态内存，加载器会将其初始化为0，但是堆内存的值是无法预测的。</p><p>如下 <code>y</code> 数组的值不一定都为0，请手动为其赋值。<br><code>int *y = (int *)malloc(5 * sizeof(int))</code></p><h3 id="缓冲区溢出-❌">缓冲区溢出 ❌</h3><p>这类bug使用中文有点别扭，实际是 <code>Stack (Buffer) Overflows</code>，即写内存时超出原本的大小限制。如下当输入超过 64 bits 就会出现 <code>segmentation fault</code>：</p><pre><code class="language-c++">char buf[64];scanf("%s", &amp;buf);</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSAPP】CMU 15-213</title>
      <link href="/posts/csapp/"/>
      <url>/posts/csapp/</url>
      
        <content type="html"><![CDATA[<p>CS网课中的 “圣经”<span id="more"></span></p><style type="text/css">blockquote{    line-height: 30px;    padding: 4px 16px;}</style><blockquote><ul><li><a href="https://www.cs.cmu.edu/~213/">课程主页</a> | <a href="https://www.bilibili.com/video/BV1iW411d7hd/">B站视频（中字）</a> | <a href="https://www.cs.cmu.edu/~213/lectures/">课程ppt</a></li><li><a href="http://1.15.115.4/CSAPP-3rd.pdf">CSAPP pdf 英文版</a></li><li><a href="https://github.com/Maecenas/ICS-15213-CSAPP3e-CMU">Labs Github</a></li><li><a href="https://fengmuzi2003.gitbook.io/csapp3e/">CSAPP重点解读</a></li><li><a href="https://wdxtub.com/work/">读薄/读厚 CSAPP</a></li></ul></blockquote><h2 id="CSAPP">CSAPP</h2><p>CSAPP 是 《Computer Systems: A Programmer’s Perspective》 这本书的缩写，它作为CMU大学的ICS课教材，被誉为计算机系列课程的圣经，其内容涉及：计算机组成原理、操作系统、编译优化、网络和并发等。</p><p>“万丈高楼平地起，勿以浮沙筑高台”，学习计算机的底层原理，是在修炼内功、在夯实基础，这比修一个bug或者读几段代码更加实在。</p><h3 id="站内文章">站内文章</h3><ul><li><a href="/posts/24H1CZ3/">2. Information Storage</a></li><li><a href="/posts/1X3A6C1/">9. Virtual Memory</a></li></ul><h2 id="关于-labs">关于 labs</h2><p>首先 <code>CSAPP</code> 的整个学习过程：以 <code>labs</code> 为主，视频和ppt 为辅。在github上找到一份疑似官方一致的repo，自己fork了一份用于开发：<a href="https://github.com/593413198/ICS-15213-CSAPP3e-CMU">🔥<em><strong>Github Repo</strong></em></a></p><p>整个 labs 的设计非常精巧，还囊括了测试、评分的用例，后者是用 python2 脚本编写。以 lab-0 为例稍微介绍其整体的架构设计：</p><ul><li><code>RAEDME</code>：实验说明</li><li><code>Makefile</code>：通过 <code>make</code> 完成实验的编译、运行与测试</li><li><code>*.c, *.h</code>：lab源码 ⭐</li><li><code>qtest</code>：脚本驱动的测试框架，值得一读 ⭐</li></ul><p>其中 <code>console.c</code> 实现了一个精巧的可交互命令行，并集成一些用于 lab 的指令。<code>qtest</code> 集成了前者和一些测试用例，它将评判你的代码是否通过多少case、以及获得多少得分。</p><p><strong>通过实验，读懂实验框架代码，这两件事都很重要！</strong></p><h2 id="Lab0-c-programing">Lab0 - c programing</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【cpp】Constructors</title>
      <link href="/posts/17P7469/"/>
      <url>/posts/17P7469/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">提要</p><ul><li><a href="https://hackingcpp.com/cpp/lang/destructors.html">hackingcpp: destructors</a></li><li>面向一些基础使用，因此所涉比较浅</li></ul></div><h2 id="基础">基础</h2><p><code>cpp</code> 有 3 种特殊的成员函数，本文所有的内容都围绕它们展开：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">what</th><th style="text-align:center">when</th></tr></thead><tbody><tr><td style="text-align:left"><code>T::T()</code></td><td style="text-align:center">默认<u class="green">构造</u>函数</td><td style="text-align:center"><code>T</code>创建时</td></tr><tr><td style="text-align:left"><code>T::~T()</code></td><td style="text-align:center">默认<u class="green">析构</u>函数</td><td style="text-align:center"><code>T</code>销毁时</td></tr><tr><td style="text-align:left"><code>T::T(param…)</code></td><td style="text-align:center">特殊<u class="green">构造</u>函数</td><td style="text-align:center"><code>T</code>带参数创建时</td></tr></tbody></table><p>即使用户不去声明 构造 和 析构 函数，编译器也会<strong>自行创建者两者</strong>。</p><p>构造函数的调用时机很容易理解，但<strong>析构函数的调用时机</strong>很特殊。</p><ul><li><p>显式地销毁对象</p></li><li><p>隐式地被销毁，如局部变量的作用域结束</p></li></ul><pre><code class="language-c++">if (...) {    T x;  // constructor}  // destructor</code></pre><h2 id="Constructor">Constructor</h2><p>构造函数根据构造的类型，又分为如下几类：</p><pre><code class="language-c++">class Test{public:    Test(int a);  // 构造函数    Test(const Test&amp;);  // 拷贝构造函数    Test&amp; operator=(const Test&amp;);  // 拷贝赋值operator    Test();   // 构造函数    ~Test();  // 析构函数}</code></pre><p>考虑如下两个初始化的用法，才能看出调用构造函数的区别：</p><ul><li><code>Test t1(88);</code>：普通构造函数</li><li><code>Test t1 = t2;</code>：拷贝构造函数</li><li><code>Test t1; t1 = t2;</code>：拷贝赋值operator</li></ul><div class="admonition warning"><p class="admonition-title">C++11 delete</p><ul><li>申明为 <code>Test(const Test&amp;) = delete;</code> 可以禁止用户使用拷贝构造函数</li><li>此时如果调用，会有编译报错：<u class="error"><code>error: use of deleted function ‘Test::Test(const Test&amp;)’</code></u></li></ul></div><h2 id="Destructor">Destructor</h2><p>析构函数的调用顺序是编译器严格限制的，即<strong>析构顺序与声明顺序相反</strong>。</p><p>对于如下的结构体 <code>Test</code>，当对象发生销毁时，执行析构的顺序依次是：</p><ul><li><code>Test -&gt; t3 -&gt; t2 -&gt; t1</code></li></ul><pre><code class="language-c++">class Test {    T1 t1;    T2 t2;    T3 t3;public:    Test();    ~Test();}</code></pre><h2 id="RAII">RAII</h2><blockquote><p><em>Resource Acquisition Is Initialization</em></p></blockquote><p>这条 <a href="https://stackoverflow.com/questions/2321511/what-is-meant-by-resource-acquisition-is-initialization-raii">stackoverflow</a> 认为<code>RAII</code>应该称作<code>Scope-Bound Resouce Managerment</code>，这样更容易理解，笔者深表赞同，因此下面也围绕这个理解展开。</p><p><strong>Resource</strong></p><p>首先理解什么是 <code>Resource</code>? 可以理解为任何需要被合理控制的c++对象</p><ul><li><em>file handles</em></li><li><em>thread</em></li><li><em>lock</em></li><li>…</li></ul><p>对于任何一个resouce，它的生命周期会经历 <u class="black"><strong>创建 -&gt; 使用 -&gt; 销毁</strong></u> 三个阶段。而销毁往往最容易被忽视，这会引起内存泄漏等问题。</p><p><strong>Scope-Bound</strong></p><p><code>Scope</code>是指一个resource的作用域，当其离开作用域时，应该自动调用其析构函数以使其销毁。</p><div class="admonition note"><p class="admonition-title">总结</p><ul><li><code>RAII</code> 是一种防止内存泄漏而进行自动析构的cpp特性</li></ul></div><h3 id="RAII应用">RAII应用</h3><p>一些 C Library 总是会成对出现一些功能性的函数，例如：</p><ul><li><code>gpulib_init</code>, <code>gpulib_finalize</code></li></ul><p>如果只调用了init函数，而忘记调用负责析构的后者，就会出现内存泄漏、资源hung-up等bug。<br>因此我们可以在cpp层通过 RAII 的理念将它们封装一层：</p><pre><code class="language-c++">#include &lt;gpulib.h&gt;class GPUContext {  int gpuid_;public:  explicit  GPUContext (int gpuid = 0): gpuid_{gpuid} {    gpulib_init(gpuid_);  }  ~GPUContext () {    gpulib_finalize(gpuid_);  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023下半年规划</title>
      <link href="/posts/2023b/"/>
      <url>/posts/2023b/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fdec424a6cd540cedadc4ed117086690fc638ae05c1eea9a23d3ca73ff669d23"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【vscode】如何配置断点调试</title>
      <link href="/posts/1RVNF84/"/>
      <url>/posts/1RVNF84/</url>
      
        <content type="html"><![CDATA[<p>包含<code>python、cpp、ts/js</code>等调试<span id="more"></span></p><div class="admonition note"><p class="admonition-title">概要</p><ul><li><a href="https://code.visualstudio.com/docs/editor/debugging">vscode debug 官方文档</a></li><li>附一张日常开发调试用的 vscode调试面板 截图<img src="/images/vscode-debug.png" alt=""></li></ul></div><h2 id="环境配置">环境配置</h2><p>vscode 虽然是一款轻量级编辑器（相比于Visual Studio、pycharm），但只要搭配正确的插件使用，依然可以轻松拥有 <code>IDE</code> 的断点debug功能。</p><h3 id="launch-json">launch.json</h3><p>vscode 的调试配置都写在 <code>launch.json</code> 文件中，它的位置是在 <code>.vscode</code> 目录下。如下是一个最简单的 python debug 配置：</p><pre><code class="language-xml">{    "version": "0.2.0",    "configurations": [        {            "type": "python",            "request": "launch",            "name": "Python: debug",        }    ]}</code></pre><p>常见字段的含义和配置方法如下：</p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">作用</th><th style="text-align:center">必选</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">调试语言，需要安装对应的<code>debug extension</code></td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">支持 <code>launch</code> 和 <code>attach</code> 两种模式</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left">name</td><td style="text-align:left">调试选项中展示的名称</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left">program</td><td style="text-align:left">调试的目标文件，如 <code>main.py</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">args</td><td style="text-align:left">参数，格式为 <code>["1", "2"]</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">env</td><td style="text-align:left">环境变量</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">cwd</td><td style="text-align:left">设置工作目录</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">port</td><td style="text-align:left">attach模式指定端口</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">console</td><td style="text-align:left">使用哪种终端: <br><code>internalConsole</code>, <code>integratedTerminal</code>, <code>externalTerminal</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">preLaunchTask</td><td style="text-align:left">debug之前运行指定Task</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">postDebugTask</td><td style="text-align:left">debug之后运行指定Task</td><td style="text-align:center"></td></tr></tbody></table><p>一些常用的环境变量：</p><ul><li><code>${file}</code>：表示正在打开的文件</li><li><code>${workspaceFolder}</code>：表示 <code>workspace</code> 的根目录</li></ul><h2 id="python">python</h2><p>python一般选择调试当前文件，要注意工作目录是否正确。</p><pre><code>{    "name": "Python: 调试当前文件",    "type": "python",    "request": "launch",    "program": "${file}",}</code></pre><div class="admonition warning"><p class="admonition-title">python2调试</p><ul><li>新版的 <code>python extension</code> 往往不支持 python2 断点调试，需要回退到<code>2021</code>年左右的版本</li></ul></div><h2 id="cpp">cpp</h2><p><a href="https://code.visualstudio.com/docs/cpp/cpp-debug">官方文档: Debug C++ in VSCode</a></p><p>C/C++ 的断点调试略微复杂，需要分为两个步骤：</p><ul><li>使用 <code>gcc/g++</code> 将源码编译为 可执行文件（默认为<code>a.out</code>）</li><li>使用 <code>gdb</code> 调试 可执行文件</li></ul><h3 id="1-编译">1. 编译</h3><p>首先借助 vscode tasks 将cpp源码编译为可执行文件，配置如下：<br>详细可以阅读 <a href="https://code.visualstudio.com/docs/editor/tasks">官方文档：VSCode Tasks</a></p><pre><code class="language-xml">{    "tasks": [        {            "type": "cppbuild",            "label": "C/C++: gcc build",            "command": "/usr/bin/g++",            "args": [                "-g",                "${file}", // 编译的cpp文件                "-o",                "${workspaceFolder}/a.out" // 生成的可执行文件            ],            "options": {                "cwd": "${workspaceFolder}"            },            "problemMatcher": [                "$gcc"            ],        }    ],}</code></pre><p>配置 <code>tasks.json</code> 完毕后，可以通过 <code>ctrl+p</code> 输入 <code>Run Task</code> 并选中 <code>C/C++: gcc build</code>，可以将当前cpp源码编译为指定的 <code>a.out</code> 可执行文件。<br>后面的调试需要用到这个task。</p><h3 id="2-调试">2. 调试</h3><p>接下来配置 <code>launch.json</code> 以实现对上一步生成的 <code>a.out</code> 调试，配置如下：</p><pre><code class="language-xml">{    "name": "gcc/g++ debug",    "type": "cppdbg",    "request": "launch",    "program": "${workspaceFolder}/a.out", // 需要调试的二进制文件    "args": [],    "stopAtEntry": false,    "cwd": "${workspaceFolder}",    "environment": [],    "externalConsole": false,    "MIMode": "gdb",    "setupCommands": [        {            "description": "Enable pretty-printing for gdb",            "text": "-enable-pretty-printing",            "ignoreFailures": true        }    ],    "preLaunchTask": "C/C++: gcc build",    "miDebuggerPath": "/usr/bin/gdb"}</code></pre><p>其中的 <code>preLaunchTask</code> 会在按下 <code>f5</code> 调试按钮后，先行运行指定的Task，即编译指定的cpp源码文件，然后调用 linux下的 <code>/usr/bin/gdb</code> 对可执行文件进行调试。</p><h2 id="Node-js">Node.js</h2><p>vscode 对于 <code>js/ts</code> 的开发生态支持度非常高（毕竟vscode插件都是基于<code>typescript</code>所开发的）</p><pre><code class="language-xml">{    "type": "node",    "request": "launch",    "name": "JS/TS debug",    "skipFiles": [        "&lt;node_internals&gt;/**"    ],    "program": "${file}"}</code></pre><h2 id="others">others</h2><div class="admonition warning"><p class="admonition-title">其他语言用到时再补充</p></div>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【cpp】pointers</title>
      <link href="/posts/pointer/"/>
      <url>/posts/pointer/</url>
      
        <content type="html"><![CDATA[<p>cpp指针、地址、引用相关<span id="more"></span></p><div class="admonition note"><p class="admonition-title">概要</p><ul><li>指针是C++学习中绕不过去的难题，需要对计算机内存有深入的理解。</li><li><a href="https://hackingcpp.com/cpp/lang/pointers.html">hacking C++ Pointers</a></li><li><a href="http://alumni.cs.ucr.edu/~pdiloren/C++_Pointers/">Learning C++ Pointers for REAL Dummies</a></li><li><font color="#FF1E10"><strong>todo: unique_ptr, shared_ptr ...</strong></font></li></ul></div><h2 id="When">When</h2><p>任何一门技术（或者概念），都是服务于具体的需求，或者在特定的需求场景下，才会诞生。<br>C++的指针也不例外，它的出现是为了满足如下三个常见的场景：</p><ul><li><p><strong>持有（任意的）对象</strong><br>在避免 copy 的情况下持有对象，这是 cpp 最重要的语言特性之一，通过指针可以实现对象的引用。</p></li><li><p><strong>访问动态内存</strong><br>这块暂时没理解，todo…</p></li><li><p><strong>创建某些动态的数据结构</strong><br>如 vector，链表，树等结构。</p></li></ul><h2 id="What">What</h2><blockquote><p>Pointer to Object of type <code>T</code>，which stores a memory address.</p></blockquote><p>指针<strong>永远指向一个具体的对象</strong>（任意类型<code>T</code>），也可以是空对象（<code>nullptr</code>）。<br>指针的<strong>本质是一个内存地址</strong>，这个地址在 x64 的机器上占 64 Bits，即 <code>usigned int64</code>。<br>指针的生命周期，和它所指向对象的生命周期，两者是相互独立的。</p><div class="admonition todo"><p class="admonition-title">TODO: 通常说的 “指针” 是指c++默认指针，不包括如下（有空补充）</p><ul><li><code>std::unique_pointer</code></li><li><code>std::shared_pointer</code></li><li><code>std::weak_pointer</code></li></ul></div><h2 id="Operators">Operators</h2><p>C++有三个操作符与指针相关，分别是 <code>&amp;</code>、<code>*</code>、<code>-&gt;</code>，需要区分其不同的使用场景和含义。</p><h3 id="Address"><code>&amp;</code>: Address</h3><p><code>&amp;</code> 的含义是<strong>取地址</strong>，<code>&amp;a</code> 会<strong>返回对象a的地址</strong>。</p><p><img src="/images/cpp-address.png" alt=""></p><h3 id="Dereference"><code>*</code>: Dereference</h3><p><code>*</code> 的含义是<strong>解引用</strong>，该操作符后面会跟随一个地址，<code>*p</code>会<strong>返回地址p上的值</strong>。</p><p><img src="/images/cpp-pointer.png" alt=""></p><h3 id="Member-Access"><code>-&gt;</code>: Member Access</h3><p><code>-&gt;</code> 的作用是<strong>访问类成员</strong>，准确说是访问一段地址上的某个成员属性，经常会和 <code>.</code> 使用混淆。</p><ul><li>对于指针类型，使用 <code>-&gt;</code></li><li>对于具体的对象，使用 <code>.</code></li></ul><p><img src="/images/cpp-access.png" alt=""></p><h3 id="和-的区别"><code>&amp;</code> 和 <code>*</code> 的区别</h3><p>作为不同的操作数有不同用法，区别如下：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><code>*</code></th><th style="text-align:center"><code>&amp;</code></th></tr></thead><tbody><tr><td style="text-align:center">声明符</td><td style="text-align:center">定义指针: <code>int *p = nullptr</code></td><td style="text-align:center">定义引用: <code>int &amp;a = b</code></td></tr><tr><td style="text-align:center">一元操作符</td><td style="text-align:center">解引用: <code>char a = *p</code></td><td style="text-align:center">取地址: <code>auto p = &amp;a</code></td></tr><tr><td style="text-align:center">二元操作符</td><td style="text-align:center">乘法运算: <code>a * b</code></td><td style="text-align:center">与运算: <code>a &amp; b</code></td></tr></tbody></table><div class="admonition warning"><p class="admonition-title">不要在单行申明多个指针</p><ul><li><u class="error"><code>int *a, b</code></u>：容易产生歧义，建议多行申明</li></ul></div><h3 id="pointer-to-pointer-⭐"><code>**</code>: pointer to pointer ⭐</h3><pre><code class="language-c++">int   v = 5;int*  p = &amp;v;  // 指向intint** pp = &amp;p  // 指向int*</code></pre><h2 id="nullptr-C-11">nullptr (C++11)</h2><blockquote><p>nullptr is a special pointer value</p></blockquote><p><code>NULL</code> 完全等同于0，<code>nullptr</code> 本质是一个空指针对象，注意两者的区别！<br>作为规范，<code>nullptr</code> 通常代表 <strong>无法访问的变量</strong>（value not available）</p><div class="admonition note"><p class="admonition-title">nullptr 编码规范</p><ul><li>指针初始化时，赋值为nullptr：<code>int *p = nullptr</code></li><li>解引用时，检查该指针是否为nullptr：<code>if (p != nullptr) { *p = 8; }</code></li></ul></div><h2 id="const-pointer">const pointer</h2><blockquote><p>Read-only and preventing pointer redirection.</p></blockquote><p><code>const</code> 搭配指针会产生奇妙的化学反应，一共有如下四种情形：<br>牢记口诀：<strong><code>const</code> 左边的永远是不可变的。</strong></p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">指向的对象 可修改?</th><th style="text-align:center">指针自身 可修改?</th></tr></thead><tbody><tr><td style="text-align:left"><code>int *</code></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"><code>int const *</code></td><td style="text-align:center">❌</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"><code>int * const</code></td><td style="text-align:center">✔</td><td style="text-align:center">❌</td></tr><tr><td style="text-align:left"><code>int const * const</code></td><td style="text-align:center">❌</td><td style="text-align:center">❌</td></tr></tbody></table><p>下面看一段代码示例：</p><pre><code class="language-c++">int i = 5;int j = 8;int const* cp = &amp;i;*cp = 8;   //  ❌ COMPILER ERROR: pointed-to value is constcp = &amp;j;   //  ✔int *const pc = &amp;i;*pc = 8;   //  ✔pc = &amp;j;   //  ❌ COMPILER ERROR: pointer itself is constint const*const cpc = &amp;i;*cpc = 8;  //  ❌ COMPILER ERROR: pointed-to value is constcpc = &amp;j;  //  ❌ COMPILER ERROR: pointer itself is const</code></pre><h2 id="this-pointer">this pointer</h2><p><code>this</code> 仅在类内部使用，<strong>本质是一个指针</strong>。</p><ul><li><p><code>this</code> 返回类对象的地址</p></li><li><p><code>*this</code> 访问类自身</p></li><li><p><code>this-&gt;</code> 用来访问内部的成员</p></li></ul><h2 id="Memory">Memory</h2><p>接下来从 <strong>内存分配</strong> 的视角，理解指针在计算机内的存储，以及指针运算符做了什么。</p><ul><li><p>根据内存对齐，<code>char</code> 和 <code>short</code> 在内存中都占据 4 bytes</p></li><li><p>指针的本质，就是第一个byte的16位地址（因此 <code>sizeof(p) = 2</code>）</p></li></ul><p><img src="/images/pointer-memory.png" alt=""></p><ul><li><p>下图演示指针的<code>++</code>，会根据指向对象的内存大小而进行偏移</p></li><li><p><code>pointer += 2</code> 或者 <code>pointer --</code> 也是同样道理</p></li><li><p><code>pointer[3]</code> 等价于 <code>pointer += 3</code> 后的取值</p></li></ul><p><img src="/images/pointer-memory-add.png" alt=""></p><h2 id="⚠️-Warning">⚠️ Warning</h2><p>指针使用经常会出现如下几种错误：</p><h3 id="1-dangling-pointer">1. dangling pointer</h3><blockquote><p><em><strong>dangling</strong></em>： pointer points to an invalid/inaccessible memory address</p></blockquote><p>永远确保 <strong>指针指向的对象是合理的</strong>，否则出现 悬空指针（迷途指针）。</p><ul><li>error 1：访问 未初始化的对象</li></ul><pre><code class="language-c++">int *p; // p not initialized!*p = 7; // ❌</code></pre><ul><li>error 2：访问 nullptr</li></ul><pre><code class="language-c++">int *p = nullptr;*p = 7; // ❌</code></pre><ul><li>error 3：指向 无法访问的内存<br><code>p = 0x0000001</code>，这是运行程序无法访问的内存段，运行时会报错。</li></ul><h3 id="2-pointer-argument-passing">2. pointer argument passing</h3><p>当函数的参数定义为指针时，注意传入的参数，不能是一个非法的指针。</p><pre><code class="language-c++">void swap_values (int* a, int* b) {  int t = *a;  *a = *b;  *b = t;}int x = 3, y = 4;swap_values(&amp;x, &amp;y)        // ✔swap_values(&amp;x, 0);        // ❌ UNDEFINED BEHAVIORswap_values(&amp;x, nullptr);  // ❌ UNDEFINED BEHAVIOR</code></pre><h3 id="3-hard-code">3. hard code</h3><p>通过合理的编码，区分 <code>*</code> 的频繁使用，尤其是乘法和指针混合使用的场景。</p><p><code>*p = *p * *p + (2 * *p + 1);   // SO MANY STARS!</code></p><h2 id="指针习题">指针习题</h2><p>当你以为入门了cpp指针，尝试解答下面的题目，常看常新：</p><ul><li>已知如下的地址和取值，问如下输出</li></ul><pre><code class="language-c++">cout &lt;&lt; v;cout &lt;&lt; p;cout &lt;&lt; pp;cout &lt;&lt; &amp;v;cout &lt;&lt; &amp;p;cout &lt;&lt; &amp;pp;cout &lt;&lt; *v;cout &lt;&lt; *p;cout &lt;&lt; **pp;</code></pre><p><img src="/images/pointer-question.png" alt=""></p><h3 id="解析如下："><strong>解析如下：</strong></h3><ul><li><p><code>cout &lt;&lt; v</code>：5</p></li><li><p><code>cout &lt;&lt; p</code>：0x44</p></li><li><p><code>cout &lt;&lt; pp</code>：0x48</p></li><li><p><code>cout &lt;&lt; &amp;v</code>：0x40 (=p)</p></li><li><p><code>cout &lt;&lt; &amp;p</code>：0x44 (=pp)</p></li><li><p><code>cout &lt;&lt; &amp;pp</code>：0x48</p></li><li><p><code>cout &lt;&lt; *p</code>：5</p></li><li><p><code>cout &lt;&lt; *pp</code>：0x40 (=p)</p></li><li><p><code>cout &lt;&lt; **pp</code>：5</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackingcpp.com</title>
      <link href="/posts/1GTNS16/"/>
      <url>/posts/1GTNS16/</url>
      
        <content type="html"><![CDATA[<p><code>hackingcpp</code> 网站的学习记录<span id="more"></span></p><div class="admonition note"><p class="admonition-title">背景</p><ul><li><a href="https://hackingcpp.com/"><em><strong>hackingcpp</strong></em></a> 是一个偶然发现的优秀C++学习网站，开这篇记录学习过程。</li><li><a href="/posts/142JHJQ/">pointers</a></li><li><a href="/posts/10R6MRC/">constructors &amp; destructors</a></li></ul></div><h2 id="Environment">Environment</h2><h3 id="ISO-Standard-C">ISO Standard C++</h3><p>C++语言标准，前后经历如下几个大的版本。大学教程所传授的C++基本是围绕 98 展开，工作中使用的 “现代C++特性” 基本也不出 11。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">时间</th><th style="text-align:left">特性</th></tr></thead><tbody><tr><td style="text-align:center"><em>C++98</em></td><td style="text-align:center">1998</td><td style="text-align:left">the original standard</td></tr><tr><td style="text-align:center"><em>C++11</em></td><td style="text-align:center">2011</td><td style="text-align:left">almost a new language</td></tr><tr><td style="text-align:center"><em>C++14</em></td><td style="text-align:center">2014</td><td style="text-align:left">some improvements</td></tr><tr><td style="text-align:center"><em>C++17</em></td><td style="text-align:center">2017</td><td style="text-align:left">new features &amp; library extensions</td></tr><tr><td style="text-align:center"><em>C++20</em></td><td style="text-align:center">2020</td><td style="text-align:left">game-changing new features &amp; libraries</td></tr></tbody></table><h3 id="Compiler">Compiler</h3><p>主要有 gcc, clang, MSVC 三种主流的C编译器，其跨平台、兼容性、代码生成和优化都有所差异。不过 99% 的开发场景不需要考虑到 这三种编译器 之间的差异性。</p><p>看到一些资料，都会说 <strong>clang 的性能和内存都要优于 gcc</strong>，这里不了解所以不作为何描述。</p><ul><li><p><font color="#1A9BFF"><strong>gcc/g++</strong></font><br>GNU C++ 编译器，使用最为广泛。</p></li><li><p><font color="#1A9BFF"><strong>clang/clang++</strong></font><br>又称 LLVM，一般作为 Mac 默认的编译器，因为其同时支持 C、C++、Objective-C。<br>关于 gcc和clang的对比，推荐阅读该材料：<a href="https://opensource.apple.com/source/clang/clang-23/clang/tools/clang/www/comparison.html#:~:text=Clang%20is%20much%20faster%20and,does%20not%20support%20expressive%20diagnostics">Clang vs GCC</a></p></li><li><p><font color="#1A9BFF"><strong>MSVC</strong></font><br>Microsoft Visual C++ 是由微软开发的C++编译器及相关环境，只使用于 Windows。简单来说，这是 windows C++ 开发的 <s>唯一</s> 最好选择。</p></li></ul><h3 id="Running">Running</h3><p><code>g++ hello.cpp -o sayhello &amp;&amp; ./sayhello</code></p><p>C++是一门编译型的静态语言，（区别于 Python）其源代码是无法直接运行的，而是需要通过前面说的编译器 转换成二进制的机器代码。因此一个 <code>.cpp</code> 文件的执行需要经过如下几个步骤：</p><p><img src="/images/cpp-running.png" alt=""></p><h3 id="Compiler-Flags">Compiler Flags</h3><p><code>g++ -std=c++20 -Wall -Wextra -Wpedantic -Wshadow input.cpp -o output</code></p><p>需要掌握基本的 <a href="https://caiorss.github.io/C-Cpp-Notes/compiler-flags-options.html">C++编译选项</a>，如 Warnings、编译标准、优化等级 等。</p><table><thead><tr><th style="text-align:center">编译选项</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>-std=c++20</code></td><td style="text-align:left">使用 <em>C++20</em> 标准编译</td></tr><tr><td style="text-align:center"><code>-Wall</code></td><td style="text-align:left">打开一系列的编译警告</td></tr><tr><td style="text-align:center"><code>-O0 </code></td><td style="text-align:left">优化选项，代表关闭所有优化</td></tr></tbody></table><p>当你在 windows  MSVC 开发时，借助 Visual Studio 可以在 “属性页” 查看和编辑所有的优化选项。它实际上是提供了一个可配置的GUI框。</p><h2 id="Variables">Variables</h2><p>最基本的变量申明方式有两种：</p><ul><li><code>type var = value</code>: 通用写法</li><li><code>type var {value}</code>: <em>C++11</em> 标准</li></ul><div class="admonition warning"><p class="admonition-title">undefined behavior</p><ul><li>时刻牢记初始化变量，这样能避免很多类似Bug</li></ul></div><p>注意 <code>a++</code> 和 <code>++a</code> 的区别，在合适的场景使用两者：</p><ul><li><code>a++</code>：返回旧值</li><li><code>++a</code>：返回新值</li></ul><h3 id="Type-Narrowing">Type Narrowing</h3><ul><li>低精度 向 高精度 转换：OK</li><li>高精度 向 低精度 转换：NARROWING，有信息丢失</li></ul><h3 id="Control-flows">Control flows</h3><div class="admonition note"><p class="admonition-title">if (statement; condition) {...}</p><ul><li><code>C++17</code> 允许这样的写法: <code>if ( int x = 5; x &gt; 0) { ... }</code></li><li><code>switch</code> 同理</li></ul></div><h3 id="using">using</h3><p>使用 <code>using</code> 代替 <code>typedef</code>，用来作类型的赋值，例如：</p><ul><li><p><code>using real = double</code></p></li><li><p><code>usning int_vector = std::vector&lt;int&gt;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日志】2023年6月</title>
      <link href="/posts/2023/6/"/>
      <url>/posts/2023/6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="57315dc35c6a9822422a46384cc2e8e6074031f23a2214e52d6bdf3d2abaf09f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【selenium】自动秒杀脚本</title>
      <link href="/posts/3R1HHH2/"/>
      <url>/posts/3R1HHH2/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li>借助 <code>Python + Selenium</code> 实现 <code>taobao</code> 购物车自动秒杀</li></ul></div><div class="admonition error"><p class="admonition-title">TODO</p><ul><li>增加定时秒杀的功能</li><li><code>time.sleep</code>的时间把控（短则逻辑错误，长则秒杀失败...）</li><li>实测，实战</li></ul></div><h3 id="环境">环境</h3><p>下面以 windows 环境为例，因为高度依赖 chrome ui 界面操作，linux 暂且按下不表</p><ul><li><p><code>pip3 install selenium</code>，直接下载最新的 <code>selenium</code> 库</p></li><li><p><code>chrome://version/</code>，在 <code>chrome</code> 浏览器输入 以查看当前版本</p></li><li><p><a href="https://registry.npmmirror.com/binary.html?path=chromedriver/"><code>mirrors/chromedriver/</code></a>，下载对应版本的 <code>chromedriver.exe</code></p></li></ul><h3 id="访问网页">访问网页</h3><p>只需要掌握 <code>webdriver</code> 的几个核心接口：<code>Chrome</code>、<code>ChromeOptions</code>、<code>find_element</code></p><ul><li><code>options = webdriver.ChromeOptions()</code><br>创建一个 chrome 的配置项，实际用途是避开反爬虫的js检测。<br>具体代码如下，复制粘贴即可：</li></ul><pre><code class="language-python">options.add_experimental_option('excludeSwitches', ['enable-automation'])options.add_argument("--disable-blink-features=AutomationControlled")</code></pre><ul><li><p><code>driver = webdriver.Chrome(executable_path='./chromedriver.exe', options=options)</code><br>创建一个 chrome 的自动化示例，它会唤起一个谷歌浏览器，但是又不同于正常打开的 <code>chrome.exe</code>。<br>注意，需要传入对应版本的 <code>chromedriver.exe</code> 的路径。</p></li><li><p><code>driver.get('https://cart.taobao.com/cart.htm')</code><br>利用 chrome 访问指定的网页</p></li><li><p><code>driver.find_element('id', 'xxx')</code><br>根据html、css规则，查找指定的对象。<br>可选的参数有 <code>id</code>、<code>xpath</code>、<code>name</code>…<br>注意，旧版的方法是 <code>find_element_by_id</code>…</p></li></ul><h3 id="自动登录">自动登录</h3><p>前面访问的网页是 <a href="https://cart.taobao.com/cart.htm">cart.taobao.com/cart.htm</a>，如果浏览器没有对应的缓存，则会自动跳转到登录界面。<br>这时候需要借助 <code>find_element</code> 实现自动登录与跳转。</p><table><thead><tr><th style="text-align:center">find_element</th><th style="text-align:center">Arg1</th><th style="text-align:center">Arg2</th></tr></thead><tbody><tr><td style="text-align:center">用户名</td><td style="text-align:center">name</td><td style="text-align:center">fm-login-id</td></tr><tr><td style="text-align:center">密码</td><td style="text-align:center">name</td><td style="text-align:center">fm-login-password</td></tr></tbody></table><p>代码示例为：</p><pre><code class="language-python"># 用户名input = driver.find_element('name', 'fm-login-id')input.clear() # 清空# time.sleep(0.2) # 防止过快input.send_keys('*******') # 输入您的用户名# 密码input = driver.find_element('name', 'fm-login-password')input.clear() # 清空# time.sleep(0.2) # 防止过快input.send_keys('*******') # 输入您的密码# 跳转driver.find_element("xpath", "//*[@id='login-form']/div[4]/button").click()</code></pre><h3 id="自动下单">自动下单</h3><div class="admonition note"><p class="admonition-title">某宝下单成功有三个步骤</p><ul><li>1.购物车中 “勾选商品”</li><li>2.点击 “结算” 按钮 （选中商品后，按钮才是可点击态）</li><li>3.点击 “提交订单” 按钮 （选择收货地址）</li></ul></div><table><thead><tr><th style="text-align:right">步骤</th><th style="text-align:right">Arg1</th><th style="text-align:right">Arg2</th></tr></thead><tbody><tr><td style="text-align:right">1. 勾选商品</td><td style="text-align:right"><code>id</code></td><td style="text-align:right"><code>J_SelectAll1</code></td></tr><tr><td style="text-align:right">2. 点击结算</td><td style="text-align:right"><code>id</code></td><td style="text-align:right"><code>J_Go</code></td></tr><tr><td style="text-align:right">3. 提交订单</td><td style="text-align:right"><code>link text</code></td><td style="text-align:right"><code>提交订单</code></td></tr></tbody></table><ul><li>勾选商品</li></ul><p>下面简化为购物车内的商品全选。</p><pre><code class="language-python">while 1:    try:        select_all = driver.find_element("id", 'J_SelectAll1')        if select_all:            select_all.click()            break    except:        print ('Retry: 全选商品')</code></pre><ul><li>点击结算</li></ul><pre><code class="language-python">while 1:    try:        buy = driver.find_element("id", 'J_Go')        if buy:            buy.click()            break    except:        print ('Retry: 点击结算')</code></pre><ul><li>提交订单</li></ul><pre><code class="language-python">while 1:    try:        a = driver.find_element("link text", "提交订单")        if a:            a.click()            break    except:        print ('Retry: 提交订单')</code></pre><h3 id="代码示例">代码示例</h3><pre><code class="language-python"># coding: utf-8import timefrom selenium import webdriverusername = ''password = ''TB_LOGIN_URL = 'https://cart.taobao.com/cart.htm'options = webdriver.ChromeOptions()options.add_experimental_option('excludeSwitches', ['enable-automation'])options.add_argument("--disable-blink-features=AutomationControlled")# exe path for chromedriver.exeexe_path = r'E:\chromedriver.exe'driver = webdriver.Chrome(executable_path=exe_path, options=options)driver.get(TB_LOGIN_URL)input = driver.find_element('name', 'fm-login-id')input.clear()driver.implicitly_wait(0.5)print ("Username:", username)input.send_keys(username)input = driver.find_element('name', 'fm-login-password')input.clear()driver.implicitly_wait(0.5)print ("password:", password)input.send_keys(password)driver.find_element("xpath", "//*[@id='login-form']/div[4]/button").click()time.sleep(0.2)# while 1:#     try:#         select_all = driver.find_element("id", 'J_SelectAll1')#         if select_all:#             select_all.click()#             break#     except:#         print ('Retry: 全选商品')# time.sleep(0.2)# while 1:#     try:#         buy = driver.find_element("id", 'J_Go')#         if buy:#             buy.click()#             break#     except:#         print ('Retry: 点击结算')# time.sleep(0.2)# while 1:#     try:#         a = driver.find_element("link text", "提交订单")#         if a:#             a.click()#             break#     except:#         print ('Retry: 提交订单')    assert(0)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GAMES101】Anti-Aliasing</title>
      <link href="/posts/3P0T9MZ/"/>
      <url>/posts/3P0T9MZ/</url>
      
        <content type="html"><![CDATA[<p>信号处理、抗锯齿<span id="more"></span></p><div class="admonition note"><p class="admonition-title">导读</p><ul><li><a href="https://learnopengl.com/Advanced-OpenGL/Anti-Aliasing">LearnOpenGL: Anti Aliasing</a></li><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_06.pdf">GAMES101: Rasterization and Anti Aliasing</a></li><li><a href="https://www.zhihu.com/question/19714540/answer/1119070975">知乎：如何理解傅里叶变换公式？</a></li><li><a href="https://www.zhihu.com/question/264302905">知乎：如何理解图像经傅里叶变换后所得频谱图意义？</a></li></ul></div><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;信号处理&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;时域&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;频域&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;空域&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#傅里叶变换（Fourier-Transform）\&quot;>傅里叶变换</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;走样&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#什么是走样（Aliasing）\&quot;>What</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Jaggies&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;Moiré&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Wheel-effect&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#为什么产生走样\&quot;>Why</a>（从信号处理角度）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;How&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;<a href=\&quot;#Blurring\&quot;>Blurring</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#High-Pass-Filter\&quot;>Filter</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;<a href=\&quot;#Convolution\&quot;>Convolution</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;实际应用&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#MSAA\&quot;>MSAA</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#FXAA\&quot;>FXAA</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#TAA\&quot;>TAA</a>&quot;}]}]}],&quot;p&quot;:{}}"></svg></div><h2 id="信号处理">信号处理</h2><p>了解反走样与抗锯齿之前，需要学习一些基础的信号处理相关知识，其中最重要的就是 时域、频域 及两者的相互转化关系。</p><h3 id="1-时域-Time-domain">1. 时域 (Time-domain)</h3><blockquote><p>时域 是描述一个数学函数（或物理信号）对于时间的关系（函数）</p></blockquote><p>电脑上的音频文件（例如mp3、wmv…）就是一个时域信号的典型例子，其本质是音频（波形图）在时间上的分布，如下所示：</p><ul><li>横轴：时间 t</li><li>纵轴：声音的振幅<br><img src="/images/signal-mp3.png" alt=""></li></ul><p>声音信号是由 高音、中音、低音 三个部分组成，如果我们想加强低音部分，仅仅通过时域信号是没法修改的。因为高中低音在时域中是混合在一起的，没法通过逆变换将他们抽离开来。<br>因此引申出 频域 的概念 ↓</p><!-- **因此 [傅里叶变换](https://zh.wikipedia.org/wiki/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2) 的出现，就是为了将信号在时域和频域之间相互转化。** --><h3 id="2-频域-Frequence-domain">2. 频域 (Frequence-domain)</h3><blockquote><p>频域 是描述频率分布的关系</p></blockquote><p>频域的理解有点困难，需要结合时域一起看（如下图）。时域上的信号可以看做不同频率的信号的叠加，因此频域就是展示这些不同频率信号的分布。</p><ul><li>横轴：频率</li><li>纵轴：该频率的振幅（&gt;0）</li></ul><p><img src="/images/frequence-vs-time.png" alt=""></p><div class="admonition note"><p class="admonition-title">空域 (Spatial-domain)</p><ul><li>又称为空间域、图像空间（image space），可以理解为像素在屏幕空间（x，y）的分布。</li></ul></div><h3 id="时域与频域">时域与频域</h3><blockquote><p>时域与频域 表示的是同一个信息，只不过呈现的方式不同。</p></blockquote><p>下面以标准正弦函数 $sin(x)$ 为例，展现时域和频域的不同表示：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">函数</th><th style="text-align:center">示意图</th></tr></thead><tbody><tr><td style="text-align:center">时域</td><td style="text-align:center">$y = sin(t)$</td><td style="text-align:center"><img src="/images/time-domain-demo.gif" alt=""></td></tr><tr><td style="text-align:center">频域</td><td style="text-align:center">$f = \frac{1}{2π}$</td><td style="text-align:center"><img src="/images/frequence-domain-demo.png" alt=""></td></tr></tbody></table><h3 id="傅里叶变换（Fourier-Transform）">傅里叶变换（Fourier Transform）</h3><div class="admonition warning"><p class="admonition-title">关于傅里叶变换</p><ul><li>这部分浅尝辄止，理解基本概念和用法即可</li></ul></div><ul><li><p>任何函数都可以表示为 $sin$、 $cos$ 函数的组合</p></li><li><p>将时域转化到频域（傅里叶变换）</p></li><li><p>将频域转化到时域（逆变换）</p></li></ul><h2 id="什么是走样（Aliasing）">什么是走样（Aliasing）?</h2><p>如下概括了三种常见的走样的导致的 Artifacts：</p><table><thead><tr><th style="text-align:center">Artifacts</th><th style="text-align:center">原因</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Jaggies">Jaggies</a></td><td style="text-align:center">空域采样频率不足</td><td style="text-align:left"><img src="/images/raster-jaggies.png" alt=""></td></tr><tr><td style="text-align:center">Moiré Patterns</td><td style="text-align:center">空域采样频率不足</td><td style="text-align:left"><img src="/images/raster-moire.png" alt=""></td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Wagon-wheel_effect">Wagon wheel effect</a></td><td style="text-align:center">时域采样频率不足 <a href="https://michaelbach.de/ot/mot-wagonWheel/">demo</a></td><td style="text-align:left"><img src="/images/raster-wheel.gif" alt=""></td></tr></tbody></table><h2 id="为什么产生走样">为什么产生走样?</h2><h3 id="从信号处理角度理解">从信号处理角度理解</h3><blockquote><p><em>Signals are <font color="#1AAD19">changing too fast (high frequency)</font>, <font color="#FF1E10">but sampled too slowly</font>.</em>  —— GAMES101</p></blockquote><p>将图像信息看做空域信号，根据傅里叶变换得出，可以表示为任何正弦信号的叠加，因此光栅化的过程可以理解为：<strong>以某个频率对原始信号进行采样的过程。</strong><br>由于造物主的超然存在，自然界的所有采样频率可以当做无穷的（时间是连续的、世界是无穷多个像素点…），而妄图用有限的频率去描述、去采样现实世界，即用有穷描述无穷，必然会带来信号和信息的损失。<br>以下图为例，采样频率固定时，当原始信号的频率越低，采样产生的误差也就越小；当原始信号的频率越高，采样产生的误差越大。</p><p><img src="/images/antialisaing-why.png" alt=""></p><p>上面3种常见的 <strong>采样导致的Artifacts</strong>，都是因为采样的频率较低（低于原图像的变化频率）。</p><p>原始图像的信号不是随着时间而变换（时域变换），而是随着空间中x、y的值而变化（空域变换）。信号的变化频率高是指：像素之间的RGB颜色是否发生骤变（如白色255变成黑色0）。<br>从这个角度理解走样的原因：</p><div class="admonition note"><p class="admonition-title">为什么锯齿都在图形的边缘?</p><ul><li>因为内部的信号变化慢，低频采样没什么影响；而边缘的信号变换频率会骤增。</li></ul></div><h2 id="如何进行反走样（Anti-Aliasing）？">如何进行反走样（Anti-Aliasing）？</h2><p>Anti-Aliasing，又称为反走样、抗锯齿，提高采样频率是最直接的反走样方案，如增加分辨率。<br>下面介绍一些常见的AA理论。</p><h3 id="Blurring">Blurring</h3><p>模糊化是反走样的一个基本操作，即在光栅化之前对原始图像做一个模糊的操作。</p><p><img src="/images/aa-blurring.png" alt=""></p><h3 id="High-Pass-Filter">High-Pass Filter</h3><p>高通滤波，即高频的信号可以通过，过滤掉低频的信号</p><h3 id="Low-Pass-Filter">Low-Pass Filter</h3><p>低通滤波，即低频的信号可以通过，过滤掉高频的信号</p><h3 id="Convolution">Convolution</h3><p>前面的滤波技术，本质不是丢弃某些特定频率的信号，而是把它们变成一个新的信号。即$m*n$的信号通过滤波之后，得到的仍然是 $m*n$ 的信号。它的本质就是 <strong>将信号在时域上卷积</strong>，即求平均值。</p><ul><li><strong>滤波器</strong>：一个固定大小的信号，如 $1*3$，且每个信号都对应一个数值（系数），如下所示：<ul><li><img src="/images/aa-filters.png" alt=""></li><li>对于每个像素，根据滑动窗口计算 经滤波器后 的取值。</li><li>示例，对应为 $5$ 的像素，滤波后的结果是 $3*1/4 + 5*1/2 + 3*1/4 = 4$</li></ul></li></ul><p>下图是一个 1/9 的滤波器，它起到了图像模糊化的作用，其本质也是一个低通滤波器（模糊的本质，是去掉高频变换的边缘区域）</p><p><img src="/images/low-filter.png" alt=""></p><div class="admonition warning"><p class="admonition-title">理解困难</p><ul><li>如何理解：时域（空域）的乘积，本质是频域上的卷积</li></ul></div><h3 id="MSAA">MSAA</h3><p><a href="https://en.wikipedia.org/wiki/Multisample_anti-aliasing">MSAA（Multi-Sampling AA）</a> 的本质是在更高倍分辨率下进行采样。<br>下图是一个 <em>4 x MSAA</em> 采样的示例，即对于每个像素，采样其中四个子像素，根据是否在三角形内的比例，得出其颜色的贡献值。</p><p><img src="/images/4xMSAA.png" alt=""></p><p><strong>MSAA的额外开销</strong></p><ul><li>n-MSAA，意味着 N 倍的采样量</li><li>可以尽可能的复用之前的采样值</li></ul><h3 id="FXAA">FXAA</h3><p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E8%BF%91%E4%BC%BC%E6%8A%97%E9%8B%B8%E9%BD%92">FXAA（Fast-Approximat AA）</a> 是在屏幕空间的快速近似抗锯齿，它是在后处理阶段进行的。<br>在有锯齿的图像上，找到其边界，并替换为无边界的图像，与采样无关。</p><h3 id="TAA">TAA</h3><p><a href="">TAA（Tempol AA）</a> 将采样从单帧扩展到多帧，尽可能地复用之前帧的结果。需要额外处理动态物体的情况。</p><div class="admonition warning"><p class="admonition-title">写在最后</p><ul><li>MSAA，FXAA，TAA等抗锯齿方案需要更深入的学习和实践，这里只是浅尝辄止</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GAMES101】Rasterization</title>
      <link href="/posts/M5TXVE/"/>
      <url>/posts/M5TXVE/</url>
      
        <content type="html"><![CDATA[<p>光栅化与硬件基础<span id="more"></span></p><div class="admonition note"><p class="admonition-title">前集提要</p><ul><li><a href="/posts/30P8RVY/">GAMEASA101-Transformation</a>描述了基础的线性变化，以及MVP变换的过程</li><li>本文讨论的是在MVP变换后，如何将一个正交的 $(0, 1)^{3}$ 坐标映射到屏幕坐标上</li></ul></div><h2 id="显示设备">显示设备</h2><h3 id="CRT-阴极射线管">CRT 阴极射线管</h3><p><a href="https://zh.wikipedia.org/wiki/%E9%98%B4%E6%9E%81%E5%B0%84%E7%BA%BF%E7%AE%A1">阴极射线管</a>（英语：Cathode ray tube，缩写 CRT），是较早的显示仪器，曾广泛的应用于示波器、电视机和显示器上。<br>其原理是利用阴极电子枪发射电子，在阳极高压的作用下，射向荧光屏，使荧光屏上的荧光粉发光。<br>同时电子束能够在偏转磁场的作用下，作上下左右的移动来达到扫描显示的目的。（高中物理的磁场计算题…）<br>早期的CRT仅能显示光线的强弱，因此是黑白画面；直到1941年，CRT才支持红绿蓝三种颜色的电子束，这告别着彩色电视机技术的问世。</p><p>因为采用电子束的技术，CRT显示器具有亮度高、伤眼睛的特点。因此早期小朋友看彩电时，经常被家长督促离得远一些。<br>同时 CRT显示器 的分辨率做不高、屏幕做不到，导致2000年后逐渐被LCD、LED取代。<br><a href="https://www.zhihu.com/question/57752884">知乎：为什么 CRT 画质这么好也被淘汰，液晶反而发展的很好？</a><br><img src="/images/CRT.png" alt=""></p><h3 id="隔行扫描技术">隔行扫描技术</h3><p>通常的显示器在成像时，会从上到下地扫描每帧图像。这个过程消耗的时间很长、占用带宽也很高。<br>因此CRT显示器采用一种 “隔行扫描” 的技术，即每次只传输和显示一半的图像，一场只包含奇数行或者偶数行。由于人眼具有视觉暂留效应，所以仍然会看到完整的一帧画面。</p><div class="admonition note"><p class="admonition-title">视觉暂留效应</p><ul><li>光对视网膜所产生的视觉，在光消失后，<strong>仍然会保留一段时间（约1/16秒）</strong></li><li>例如日常使用的日光灯每秒大约熄灭100次，但不会感觉到灯光的闪动</li></ul></div><h3 id="LCD-LED">LCD &amp; LED</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">LCD</th><th style="text-align:left">LED</th></tr></thead><tbody><tr><td style="text-align:center">功耗</td><td style="text-align:left">❌ 功耗高10倍</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">寿命</td><td style="text-align:left"></td><td style="text-align:left">✔ 寿命更长</td></tr><tr><td style="text-align:center">视角</td><td style="text-align:left">❌ 视角较小</td><td style="text-align:left">✔ 视角宽达160°</td></tr></tbody></table><p><a href="https://zh.wikipedia.org/wiki/%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%99%A8">LCD液晶显示器</a> 和 <a href="https://zh.wikipedia.org/wiki/%E7%99%BC%E5%85%89%E4%BA%8C%E6%A5%B5%E7%AE%A1">LED发光二极管</a> 涉及较多的物理和光学专业知识，这里不详细展开，就对比两者的优劣和差异。</p><h3 id="E-Ink-电子墨水屏">E Ink 电子墨水屏</h3><p><a href="https://zh.wikipedia.org/zh-hans/%E9%9B%BB%E5%AD%90%E5%A2%A8%E6%B0%B4">电子墨水技术</a>是由 <em>E Ink Corporation</em> 公司提出，常被用于制作电子显示器，例如大名鼎鼎的 <em>Amazon Kindle</em><br>它的表面由大量包含正负电子的微胶囊组成，当设置电场为正时，白粒子向微胶囊的顶部移动，所以呈现白色；反之电场为负时，呈现黑色。</p><p>电子墨水的一大缺点时，即重置屏幕时具有延迟，因为要通过改变电场使粒子发生移动，例如Kindle阅读翻页时有明显等待。</p><p><img src="/images/kindle-tech.png" alt=""></p><h2 id="光栅化">光栅化</h2><h3 id="Pixels">Pixels</h3><p>首先如何从计算机的角度定义一个屏幕?</p><ul><li>颜色：（<font color="#FF1E10"><strong>R</strong></font>，<font color="#1AAD19"><strong>G</strong></font>，<font color="#1A9BFF"><strong>B</strong></font>）</li><li>坐标：由分辨率决定的二维数组<ul><li>左下角：$(0,0)$，右上角: $(width-1, height-1)$</li><li>像素实际坐标：$(x+0.5, y+0.5)$</li></ul></li></ul><p><img src="/images/pixels.png" alt=""></p><p>要解决的实际问题：<br>将$[-1, 1]^{2}$ 映射到 $[0, width] \times [0, height]$</p><p>先经线性变化（先从屏幕左下角平移到屏幕中间，再经过缩放操作）：</p><p><img src="/images/viewport_matrix.png" alt=""></p><h3 id="Triangles">Triangles</h3><ul><li>为什么用 <strong>三角形</strong> 表示几何物体?<ul><li>顶点数<strong>最少</strong>的平面几何（再少一个点就是线段了）</li><li>任何多边形都可以<strong>由三角形组成</strong>（三生万物）</li><li>利于做差值、判断内外等运算</li></ul></li></ul><p>一些常见的三维模型格式，例如obj、fbx，其内部都是用三角形（或者Poly 即两个三角形）表示模型的。<br>可以看这篇文章：<a href="/posts/2WF6HFQ/">Model and Mesh</a></p><h3 id="问题建模">问题建模</h3><p>光栅化实际要解决的问题如下:<br>对于每个三角形，逐个像素判断是否在三角形内，是则着色，不是则跳过。</p><div class="admonition note"><p class="admonition-title">判断三角形内</p><ul><li>通过三次叉乘实现</li><li>参考这篇文章：<a href="/posts/30P8RVY/">【GAMES101】Transformation</a></li></ul></div><p><img src="/images/raster-demo.png" alt=""></p><pre><code class="language-python">for tri in tris: # 所有三角形    for (x, y) in pixels: # 所有像素        output[tri, x, y] = inside(tri, x, y)</code></pre><p><strong>观察如上算法，是一个 $O(N^{3})$ 的遍历算法，是否有优化的方法呢？</strong></p><h3 id="加速：AABB">加速：AABB</h3><p>利用三角形的包围盒来加速。<br>实际绘制中，不可能每个三角形都填充满整个屏幕，因此可以通过AABB剔除掉在包围盒外的像素点。</p><h3 id="加速：Incremental-Triangle-Traversal">加速：<a href="http://15462.courses.cs.cmu.edu/fall2019/lecture/drawingatriangle/slide_068">Incremental Triangle Traversal</a></h3><p>可以理解为更精细的AABB。<br>从三角形每排的最左侧到最右侧执行光栅化，基本不会多遍历一个像素点。</p>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSAPP】Information Storage</title>
      <link href="/posts/24H1CZ3/"/>
      <url>/posts/24H1CZ3/</url>
      
        <content type="html"><![CDATA[<p>原码、反码、补码、Integer、Float…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">材料</p><ul><li><a href="https://www.cs.sfu.ca/~ashriram/Courses/CS295/assets/books/CSAPP_2016.pdf">CSAPP chapter 2</a></li><li><a href="https://fengmuzi2003.gitbook.io/csapp3e/di-er-zhang-zhong-dian-jie-du">CSAPP 重点解读</a></li><li><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86">IC S解读</a></li><li><a href="https://0.30000000000000004.com/">0.30000000000000004.com</a></li><li><a href="http://graphics.stanford.edu/~seander/bithacks.html">Bit Hacks</a>（位运算的奇技淫巧）</li></ul></div><div class="markmap-container" style="height:250px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;字节序&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#大端（Big-Endian）\&quot;>大端</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#小端（Little-Endian）\&quot;>小端</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;编码&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#原码\&quot;>原码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#反码\&quot;>反码</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#补码\&quot;>补码</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;浮点数&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#小数的二进制\&quot;>小数的二进制</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#IEEE-754\&quot;>IEEE-754</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="导读">导读</h2><p>CSAPP花费较多篇幅介绍计算机的二进制系统，以及“1字节=8比特”的设计。既然人类已经习惯使用十进制计数法，为什么计算机要改用二进制呢？</p><ul><li>二进制 对应电路中的高低电平，容易区分</li><li>二进制 利于物理存储，磁极、凹凸、光照等</li></ul><blockquote><p>推荐阅读如下前置知识：</p><ul><li><a href="/posts/3RBTN4W/">计算机架构入门：CPU、存储器</a></li><li><a href="/posts/1X3A6C1/">Virtual Memory</a></li></ul></blockquote><h2 id="大端小端">大端小端</h2><p>先看什么是大端、什么是小端，这些统称为字节序（Endianess）</p><p>假设 <code>int a = 0x01234567</code>，地址为 <code>0x100</code>，因为int类型占4个字节，所以写入 <code>0x100 0x101 0x102 0x103</code> 这四个字节的内存地址：</p><h3 id="大端（Big-Endian）">大端（Big-Endian）</h3><p>将 数据的低字节 放在 内存的高位，符合人类的阅读习惯，又称为 <em>network byte order</em><br><img src="/images/big-endian.png" alt=""></p><h3 id="小端（Little-Endian）">小端（Little-Endian）</h3><p>将 数据的低字节 放在 内存的低位，与人类的阅读习惯相反，又称为 <em>host byte order</em><br><img src="/images/little-endian.png" alt=""></p><p><strong>大小端利弊</strong></p><p>为什么没有厂商一统江湖，选择 “利于阅读” 的大端呢？<br>原因是两种存储方式各有利弊，谁也无法说服谁…<br><a href="https://www.zhihu.com/question/25311159">知乎: 大小端字节序存在的意义，为什么不用一个标准</a></p><ul><li><ol><li>因为 “符号位” 存储在第一个字节（后文讲到），此时大端能快速判读大小、正负</li></ol></li><li><ol start="2"><li>执行加法运算时，高位往往需要添加额外的数据，此时小端效率更高，大端要额外移动</li></ol></li></ul><p><strong>常见字节序</strong></p><p>大端：IBM，JPEG …<br>小端：Intel，BMP …</p><h3 id="观察字节序">观察字节序</h3><pre><code class="language-c++">// Demo_2:观察字节序的一个简单例子typedef unsigned char *pointer;void show_bytes(pointer start, size_t len){    size_t i;    for (i = 0; i &lt; len; i++)    printf("%p\t0x%.2x\n",start+i, start[i]);    printf("\n");}int main(){    int a = 0x01234567;    show_bytes((pointer) &amp;a, sizeof(int));}// 输出结果(Linux x86-64)Demo$ gcc -o chp2 chp2.c ; ./chp20x7ffc837a0b3c0x670x7ffc837a0b3d0x450x7ffc837a0b3e0x230x7ffc837a0b3f0x01</code></pre><h3 id="记录一个未区分大小端导致的Bug">记录一个未区分大小端导致的Bug</h3><p>如下定义了一个 <code>struct</code> 类型，大小是 32位，占 4字节。<br>假设 <code>idx</code> 存储的数据是 <code>0x1234</code><br>当在shader中解析 <code>idx</code> 的取值时，因为存储在贴图的通道中，所以只能逐字节decode。<br>由于默认 <code>0x12</code> 在 低位，所以解码为 <code>L + H &lt;&lt; 8</code>，但是对于小端存储的机器（如Intel CPU），这个取值就是错的，因为实际算出来是 <code>0x34 + 0x12 &lt;&lt; 8</code></p><pre><code class="language-C++">struct DataDesc{    uint16_t idx;    uint8_t  count1;    uint8_t  count2;}</code></pre><ul><li>修复方法</li></ul><p>利用 <code>htons</code> 将小端统一转化为大端存储，<a href="https://linux.die.net/man/3/htons">htons(3) - Linux man page</a><br>注意头文件，Linux下是 <code>#include &lt;arpa/inet.h&gt;</code>，windows下是 <code>#include &lt;winsock.h&gt;</code></p><h2 id="原码">原码</h2><blockquote><p>最高位表示符号位，其他位存放数值</p></blockquote><p>数据的存储只能是 0 和 1 两种状态，如果想区分一个数值的正负，先人提出用 “最高位” 的 0 和 1 来表示：</p><ul><li>1：负数</li><li>0：正数</li></ul><div class="admonition warning"><p class="admonition-title">思考一下为什么用1表示负数，而不是0呢？</p></div><p>假设用 3 bits 表示一个整数，则 1个符号位 加上 2个数值位，可以表示的范围是 <code>-3 ~ +3</code>，如下表：</p><table><thead><tr><th style="text-align:center">二进制</th><th style="text-align:center">符号位</th><th style="text-align:center">真值</th></tr></thead><tbody><tr><td style="text-align:center">000</td><td style="text-align:center">+</td><td style="text-align:center"><font color="#FF1E10"><strong>+0</strong></font></td></tr><tr><td style="text-align:center">001</td><td style="text-align:center">+</td><td style="text-align:center">+1</td></tr><tr><td style="text-align:center">010</td><td style="text-align:center">+</td><td style="text-align:center">+2</td></tr><tr><td style="text-align:center">011</td><td style="text-align:center">+</td><td style="text-align:center">+3</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">-</td><td style="text-align:center"><font color="#FF1E10"><strong>-0</strong></font></td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">-</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">110</td><td style="text-align:center">-</td><td style="text-align:center">-2</td></tr><tr><td style="text-align:center">111</td><td style="text-align:center">-</td><td style="text-align:center">-3</td></tr></tbody></table><h3 id="原码的缺陷">原码的缺陷</h3><ol><li><p>原码中存在两个0，即正零和负零，意味着判断是否要0要两个时钟运算…</p></li><li><p>原码作运算时，如果符号位不同，会导致计算结果错误（需要硬件额外处理）：<br><code>001 + 101 = 110</code>，表示 <code>1 + (-1) = -2</code></p></li></ol><h2 id="反码">反码</h2><blockquote><p>正数的反码是原码，负数的反码是符号位除外、其他按位取反</p></blockquote><p>反码的出现是为了解决原码的弊端，即 “相反数之和不为0”。这里干脆从结果反推，为了使和为0，不如用一个整数的“按位取反” 来表示负数。</p><p>例如，<code>001</code>表示+1，则-1的反码是<code>110</code>，此时相加为 <code>001 + 110 = 111 = 0</code></p><table><thead><tr><th style="text-align:center">原码</th><th style="text-align:center">反码</th><th style="text-align:center">真值</th></tr></thead><tbody><tr><td style="text-align:center">000</td><td style="text-align:center">000</td><td style="text-align:center">+0</td></tr><tr><td style="text-align:center">001</td><td style="text-align:center">001</td><td style="text-align:center">+1</td></tr><tr><td style="text-align:center">010</td><td style="text-align:center">010</td><td style="text-align:center">+2</td></tr><tr><td style="text-align:center">011</td><td style="text-align:center">011</td><td style="text-align:center">+3</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">111</td><td style="text-align:center">-0</td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">110</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">110</td><td style="text-align:center">101</td><td style="text-align:center">-2</td></tr><tr><td style="text-align:center">111</td><td style="text-align:center">100</td><td style="text-align:center">-3</td></tr></tbody></table><h3 id="反码的缺陷">反码的缺陷</h3><ol><li><p>仍然有两个0</p></li><li><p>表示有点反人类，不够直观</p></li></ol><h2 id="补码">补码</h2><blockquote><p>正数和0的补码是原码，负数的补码是反码 +1</p></blockquote><ul><li>如何根据补码求真值?<br>牢记口诀，正数照求，负数将数值部分按位取反 +1</li></ul><p>如下表，<code>3 bit</code> 补码的真值范围是 <code>-4 ~ 3</code>，比原码、反码多出一个值，是因为去掉了重复的正负零。</p><table><thead><tr><th style="text-align:center">补码（正数略）</th><th style="text-align:center">真值</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">-4</td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">-3</td></tr><tr><td style="text-align:center">110</td><td style="text-align:center">-2</td></tr><tr><td style="text-align:center">111</td><td style="text-align:center">-1</td></tr></tbody></table><p>因为补码是现代计算机硬件应用最广泛的编码方式，顺便提一下补码的运算规则：</p><ol><li><p>加法<br>不论正负数，直接对补码相加即可：<br><code>3 + (-2) = 011 + 110 = 001 = 1</code></p></li><li><p>减法<br>补码的减法，实际就是加一个负数，道理和加法是相同的：<br><code>3 - 2 = 3 + (-2) ...</code></p></li></ol><h2 id="浮点数">浮点数</h2><p>C++中计算浮点数加法时，经常会出现 <code>0.1 + 0.2 = 0.30000000000000004</code> 的类似现象，导致浮点数判相等很困难，这也是源于 <code>IEEE 754</code> 的存储方式。<br>首先，不论是0.1 还是0.2，在十进制这是一个有限的小数，但是在计算机二进制的表示中，他们是无限不循环的，这就造成了运算的精度误差。</p><h3 id="小数的二进制">小数的二进制</h3><div class="admonition note"><p class="admonition-title">如何理解小数二进制</p><ul><li>核心是科学计数法，十进制的 $0.525 = 5 * 10^{-1} + 2 * 10^{-2} + 5 * 10^{-3}$</li><li>对应二进制为：$0.525 = 1 * 2^{-1} + 1 * 2^{-2}$</li><li>口诀是：<strong>乘2取整，顺序排列</strong></li></ul></div><p><strong>有限不循环的十进制，在二进制下 可能无限不循环</strong>，而数据存储的bits是有限的，这就是浮点数误差的根本原因。</p><p>以小数 0.2 转成二进制为例，按照上面的算法得出如下的计算过程：</p><table><thead><tr><th style="text-align:center">依次乘2</th><th style="text-align:center">取整数</th><th style="text-align:center">二进制</th></tr></thead><tbody><tr><td style="text-align:center">0.2 * 2 = 0.4</td><td style="text-align:center">0</td><td style="text-align:center">0.0</td></tr><tr><td style="text-align:center">0.4 * 2 = 0.8</td><td style="text-align:center">0</td><td style="text-align:center">0.00</td></tr><tr><td style="text-align:center">0.8 * 2 = 1.6</td><td style="text-align:center">1</td><td style="text-align:center">0.001</td></tr><tr><td style="text-align:center">0.6 * 2 = 1.2</td><td style="text-align:center">1</td><td style="text-align:center">0.0011</td></tr><tr><td style="text-align:center">0.2 * 2 = 0.4</td><td style="text-align:center">0</td><td style="text-align:center">0.00110</td></tr><tr><td style="text-align:center">…循环</td><td style="text-align:center"></td><td style="text-align:center">0.00110011…</td></tr></tbody></table><h3 id="IEEE-754">IEEE 754</h3><p>通用的浮点数标准是 <code>IEEE 754</code>，在1985年提出并沿用至今。</p><p>下面以浮点数 <code>178.125</code> 为例，描述二进制的计算过程：</p><ul><li>整数部分：178，二进制为 <code>10110010</code></li><li>小数部分：0.125，二进制为 <code>001</code></li><li>合起来二进制为 <code>10110010.001</code></li><li>转换成二进制的科学计数法，为 <code>1.0110010001 * 2 ^ 7</code>，7用二进制表示为<code>111</code></li></ul><p>接着对照下面的公式，代入三个部分的取值：</p><ul><li>符号位 S = 0</li><li>尾数 M = 0110010001</li><li>指数 E = 111，结合偏移值得到 10000110</li><li>因此 <code>178.125</code> 的单精度浮点数是 <code>0x43322000</code></li></ul><p><img src="/images/float-demo.png" alt=""></p><h3 id="32位浮点数-转换公式">32位浮点数 转换公式</h3><blockquote><p>$V = (-1)^{S} \times M \times R^{E}$<br>S：符号位，0为正、1为负<br>M：尾数（float），对于 $2.18 \times 10^{-2}$ 中的 2.18<br>E：指数（int），对于 $2.18 \times 10^{-2}$ 中的 -2<br>R：基数，十进制为10，二进制位2</p></blockquote><p><img src="/images/32bit-float.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graphics </tag>
            
            <tag> C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】UnitTest单元测试</title>
      <link href="/posts/A20MTJ/"/>
      <url>/posts/A20MTJ/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li>工作中经常遇到一些阻碍开发流程的提交，希望通过 <code>UnitTest</code> 避免类似的commit</li><li>todo: Python unittest，关于自动化测试的方法，测试理论等</li><li>plan: 预期这周内完成，伴随一些工作的脚本开发</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDCA 闭环思维</title>
      <link href="/posts/120QJ0A/"/>
      <url>/posts/120QJ0A/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">提要</p><ul><li>阅读材料来源：<a href="https://www.zhihu.com/question/421674339/answer/2863380386">知乎：有什么行为习惯昭示着你是个编程**？</a></li><li>本文都从工作的角度讨论，不涉及个人生活作息</li></ul></div><h2 id="为什么讲闭环">为什么讲闭环</h2><p>闭环思维，决定你是否能把一件事做到完美，决定你是否能成为一个靠谱的人。</p><p>通俗理解闭环思维，就是无论做什么事情，都要有始有终，能够形成一个完整的闭环。</p><h2 id="五个核心">五个核心</h2><p>通俗地理解，闭环思维有五个核心，须牢记于心：</p><ul><li><p>凡事有计划</p></li><li><p>约定必落实</p></li><li><p>问题早只会</p></li><li><p>及时报进程</p></li><li><p>事后须反馈</p></li></ul><h2 id="PDCA循环-⭐">PDCA循环 ⭐</h2><p>闭环思维的理论依据是“PDCA循环”，由美国管理专家 休哈特博士 提出，将每件事分为四个阶段：</p><ul><li>Plan：计划</li><li>Do：落地</li><li>Check：检讨/检查</li><li><s>Action</s> Improve：改善/改进</li></ul><p>如下图所示，一个需求可能需要多个回合的改善才能完成，即代表多个“PDCA循环”：<br><img src="/images/pdca.png" alt=""></p><p>这个模型完全可以应用于程序的日常开发，过去自己往往只关注 <code>Do</code> 的部分，而忽略了其他三个环节。<br>后面的改进：</p><ul><li>需求提出初期，明确 <code>Plan</code> 环节</li><li>推动落地期间，逐步记录 <code>Do</code> 的过程</li><li>需求开发完毕，主动 <code>Check</code> 完成度、潜在的bug、回归范围</li><li>提出待改善项，即 <code>Improve</code></li></ul><p>针对目前的工作流程，如下是一个 <code>PDCA</code> 的示例：</p><table><thead><tr><th style="text-align:center"><code>PDCA</code></th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center"><code>Plan</code></td><td style="text-align:left">∘ 3月5日完成功能A<br> ∘ 3月7日完成功能B</td></tr><tr><td style="text-align:center"><code>Do</code></td><td style="text-align:left">∘ 3月5日：完成A，同时优化了xxx<br> ∘ 3月8日：完成B，同时修复了xxx</td></tr><tr><td style="text-align:center"><code>Check</code></td><td style="text-align:left">∘ A的性能存在问题<br> ∘ B的code review有两处comments</td></tr><tr><td style="text-align:center"><code>Improve</code></td><td style="text-align:left">∘ 计划4月通过xxx优化方案解决A的性能问题<br> ∘ code review问题已修复<br> ∘ B完成延期一天，原因是xxx</td></tr></tbody></table><h3 id="5W2H分析法">5W2H分析法</h3><ul><li>What：先阐述清楚要做的事情是什么，确保合作职能可以理解</li><li>Why：为什么要做这件事？</li><li>Who：参与协作的职能</li><li>When：交付时间</li><li><s>Where</s></li><li>How：准备怎么做</li><li>How much：做到什么程度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【GAMES101】Transformation</title>
      <link href="/posts/30P8RVY/"/>
      <url>/posts/30P8RVY/</url>
      
        <content type="html"><![CDATA[<p>向量与线代、空间变换、投影<span id="more"></span></p><div class="markmap-container" style="height:350px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;空间向量&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#点乘\&quot;>点乘</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#叉乘\&quot;>叉乘</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;线性变换&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#缩放\&quot;>缩放</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#旋转\&quot;>旋转</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#平移\&quot;>平移</a>&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#齐次坐标系-Homogeneous-coord\&quot;>齐次坐标</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;What：<code>(x, y, z, w)</code>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Why：解决平移&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;几何意义&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;w=0：向量&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;w≠0：点&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#欧拉角\&quot;>欧拉角</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;MVP变换&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;<a href=\&quot;#小数的二进制\&quot;>Model</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#IEEE-754\&quot;>View</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#IEEE-754\&quot;>Projection</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;正交投影&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;透视投影&quot;}]}]}],&quot;p&quot;:{}}"></svg></div><h2 id="点乘">点乘</h2><ul><li><p>$\vec {a} \cdot \vec {b} = |\vec {a}| |\vec {b}| cos \theta$</p></li><li><p>几何意义：$\vec {a}$ 在 $\vec {b}$ 方向上的投影与 $\vec {b}$ 的乘积</p></li><li><p><img src="/images/dot.png" alt=""></p></li><li><p><strong>图形学应用</strong></p><ul><li>衡量两个向量是否接近：值越大越相近</li><li>判定两个向量是否同向：正值同向、0为垂直、负值反向</li></ul></li></ul><h2 id="叉乘">叉乘</h2><ul><li><p>几何意义：$\vec {a}$ 和 $\vec {b}$ 围成平行四边形的面积</p></li><li><p>$\vec {a} \times \vec {b}$ 垂直于两个向量所在的平面</p></li><li><p>方向：右手螺旋定理</p><ul><li>四个手指顺着 $\vec {a}$ 指向 $\vec {b}$ 的方向，则大拇指表示 $\vec {a} \times \vec {b}$ 的方向</li></ul></li><li><p><img src="/images/product.png" alt=""></p></li><li><p><strong>图形学应用</strong></p><ul><li>判定左右：$\vec {a} \times \vec {b}$ 叉乘为正，说明 $\vec {a}$ 在 $\vec {b}$ 的右侧</li><li>判定内外：<ul><li>需要三次左右判定，如可以通过 $\vec {AP} \times \vec {AB}$ 得到 $P$ 在 $\vec {AB}$ 的左侧</li><li><img src="/images/product-tri.png" alt=""></li></ul></li></ul></li></ul><h2 id="正交左手（右手）系">正交左手（右手）系</h2><p>可以通过 “叉乘” 定义一个正交坐标系</p><ul><li><p>$|\vec {x}| = |\vec {y}| = |\vec {z}| = 1$</p></li><li><p>$\vec {x} \cdot \vec {y} = \vec {x} \cdot \vec {z} = \vec {y} \cdot \vec {z} = 0$</p></li><li><p>$\vec {y} = \vec {z} \times \vec {x}$ （左手系 or 右手系）</p></li></ul><p><img src="/images/left-hand-axis.png" alt=""></p><h2 id="矩阵">矩阵</h2><ul><li>$(M \times N)$: 表示 $M$ 行 $N$ 列的矩阵</li></ul><p>$(M \times N) (N \times P) = (M \times P)$</p><p><img src="/images/matrix-multiply.png" alt=""></p><h2 id="线性变换">线性变换</h2><h3 id="缩放">缩放</h3><p>以 $x$,$y$ 分别缩放 $a$,$b$ 为例：</p><ul><li>$x’ = ax$</li><li>$y’ = by$</li></ul><p>$<br>\left[\begin{matrix}<br>x’\\y’<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>a &amp; 0\\0 &amp; b<br>\end{matrix}\right]<br>\left[\begin{matrix}<br>x\\y<br>\end{matrix}\right]<br>$</p><h3 id="反射">反射</h3><p>以绕y轴反射为例：</p><ul><li>$x’ = -x$</li><li>$y’ = y$</li></ul><p>$<br>\left[\begin{matrix}<br>x’\\y’<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>-1 &amp; 0\\0 &amp; 1<br>\end{matrix}\right]<br>\left[\begin{matrix}<br>x\\y<br>\end{matrix}\right]<br>$</p><h3 id="旋转">旋转</h3><p>以绕坐标原点旋转 $\theta$ 角为例：</p><p>$<br>\left[\begin{matrix}<br>x’\\y’<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>cos\theta &amp; -sin\theta\\sin\theta &amp; cos\theta<br>\end{matrix}\right]<br>\left[\begin{matrix}<br>x\\y<br>\end{matrix}\right]<br>$</p><h3 id="平移">平移</h3><p>尝试了一波，发现没法用一个 $2\times2$ 的矩阵表示二维的平移变换？<br>（后续为了解决此问题，引入了第三维度 $w$）</p><h2 id="齐次坐标系-Homogeneous-coord">齐次坐标系 (<em>Homogeneous coord.</em>)</h2><div class="admonition warning"><p class="admonition-title">为什么引入 齐次坐标系?</p><ul><li>考虑用 $M_{2 \times 2}$ 叠加平移变换</li><li>$x' = x + p$</li><li>$y' = y + q$</li><li>二维变换下，$x' = M_{2 \times 2} \quad x$ 无法作常量的平移变换</li><li>只能写成 ： $\left[\begin{matrix}x'\\y'\end{matrix}\right] =\left[\begin{matrix}a &amp; b\\c &amp; d\end{matrix}\right]\left[\begin{matrix}x\\y\end{matrix}\right] +\left[\begin{matrix}p\\q\end{matrix}\right]$</li></ul></div><h3 id="平移变换">平移变换</h3><ul><li>$<br>\left[\begin{matrix}<br>x’\\<br>y’\\<br>w’<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>1 &amp; 0 &amp; p\\<br>0 &amp; 1 &amp; q\\<br>0 &amp; 0 &amp; 1<br>\end{matrix}\right]<br>\left[\begin{matrix}<br>x\\<br>y\\<br>1<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>x+p\\<br>y+q\\<br>1<br>\end{matrix}\right]<br>$</li></ul><h3 id="w-维度">$w$ 维度</h3><ul><li><p>区分 点 和 向量</p><ul><li>点：$(x, y, 1)^{T}$</li><li>向量：$(x, y, 0)^{T}$</li></ul></li><li><p>区分 二维运算</p><ul><li>向量 +/- 向量：$w$ 维度为0，得到向量</li><li>点 - 点：$w$ 维度为0，得到向量</li><li>点 + 向量：$w$ 维度为1，得到点</li><li>点 + 点：$w$ 维度为0，得到点</li></ul></li></ul><h3 id="x-y-w-T-几何意义">$(x, y, w)^{T}$几何意义</h3><ul><li>$w = 0$：表示向量</li><li>$w ≠ 0$：表示点 $(\frac{x}{w}, \frac{y}{w}, 1)$</li></ul><h3 id="总结">总结</h3><p>此时可以表示 Scale、Rotation、Translation 三种线性变换：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Matrix</th></tr></thead><tbody><tr><td style="text-align:center">Scale</td><td style="text-align:center">$\left[\begin{matrix}s_{x} &amp; 0 &amp; 0\\0 &amp; s_{y} &amp; 0\\0 &amp; 0 &amp; 1\end{matrix}\right]$</td></tr><tr><td style="text-align:center">Rotation</td><td style="text-align:center">$\left[\begin{matrix}cos\theta &amp; -sin\theta &amp; 0\\sin\theta &amp; cos\theta &amp; 0\\0 &amp; 0 &amp; 1\end{matrix}\right]$</td></tr><tr><td style="text-align:center">Translation</td><td style="text-align:center">$\left[\begin{matrix}1 &amp; 0 &amp; t_{x}\\0 &amp; 1 &amp; t_{y}\\0 &amp; 0 &amp; 1\end{matrix}\right]$</td></tr></tbody></table><p>另外，可以用 $M^{-1}$ 表示逆变换（反向操作，逆函数）</p><h3 id="欧拉角">欧拉角</h3><ul><li><a href="https://www.zhihu.com/question/47736315/answer/236284413">知乎: 如何通俗地解释欧拉角？</a></li><li><a href="https://en.wikipedia.org/wiki/Euler_angles">Wikipedia: Eular angles</a></li></ul><p>欧拉角使用三个角度来描述刚体在 $xyz$ 坐标系中的旋转，这三个角度分别表示绕 “三个轴” 旋转的角度，不同顺序会产生不同的结果</p><p>也可以用 roll, pitch, yaw 来表示欧拉角，如图所示<br><img src="/images/roll-pitch-yaw.png" alt=""></p><ul><li>旋转所绕的轴有两种划分<ul><li>世界坐标系（静止）：$xyz$</li><li>局部坐标系（动态）：$XYZ$</li></ul></li></ul><div class="admonition warning"><p class="admonition-title">TODO</p><ul><li>万向节死锁这部分没完全弄懂</li><li><a href="https://en.wikipedia.org/wiki/Gimbal_lock">万向节死锁</a></li></ul></div><h2 id="MVP变换">MVP变换</h2><ul><li>首先前面提到过 $(x, y, z, w)^{T}$ 表示三维的信息<ul><li>$w = 0$: 表示向量 $(x, y, z)$</li><li>$w ≠ 0$：表示点 $(\frac{x}{w}, \frac{y}{w}, \frac{z}{w})$</li></ul></li></ul><p>三维空间的点，最终展现到二维屏幕上，需要经过一些列的空间变换，可以概括为 <font color="#ef6d3b"><strong>“MVP”</strong></font></p><p>MVP 变换可以想象为一个拍照的过程：</p><h3 id="Model-变换">Model 变换</h3><blockquote><p>“将人群和景色放到一个合适的位置”</p></blockquote><p>将所有模型移动到统一的世界坐标下（world space）</p><p>局部坐标 -&gt; 世界坐标</p><h3 id="View-变换">View 变换</h3><blockquote><p>“找一个合适的相机角度”</p></blockquote><ul><li>如何描述相机的信息?<ul><li>坐标：$\vec e = (x_{e}, y_{e}, z_{e})$</li><li>相机朝向 Look-at：$g$</li><li>相机上方向 Up：$t$</li></ul></li></ul><p>通过一个 View矩阵 $M_{view}$ 将所有模型转换到 view空间，只需要 平移变换 + 旋转变换：<br>即 $M_{view} = R_{view} T_{view}$</p><p><strong>先平移 $T_{view}$</strong></p><p>平移变换是为了将相机移到中心原点，因此矩阵很好得到：</p><p>$<br>\left[\begin{matrix}<br>x’\\y’\\z’\\w’<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; -x_{e}\\0 &amp; 1 &amp; 0 &amp; -y_{e}\\0 &amp; 0 &amp; 1 &amp; -z_{e}\\0 &amp; 0 &amp; 0 &amp; 1 \\<br>\end{matrix}\right]<br>\left[\begin{matrix}<br>x\\y\\z\\w<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>x - x_{e}w\\y - y_{e}w\\z - z_{e}w\\w<br>\end{matrix}\right]<br>=<br>\left[\begin{matrix}<br>x - x_{e}\\y - y_{e}\\z - z_{e}\\1<br>\end{matrix}\right]<br>$</p><p><strong>后旋转 $R_{view}$</strong></p><p>拆解开来，需要作如下三个轴的旋转：</p><ul><li>$g$ 旋转到 $- \vec Z$</li><li>$t$ 旋转到 $\vec Y$</li><li>$g \times t$ 旋转到 $\vec X$</li></ul><p>将 “局部轴旋转到$XYZ$轴” 很困难，因此可以求逆变换：“将$XYZ$轴旋转到局部轴”</p><ul><li>将 $\vec X (1, 0, 0)$ 变换到 $(x_{g \times t}, y_{g \times t}, z_{g \times t})$</li><li>将 $\vec Y (0, 1, 0)$ 变换到 $(x_{t}, y_{t}, z_{t})$</li><li>将 $\vec Z (0, 0, 1)$ 变换到 $(x_{-g}, y_{-g}, z_{-g})$</li></ul><p>将这三个特殊值代入，可以解出 $R_{view}^{-1}$ 矩阵为：</p><p>$<br>R_{view}^{-1}=<br>\left[\begin{matrix}<br>x_{g \times t} &amp; x_{t} &amp; x_{-g} &amp; 0\\<br>y_{g \times t} &amp; y_{t} &amp; y_{-g} &amp; 0\\<br>z_{g \times t} &amp; z_{t} &amp; z_{-g} &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1 \\<br>\end{matrix}\right]<br>$</p><p>根据转置矩阵得到 $R_{view}$：</p><p>$<br>R_{view}=<br>\left[\begin{matrix}<br>x_{g \times t} &amp; y_{g \times t} &amp; z_{g \times t} &amp; 0\\<br>x_{t} &amp; y_{t} &amp; z_{t} &amp; 0\\<br>x_{-g} &amp; y_{-g} &amp; z_{-g} &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1 \\<br>\end{matrix}\right]<br>$</p><div class="admonition note"><p class="admonition-title">逆向思维</p><ul><li>“求逆” 是线性代数解决问题的常见思路</li></ul></div><h3 id="Projection-变换">Projection 变换</h3><blockquote><p>“按下快门！拍照”</p></blockquote><p>投影变换是最重要的部分，因为它塑造了 “立体感”，它分为两种：</p><ul><li>Perspective Projection: 近大远小，符合人眼</li><li>Orthographic Projection：远近一致</li><li><img src="/images/transformation.png" alt=""></li></ul><p><strong>正交投影</strong></p><div class="admonition warning"><p class="admonition-title">疑问?</p><ul><li>正交投影 为什么把任何立方体投影到一个(-1, 1)的正方体?</li></ul></div><p><strong>透视投影</strong></p><div class="admonition todo"><p class="admonition-title">TODO</p><ul><li>这部分有点复杂，教程中利用 “相似三角形” 和 “特殊值法” 求出了矩阵，有空补一下</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C99】setjmp.h</title>
      <link href="/posts/3CKYSDZ/"/>
      <url>/posts/3CKYSDZ/</url>
      
        <content type="html"><![CDATA[<p>学习<code>setjmp</code>C标准库, 实现轻量级协程<span id="more"></span></p><div class="admonition note"><p class="admonition-title">写在最前面</p><p><em><strong><code>setjmp</code></strong></em> 是C99的一个标准库, 其实现了 <em><strong><code>non-local jumps</code></strong></em>, 本次学习路线是:</p><ul><li>阅读手册、文档 ✔: <a href="https://man7.org/linux/man-pages/man3/longjmp.3.html">man(3)</a>, <a href="https://en.wikipedia.org/wiki/Setjmp.h">wikipedia</a></li><li>阅读代码示例 ✔: <a href="https://en.wikipedia.org/wiki/Setjmp.h#Example_usage">wikipedia: Example usage</a></li><li>coding: <a href="http://jyywiki.cn/OS/2022/labs/M2">M2: 协程库 (libco)</a></li><li>可选: 阅读 <code>setjmp.h</code> 的源码</li></ul></div><h2 id="man-setjmp">man setjmp</h2><h3 id="what">what</h3><p>准确说是 <code>man 3 setjmp</code>, <code>3</code> 的含义是 <em><code>Linux Programmer's Manual</code></em>.<br>先看其基本的定义:</p><blockquote><p><em>setjmp, sigsetjmp, longjmp, siglongjmp  - performing a nonlocal goto</em></p></blockquote><p>也就是说, <code>setjmp</code>的作用是执行一个 nonlocal goto;<br>为什么说 nonlocal?<br>举个例子, 看下面的 C 代码, main函数 中尝试借助goto跳转到 func函数内部, 编译会报错<br><font color="#ef6d3b">因为 goto 只能实现函数堆栈内部的跳转，即 local jump!</font></p><pre><code class="language-c">void func() {outer:    printf("into func...");}int main() {inner:    // ...     goto outer; // error: label "outer" used but not defined    goto inner; // ok    // ...}</code></pre><h3 id="how">how</h3><p>继续阅读 Description 部分:</p><blockquote><p><em>The setjmp() function dynamically establishes the target to which control will later be transferred, and longjmp() performs the transfer of execution</em></p></blockquote><p>直译过来就是说，<code>setjmp()</code> 扮演的是定义 label 作用，<code>longjmp</code> 扮演的是goto跳转作用</p><p>继续看这两个函数体的定义:</p><pre><code class="language-c">int setjmp(jmp_buf env);void longjmp(jmp_buf env, int val);</code></pre><p><code>setjmp</code> 接收一个 <code>jmp_buf env</code> 的参数, 看看手册是如何解释 env 的:</p><blockquote><p><em>The setjmp() function saves various information about the calling environment (typically, the stack pointer, the instruction pointer, possibly the values of other registers and the signal mask) in the buffer env for later use by longjmp()</em></p></blockquote><p>写的很直白了， <code>env</code> 保存了调用处的局部环境，例如 栈指针、pc指针…<br>（这块如果看不懂，需要恶补汇编知识，建议阅读：<a href="/posts/1QNHHCN/">汇编（三）：基础AT&amp;T汇编</a>）<br><code>setjmp</code> 负责写入env，<code>longjmp</code> 会读取env并恢复调用时的环境，这样就达到了 <code>nonlocal goto</code> 的作用</p><p>ok基本看明白了，但是还有一个 <code>int val</code> 的参数，作用是什么？</p><ul><li>这里我觉得 man手册 没说清楚，自己总结下吧<ul><li>如果是 <code>setjmp</code> 的直接调用：返回 0</li><li>如果是 <code>longjmp</code> 的跳转调用：返回 一个非0 的 参数</li></ul></li></ul><div class="admonition note"><p class="admonition-title">setjmp的两次返回值</p><ul><li>这里很抽象，需要结合代码理解</li><li><a href="https://stackoverflow.com/questions/1692814/exception-handling-in-c-what-is-the-use-of-setjmp-returning-0">StackOverflow: What is the use of setjmp() returning 0?</a></li></ul></div><h3 id="注意点">注意点</h3><p>阅读 man手册 的 Caveats 部分，有两点注意事项:</p><ul><li>如果 调用 <code>setjmp</code> 的函数 在 <code>longjmp</code> 调用之前返回，那么行为不确定.</li><li>如果 在多线程 中使用 <code>nonlocal env</code>，那么行为不确定.</li></ul><p>这两点在实际开发中暂时不会遇到，先列在这里吧</p><h2 id="code-example">code example</h2><p>talk is cheap, show me the code：这部分开始讨论代码</p><p>下面的代码展示了 <code>setjmp / longjmp</code> 的基本使用:</p><p>核心：记住 <code>setjmp</code> 处会被call两次</p><ul><li>第一次是用户自己调用的</li><li>第二次是 <code>longjmp call</code> 回来的</li></ul><pre><code class="language-c++">// https://en.wikipedia.org/wiki/Setjmp.h#include &lt;stdio.h&gt;#include &lt;setjmp.h&gt;jmp_buf env;int longjmp_ret = 8;         // paramater pass to longjmpvoid second() {    printf("second 1\n");    // √    longjmp(env, longjmp_ret);    printf("second 2\n");    // ×}void first() {    printf("first 1\n");     // √    second();    printf("first 2\n");     // ×}int main() {    int val = setjmp(env);    if (!val) {        printf("setjmp return: %d\n", val);        first();               // when setjmp executed, setjmp returns 0    }    else {                     // when longjmp returns, setjmp returns 1        printf("setjmp return: %d\n", val);        printf("main :: else\n");     }    return 0;}// setjmp return: 0// first 1// second 1// setjmp return: 8// main :: else</code></pre><h2 id="setjmp-实现协程"><code>setjmp</code> 实现协程</h2><h3 id="实验要求">实验要求</h3><p>看到这里觉得自己很牛逼了，觉得都会了，是骡子是马，上实验遛遛：<br>这里 NJU 操作系统的实验，利用 setjmp 实现一个轻量级的协程: <a href="http://jyywiki.cn/OS/2022/labs/M2">M2: 协程库 (libco)</a></p><p>首先你要理解什么是 <a href="https://en.wikipedia.org/wiki/Coroutine">协程</a> （Python Generator 就是一种协程）</p><p>其次实现实验里给出的 api:</p><ul><li><code>co_start</code>: 创建一个新的协程，并返回一个指向struct co的指针（类似于 pthread_create）</li><li><code>co_wait(co)</code>: 表示当前协程需要等待，直到co协程的返回才能继续执行（类似于 pthread_join）</li><li><code>co_yield()</code>: 将当前协程“切换”出去，随机选择下一个线程执行</li></ul><pre><code class="language-c++">// co.hstruct co* co_start(const char *name, void (*func)(void *), void *arg);void co_yield();void co_wait(struct co *co);</code></pre><p><strong>如下是一个使用的例子：</strong></p><pre><code class="language-c++">#include &lt;stdio.h&gt;#include "co.h"int count = 1; // 协程之间共享void entry(void *arg) {  for (int i = 0; i &lt; 5; i++) {    printf("%s[%d] ", (const char *)arg, count++);    co_yield();  }}int main() {  struct co *co1 = co_start("co1", entry, "a");  struct co *co2 = co_start("co2", entry, "b");  co_wait(co1);  co_wait(co2);  printf("Done\n");}</code></pre><div class="admonition error"><p class="admonition-title">TODO</p><ul><li>为什么这里 <code>count++</code> 不会有线程安全问题?</li></ul></div><p>其中co1和co2这两个协程共享 <code>count</code> 变量，因此输出是：<br><code>b[1] a[2] b[3] b[4] a[5] b[6] b[7] a[8] a[9] a[10] Done</code></p><p><strong>一个小小的调试技巧:</strong></p><p>当你不希望某些调试用的输出，出现在正式环境，可以借助宏重写 printf:<br>（其中 <a href="https://learn.microsoft.com/en-us/cpp/preprocessor/variadic-macros?view=msvc-170"><code>__VA_ARGS__</code></a> 用来表示不定数量的参数）</p><pre><code class="language-c++">#ifdef DEBUG_MODE  #define debug(...) printf(__VA_ARGS__)#else  #define debug(...)#endif</code></pre><p>编译时增加 <code>-DDEBUG_MODE</code> 的编译选项，即可打开 <code>DEBUG_MODE</code> 宏，即实现了输出控制</p><p><strong>VSCode 调试 C++:</strong></p><p>因为一直 <code>VSCode Remote-SSH</code> 在服务器上写代码，不适合用 VS、Clion 等现代IDE调试，gdb这种又贼难用，所以配了一下VSCode调试的环境，看 <a href="/posts/3HCBFZ8/">这篇博客</a>；</p><p>限制还是有的：1. 只适合小型的 c/c++ 项目，2. 依赖太多三方库等文件时，<code>launch.json</code>不太好写</p><h2 id="实现">实现</h2><p>首先将协程的状态分为几类:</p><pre><code class="language-c++">enum co_status {  CO_NEW     = 1, // 新创建  CO_RUNNING = 2, // 已经执行  CO_WAITING = 3, // 在 co_wait 上等待  CO_DEAD    = 4, // 已经结束};</code></pre><p>状态的划分很重要，因为 <code>co_yield</code> 会选取下一个幸运儿进行调度执行，选择标准就是协程的状态；<br>理想情况下，选取一个 <code>CO_WAITING</code> 状态的协程继续执行，正在执行的协程状态是 <code>CO_RUNNING</code>，且同时有且只能有一个 <code>CO_RUNNING</code>…</p><p>那么选取下一个协程时，有两种情形要处理：</p><ul><li>有 <code>CO_WAITING</code>：直接切换</li><li>无 <code>CO_WAITING</code>：怎么办?<ul><li>继续执行？显然违背了 <code>yield</code> 的原理</li><li>正确做法是切回到 <code>main</code>（可以将 <code>main</code> 理解为一个主协程）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OS】多线程之互斥算法</title>
      <link href="/posts/14ZY2JK/"/>
      <url>/posts/14ZY2JK/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>Mutex (<em>Mutal Exclusion</em>): 即相互排斥, 即多个线程不能执行同一段代码（指令）</li><li>PPT: <a href="http://jyywiki.cn/OS/2022/slides/4.slides#/">理解并发程序执行</a> | B站: <a href="https://www.bilibili.com/video/BV15T4y1Q76V">理解并发程序执行 (Peterson算法、模型检验与软件自动化工具)</a></li><li>之前的多线程用C++实现, <strong>这篇改用Python实现</strong>, 因为重点是算法思想而非语言</li><li><font color="#FF1E10"><strong>Todo</strong></font> 互斥算法的正确性证明: 画状态机, 暴力穷举, Model checking</li><li><font color="#FF1E10"><strong>Todo</strong></font> C++, Python: 多线程, 锁等相关</li></ul></div><div class="markmap-container" style="height:225px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;一个经典并发bug&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;atomic&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;critical section&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;互斥原理&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;Mutex&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Progress&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;Bounded Waiting&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;互斥算法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;LockOne&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;LockTwo&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;Peterson&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="问题背景">问题背景</h2><p><a href="https://stackoverflow.com/questions/15058925/why-using-multiple-threading-to-get-the-sum-is-correct">StackOverflow: Why using multiple threading to get the sum is incorrect?</a></p><p>先看一个经典的 <strong>Python多线程求和</strong>, 经典面试题目, 经典并发Bug:</p><pre><code class="language-python">import threadingN = 1000000x = 0def add():    global x    for _ in range(N):        x += 1t1 = threading.Thread(target=add)t2 = threading.Thread(target=add)t1.start(); t2.start()t1.join(); t2.join()print(x)</code></pre><div class="admonition error"><p class="admonition-title">什么N取值较小（如1000）, 结果却是正确的?</p><ul><li>todo</li></ul></div><p>输出结果分布在 <code>&lt; 200w</code> 之间, 通过前面的学习已经知道, <code>x ++</code> 这个操作是 <strong>非线程安全的</strong></p><p>查看 Python汇编得到 <code>foo</code> 函数的汇编, 看到 <code>x ++</code> 被拆分为 3条汇编指令</p><ul><li><code>LOAD_GLOBAL</code>: 读取x取值</li><li><code>INPLACE_ADD</code>: 执行加1</li><li><code>STORE_GLOBAL</code>: 写入x取值</li></ul><pre><code class="language-asm">    12 LOAD_GLOBAL              1 (x)    14 LOAD_CONST               2 (1)    16 INPLACE_ADD    18 STORE_GLOBAL             1 (x)    20 JUMP_ABSOLUTE            8-&gt;  22 LOAD_CONST               0 (None)    24 RETURN_VALUE</code></pre><p><strong>下面证明为什么被拆成3条cpu指令, 就会导致非线程安全:</strong><br>如下表, 线程A和B分别有三条指令, 汇合在一起就是实现 <code>x ++</code> 的功能</p><table><thead><tr><th style="text-align:center">No.</th><th style="text-align:center">Thread-A</th><th style="text-align:center">Thread-B</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">load(A)</td><td style="text-align:center">load(B)</td><td style="text-align:center">读 x</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">add(A)</td><td style="text-align:center">add(B)</td><td style="text-align:center">x ++</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">store(A)</td><td style="text-align:center">store(B)</td><td style="text-align:center">写 x</td></tr></tbody></table><p>首先明确执行的顺序规则, 同一线程内的指令一定是有序的, 但不同线程间的指令无法确保顺序</p><ul><li><p>一种正确的情形 ✔:<br><code>load(A) -&gt; add(A) -&gt; store(A) -&gt; load(B) -&gt; add(B) -&gt; store(B)</code><br>输入 <code>x=0</code>, 输出 <code>x=2</code>, 这是最理想的情况</p></li><li><p>一种错误的情形 ❌:<br><code>load(A) -&gt; add(A) -&gt; load(B) -&gt; add(B) -&gt; store(A) -&gt; store(B)</code><br>输入 <code>x=0</code>, 输出 <code>x=1</code>, 显然出错了<br>问题在于线程A、B依次load的时候, x取值为0, 相当于都对0做了 <code>+1</code> 的操作, 所以结果少加了一次</p></li></ul><p><strong>如何避免这样的问题?</strong><br>只要保证 <code>x ++</code> 同时只有一个线程在执行, 这样的代码段称为 <font color="#ef6d3b"><strong>Critical Section</strong></font><br>我们只需要确保 Critical Section 部分的代码, 不被多个线程同时执行, 即为它加上一把互斥锁</p><div class="admonition note"><p class="admonition-title">Critical Section</p><ul><li><em>Critical Section is the part of a program which tries to access shared resources.</em><br></li><li>即尝试访问共享内存（或资源）的程序段,</li></ul></div><h2 id="一次失败的尝试">一次失败的尝试</h2><p><strong>现在实现一个多线程互斥算法:</strong><br>脑袋里最直观的想法是, 维护一个全局变量（即锁）, 每当有线程访问 Critical Section 时, 就上锁, 以达到防止别的线程同时访问的目的, 退出访问后不要忘记解锁;</p><pre><code class="language-python">lock = ''x = 0def add():    global x, lock    for _ in range(N):        while lock == '🔒':            pass        lock = '🔒' # add lock        x += 1      # critical section        lock = ''   # release lock</code></pre><p>这段代码很简单很low, 但是你秉承着大道至简的信念, 略有自信的运行了它…<br>Wrong Answer! …</p><p><strong>继续看出错的原因在哪里?</strong><br>第6行 <code>while lock == '🔒'</code> 和 第8行 <code>lock = '🔒'</code>, 这里分别代表 <code>load/store</code> 操作, 其实已经违背了线程安全的原理<br>举个粒子, 线程A/B依次进入while的判断, 都以为现在是无锁的状态, 而实际的加锁都没走到…</p><h2 id="互斥问题的类比">互斥问题的类比</h2><p><strong>当你无法理解一个抽象问题, 尝试将其类比为熟悉或者具体 的概念</strong> <a href="/posts/3819NVV/">💡《直击本质》书摘</a></p><ul><li><p>先假设一些前提：</p><ul><li>每个人是独立的线程</li><li>大脑内的思想是局部的（<code>private</code>）</li><li>自然界的信息是所有线程共享的 （<code>public</code>, <code>shared memory</code>）</li></ul></li><li><p><strong>通过 <code>抢厕所</code> 解释 非线程安全:</strong></p><ul><li>早上10:05（带薪蹲坑的好时候）, A 和 B 同时看到 仅剩的一个厕所（<code>Load</code>）</li><li>他们激动难耐, 都同时冲了过去… （<code>try to store</code>）</li><li>此时产生两个人抢夺一个厕所的情况… （<code>2 threads -&gt; critical section</code>）</li></ul></li><li><p><strong>解决思路一: 叫号</strong></p><ul><li>由一个全局的公告牌决定 轮到谁上, 但是如果叫到A, 但是A不在或者临时有事了…</li><li>缺点: 违背 “空闲必进” 的原则</li></ul></li><li><p><strong>解决思路二: 协商</strong></p><ul><li>让A/B自己讨论放谁进去, 如果碰到两位仇家, 是不是谁也不让最后僵持不下?</li><li>缺点: 陷入死锁</li></ul></li></ul><p>通过这些 <s>牵强</s> 的类比, 大概对互斥算法设计的好坏、标准有了一些认识：</p><div class="admonition note"><p class="admonition-title">互斥算法的三条标准</p><ul><li>Mutex: 互斥的正确性</li><li>Progress: 有线程进入<code>critical section</code></li><li>Bounded Waiting: 有限等待, 无死锁</li></ul></div><h2 id="LockOne算法">LockOne算法</h2><p>顾名思义, 引入一个bit的 <code>turn</code>, 即允许执行的线程id<br>假设 <code>turn==0</code>, 此时线程1想要执行, 只能干等…<br><strong>违背了 “空闲必进” 的原则</strong></p><p><img src="/images/mutex-lockone.png" alt=""></p><h2 id="LockTwo算法">LockTwo算法</h2><p>顾名思义, 引入 2 bits的 <code>flag</code>, 标记第n个线程是否要执行（因为是双线程互斥，2个bit就足够）<br>假线程0、1同时标记了自身的flag, 它们就可以分别卡在等待中, 即死锁.<br><strong>违背了 “有限等待” 的原则</strong></p><p><font color="#FF1E10"><strong>WARNING 纠错:</strong></font> 下图的 <code>flag[i]=true</code> 应该在 <code>while (flag[i])</code> 判断的上方</p><p><img src="/images/mutex-locktwo.png" alt=""></p><h2 id="Peterson算法">Peterson算法</h2><p>既然 1bit的turn 与 2bit的flag都无法完美解决互斥, Peterson算法干脆说：“我全都要！”</p><ul><li><p>它的优点是, 保证了双线程互斥正确性的同时，</p><ul><li>既确保了 <code>LockOne</code> 的 空闲必进 原则</li><li>又防止了 <code>LockTwo</code> 的 陷入死锁 问题</li></ul></li><li><p>尝试阅读如下材料, 以对Peterson算法又更直观的理解:</p><ul><li><a href="https://en.wikipedia.org/wiki/Peterson%27s_algorithm">Wikipedia: Peterson’s algorithm</a></li><li><a href="https://jamesrwilcox.com/SharedMem.html">A Proof of Peterson’s Algorithm</a></li></ul></li></ul><h2 id="写在最后">写在最后</h2><ol><li><p>本文讨论的, 全部基于 双线程互斥, 不适用于 <code>n &gt;= 3</code> 的情形;</p></li><li><p>正确的互斥算法, <strong>其内部的状态转移一定存在环</strong></p><ul><li>直观理解就是, 一个线程进入 <code>critical section</code> 后, 另一个线程不断的轮询等待 (<code>陷入while</code>)</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【硬件】GPU架构</title>
      <link href="/posts/3Z9MX8B/"/>
      <url>/posts/3Z9MX8B/</url>
      
        <content type="html"><![CDATA[<h2 id="GPU-与-显卡-的关系">GPU 与 显卡 的关系</h2><p>GPU 是 显卡最核心的部件, 除了GPU, 显卡还有散热器、通讯元件等电子设备</p><p>目前的 GPU 厂家主要有两个：</p><ul><li><code>NVIDIA</code>: 英伟达, 主要是GTX, RTX系列, 俗称<code>N卡</code></li><li><code>AMD</code>: 主要是Radeon系列, 俗称<code>A卡</code></li></ul><h2 id="摩尔定律">摩尔定律</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B">Moore’s Law</a> 是由 Intel 的创始人摩尔提出:<br><strong>CPU的性能每隔 18个月 就会提升一倍（同时成本也会相应地降低一倍）</strong></p><p>但是 GPU 的性能发展历史打破了这一定律, 下图是 CPU/GPU 的性能提升对比图:</p><p><img src="/images/cpu-gpu.png" alt=""><br><br></p><h2 id="CPU-和-GPU-的主要区别">CPU 和 GPU 的主要区别</h2><ul><li><p>参考阅读:</p><ul><li><a href="https://www.cherryservers.com/blog/gpu-vs-cpu-what-are-the-key-differences">GPU vs CPU: What Are The Key Differences?</a></li><li><a href="https://www.cnblogs.com/biglucky/p/4223565.html">CPU 和 GPU 的设计区别</a></li><li><a href="https://www.eet-china.com/mp/a180440.html">深入GPU硬件架构及运行机制</a></li></ul></li><li><p>一个通俗的比喻:</p><ul><li>CPU是几个大学教授, 单打独斗能力强</li><li>GPU是成千个小学生, 擅长大规模并发计算</li></ul></li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">CPU</th><th style="text-align:center">GPU</th></tr></thead><tbody><tr><td style="text-align:center">Short for</td><td style="text-align:center"><em>Central Processing Unit</em></td><td style="text-align:center"><em>Graphics Processing Unit</em></td></tr><tr><td style="text-align:center">Cores</td><td style="text-align:center">6大核 (i5 10600kf)</td><td style="text-align:center">4864小核 (RTX 3060Ti)</td></tr><tr><td style="text-align:center">Memory</td><td style="text-align:center">Performance, Capacity</td><td style="text-align:center">Bandwidth</td></tr><tr><td style="text-align:center">Arch.</td><td style="text-align:center">SIMD</td><td style="text-align:center">SIMT</td></tr><tr><td style="text-align:center">Application</td><td style="text-align:center">Operation System</td><td style="text-align:center">Graphcis, AI</td></tr></tbody></table><h2 id="GPU-架构发展历史">GPU 架构发展历史</h2><h3 id="0-Tesla-架构"><a href="https://en.wikipedia.org/wiki/Tesla_(microarchitecture)">0. Tesla 架构</a></h3><div class="admonition note"><p class="admonition-title">Tesla 虽然是 GPU最简单的架构, 但是写这文章时, 大概只理解了不到两成（很多概念太抽象了）, 希望伴随职业生涯的学习能不断加深对硬件的理解</p></div><p>Tesla 是第一个面市的 GPU 架构, 但是经典永不过时<br>这篇知乎写的很好, 作者把GPU比作一个外包公司: <a href="https://zhuanlan.zhihu.com/p/403354366">【GPU】Tesla架构（一）：初识GPU架构</a></p><p><img src="/images/gpu-tesla.png" alt=""></p><p>通过几个核心器件来分析:</p><ul><li><p><strong>Host interface</strong><br>GPU 所有工作的包工头, 负责派发任务</p></li><li><p><strong>Input assembler</strong><br>将 CPU 传递的顶点数据组装后, 传给 Vertex work distribution</p></li><li><p><strong>Vertex、Pixel、Compute work distribution</strong><br>分别负责 顶点、片元、shader的三大任务</p></li><li><p><strong>TPC</strong> （<em><strong>T</strong>exture <strong>P</strong>rocessing <strong>C</strong>lusters</em>）<br>包含一个纹理单元 和 两个负责计算的SM（<em><strong>S</strong>treaming <strong>M</strong>ultiprocessor</em>）</p></li></ul><p><font color="#ef6d3b"><strong>理解核心的 TPC ⭐</strong></font>（架构如下图）</p><p>将 GPU 看作一家大的外包企业, 那么 TPC 就是其一个个小的子公司, 它的核心部门如下:</p><ul><li><p><strong>SMC</strong> （<em><strong>SM</strong> <strong>C</strong>ontroller</em>）<br>SMC 是负责将总部的各种任务拆分打包成 Warp, 并交给下面的小部门（SM）处理。可以看做该部门的负责人, 既要对接外界资源, 又要管理内部的任务分配, 需要实现负载均衡</p></li><li><p><strong>Texture Unit</strong><br>todo</p></li><li><p><strong>SM</strong>（<em><strong>S</strong>treaming <strong>M</strong>ultiprocessor</em>）<br>SM 是真正负责干活的小部门, 内部划分如下:</p><ul><li><strong>I cache</strong>: 指令cache, 将 SMC 传递来的指令缓存下来再分批执行</li><li><strong>C cache</strong>: 常量cache与共享内存</li><li><strong>MT Issue</strong>: 多线程主管, 负责内部进程的调度, 是GPU高并行的关键</li><li><strong>SP</strong>（<em><strong>S</strong>treaming <strong>P</strong>rocessor</em>）:负责执行基本的浮点、整型计算</li><li><strong>SFU</strong>（<em><strong>S</strong>pecial <strong>F</strong>unction <strong>U</strong>nit</em>）: 执行更复杂的计算, 如超越函数、插值Lerp等.</li></ul></li></ul><p><img src="/images/gpu-tpc.png" alt=""></p><p><strong>接下来尝试理解GPU的高度并行 ⭐</strong></p><p>当 SMC 拿到 多条二进制GPU指令后, 会以 32个线程为单位 分发给手下的 SM, 它们就称为一个 Warp, 这就是 **SIMT（Single-Instruction, MultipleThread）**架构</p><p>真正的并行单位是 Warp.</p><p>理想情况下, 每个线程执行相同的指令（想象所有 pixel走的分支L逻辑一致）, 这时候几乎是 100% 并行的（取决于指令数 和 core数量）</p><p>但是实际 shader 运算中, 会出现 <code>if</code> 等分支语句, 导致不同线程的执行分支也不同, 如图展示了一个 Warp 中不同线程进入不同分支情况:</p><p><img src="/images/gpu-ifelse.png" alt=""></p><h3 id="1-Fermi-架构"><a href="https://en.wikipedia.org/wiki/Fermi_(microarchitecture)">1. Fermi 架构</a></h3><p>Fermi架构 相对于 Tesla架构 的优化主要在如下几点:</p><ul><li><ol><li>晶体管硬件的发展, 可以堆更对的 SM 和运算单元</li></ol></li><li><ol start="2"><li>固定管线的一些列操作（视口、裁减、光栅化、剔除等）逐步在硬件上细化</li></ol></li></ul><p>推荐阅读 知乎: <a href="https://zhuanlan.zhihu.com/p/451179968">【GPU】Fermi架构（二）: 三角形的异世界之旅</a>, 它以三角形的视角描述了 cpu -&gt; gpu -&gt; 各种着色器经历的计算过程</p><img src="/images/gpu-fermi.png" width="370"><h3 id="2-Kepler-架构"><a href="">2. Kepler 架构</a></h3><p>Kepler架构的核心是低功耗, 因为物理器件温度过高时, 会导致降频促使性能下降（尤其是移动端）</p><h3 id="其他架构">其他架构</h3><p>Maxwell, Pascal, Turing这三个架构先不介绍了, 超出理解能力了…</p><h2 id="移动端架构">移动端架构</h2><p>区别于桌面端的架构, 移动端GPU受限于电池的短板, 需要避免高带宽导致的高电耗</p><p>当前主流的移动端 GPU架构（如PowerVR, Adreno, Mali…）, 都是基于块的渲染 <strong>（Tile Based Rendering, TBR）</strong>; 作为对比, 桌面端的GPU架构都是 <strong>（Immediate Mode Renderers, IMR）</strong></p><p>什么是一个 Tile? 假设一个屏幕分辨率是 2k（2560 x 1440）, 它将每 16x16 划分为一个 Tile, 每个Tile内有自己的缓存, 绘制时也是逐 Tile绘制</p><h2 id="写在最后">写在最后</h2><p>开这篇文章是为了普及一些GPU硬件的知识, 因为学习软件汇编时必然也会接触 CPU硬件架构.<br>但是GPU硬件很多概念根本看不懂, 很抽象, 权当科普吧…<br>过一段时间再回来头, 希望会好点</p>]]></content>
      
      
      <categories>
          
          <category> 3D Engine </category>
          
          <category> 3D Engine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【引擎】渲染系统</title>
      <link href="/posts/36E2965/"/>
      <url>/posts/36E2965/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="daae7c8582868c8fa9fe052bb312c1a7d6fc98545f9e186ef30170b3552a6786">b3dc07a81f6459d120ce338ccca55046d81ca386354419b6b77d6b55182b8ed33140f2401a25c01a514a43101d339e09a1b2e92127965f9324a394488623f13567a42631fecb5042eb8052206cc0ab8768157a03a512d041b85e73b5ad01100c1fa62983540997e855ef137f75a3520d73b6e836afc1e03b244e0efd0b1f6659d84c1feb5f526eef882a052f38bc4d4f54c3b21f7ac35d22a6c7416b81d076e287d11d62c3b5acbc6ae09295d3d7b1272ba11d47a0078530d26b6167f5812214e6a06520ea990373c5131a13525c023f10aa6883f875e56eab9ee5b3a126d6bd289ba09c5d42273d5591d7e3600e926b52797fcd4634ea7e293dbeeecbc31e56415dbedc1c3e3509782ae8969064bf59e44532faef8d76fe16ff8a0cbf01fef3f37b65d5c97e98bb26cfc366a93c4b7d3320906ec8fcb19ecc09dab2ac6085682a4fd0f9b505cdac92091626de5a1e3f9f85ab4ab30ee4d8e8708c785c323ac26a29373c25ea6d70c2a175e5b34fc4100eabe70c375a9e735e462459fe8b5f28e3ecad7aa96d7b86db29953efac9973b0f8aa580bde40c9dbb368e2a691100aff1d77a886ce30df1e4d8de59456f31893bdf557bb11235120d8b98742991d76fb4862b973603cdbb4796bfa472f462456582b6488b101043431424649698a0f3c0c7b6661acd69df55a6a7028da6f6341f418f581b12bc922a4db384e85a031bdc3c716291dcd159730e3d708c102a5785b58186e6aafecf69b09ad841d82a17a53cc71c89dc518535bb8b25623715d35d9b3dc55777ec39572bc6aa1f7f243442686982b172cf41870dd48af9ce70d706731d8d9cf2884c75cb38e3a31cfb3f33906f66e57ccc29f7326116c69782b13bf6d04a91c7524f2081610f88588101c4c3c96020d0fa69749e328a8a5ac71d1c676a843a7ac125a3b561b17955fa3c2b774010aeec09c6f7e991381ef507d028a263c5f6809c70ed8f63f969fe439d1788b676f0168f0638fe2f7f9135b81b878eb1bf73cb732112c5dc64284bfdf7e764db90ce741a2a24cc5e41a9bbd5b9dd4a72f997e492b642f8f489d6f607dfd5be929710cf457350d7068d72584b9075bf45f3149f2a23e2e548360189bc8cb1965e7127041b5ec244a4286c1ac59878609b0facf2bb043eeb9814af93c75f8301a82d4ccd53930a62a888019fff22648897dc0df05c31580ed10f4e6c6a3993f462afc77165ce5afab45472b218d3347a5f20be6991cdcfba1a92a4c51eb3bd8f2cb5a1b44de5c5852baf98fbbe0bbeb7dbe5385a0ac07fd66a70a0d4070fc0f2a5bb25f431a9dc978bbebdcf9fd679ca147d788939bd6d009ddac8ddde3b5cb6b8f9cb0ab7996ceec5557b0a5e0e1f795f8ca4f10a626b2dbe9eece30b029b463de848b1906b5521811692fb082b5769737763807ee0325a7e7747cf46d711323621a47133107ed8d2f47421494d82d0886eaf307199f0f90cfb0a1ada6a09b8fde3a4dbc801e3cb492a129dde62ea2da11600831caedac3f4cd34aa499be6372068718da25e56cfe3df8452a599eeead7dee0464707548eebf99bb889efc716d1df4570c75e6091c3ce6184f0d86d6daa9ca3acc3a68f117003db2608193a5d934e3a69b9dbb0fb25eae3035d46227e2d99a1065dfe791ee901ccf13a3877a090a88e3a2852bb2f6748caa9d61d431759cd56ca123cef02ce434192873d9e24d36b90a926ffe58d699dc40d56d657a4ed210e12a9ef2c111a2b2a280ec20ba73a0e67fec2638962b3a2b5979f0baa47e700aaa171e064bc3ec8429d8ba52a8fded50c0acf30bda1a254249a6b44e86824c183d5df35b7197d3c1661fe6b0bd0ba7f9619b6bff75134d1b7db818ee222ed7e0be33ecf0d922e3e126ff9e15e660f1b0f279bc5736d6e4c630f64ed0ea65e38ad400081a50478cbfe606954db147ccae56a8b8da4ae954598953573137cdc779531faf9720ee47cc72e79a30c015b567da9ddd1b3b6f5047e5f2ffca7df6415867d9c6a87bdcceeb973263c6e382e88909817745b80cc2fd7972ecb826f953da3451fb67e34c1dbcc02df32852b7b85fa11de6dea20f6cb88d687bc5637585025bd23190698758239c8a81d210ad3965e49599e885575e72f6a5bf9f21f9d5cb466199144a00c057f2331d888ae729dc46e6163f4e5060b9e6a7fe6895680be21050b87f502e07014fe0349cad9130be7f6e4519def1a50571e6545d9fdf742f9344ae0715d700252c7da089b2cfd5f49b9010021c26ab1db6d7de4274128ad4d82a58ad776828e720e300f29056c8090b6f8e8fb6c20a103264f7020673648457d1666f16a7ac8690f4f36238e9ac81dc0c27625170dd8e25edeb82ebe881771e564c09cf2a603d50980975affc43e2db38398f05d034a3d83755447445833c61cf97701c5ef95770271a7b5ac8e6f9f4cb66b7548c9a583489f62641f0e3f3913b2003f62bcfe39eabb36d8987946a84ddf81f11460f28a8f5a9ed9733c635bf5c1b4b50a19727583cd826fc2e1aa15f7d5d194c8c83e6ee05a1a33c90f482cfc64712f29b6ac37b288969a25ffa414854c2b55fea1927eb6e5ffff6a8809a65cffa905f5060e3c70e79b8171b5ebb27cd96ab3585f37969256978caca4924fe49d13a39d3842e857e67f3df0f1ffbfaf88596bfb5197f607ee985f8cc96de53d60638281d150c39e6b0b557605c012f36cf9807943252326481bed87124b332502b189c01d99e19d358d9345e812a02dc571ca78bb904ef80f06800510bb529add3cd74638772daa7e747e7299519b6a29ba265d90b03b66c880de0f03415e34c9237b57d299808601a389801e81402f56286a8486c1e8176692f8f06e5b536d75fe14276bf2322ca3671cb9d8446f667ef615ed039cca31a4a76d690aae7fb357260d4b23ea1dd47e32b3f12bb529184c67b67e46c99dbdd742325afb3c0b123837e4a7f1c4ef67d68d5fd523ff3c1c5da4c102a7fea874b7431bde61a94d6fbd9ade44604b09a857f709fb0303e0096a110c0d2a5924971c1eeca291f692d2ea1b0ee1908acb76d32c639e7a926d30dd0dd4d36715a59ce078958f695f3ae356d2c8f9469abaa78380b588c7ddb9fb5dd02f86acbff35faeee0ce736110d5d034150c4afb47562a693b2abbc0d20ecb83e90e1c256c2ae2efdd44c777cc598c8c937eaf32e6773db326ac0afbc31e08b1105760e9ac24181841f900ea1468c9f2ea11f51d0e24d337dae2966a0ca697f9c43f2ab0e696f43c807f89922a70fb6684a2926dd729918eee6f27334507194e8dab192ed99fcd1feccc54816b9f4abca4cdd0ee8b31748800738425cd7b388bcdd5cd42b41391bdfcf17c4eb89ec3f1aa3a8c0f3fb27d220662680c387e8b2a0ea2424d0b21055f10631cd17a1e2e88810d0c381401637cae045600a93e12f11530627052eeb0525e1a3afe416766c37f8094cda3d806f9b6f6728af6a67058df6a1085cb70c614fcf2eb7bffca49e0146dd9f727c7c2671acd47814f33f343e983eaaa3f83bd377527d1bf8e42faa0f22ff205e4c79d20058386e8e870a343505fa026edd5bd9c54a5326ebce24186b452c04595b9576e440f228e991b8a5becc7fa9469d70c030f8476f983112c26198bbafbf65a06a2726eb990dc3a97b4ce4ed678ff39eb00ca821cc5e15af83e2be80fe18145007aaf2d2ef49ddfba7bf571972bab57c13d5bedfdb409207a77d91f79c24cccabbba779cbf781b143349f7284e0ab6e7e0e7e6457b1ad0a5ee86e3eba2dccc311fb1416c7e4d0457b7e0e04b11aaf453422ffd026b30c02100f6baee40dbfb4b55a1af00bf9051881b7888e11ae1fac464e6ba51901b4aeb1fdd7ca05cb1ab1b06052a518c52f63777e592a3f03b81ff507bb5a2e6ed828e1b705ab9c54af9bddac51ce97499871dd417e531c7ef12f2e00f514fca3306731fbce16afd2e95c9f9f216eb9a939909199a9a90b997b63228c25249379e4a0a67efbce19ae986a32b50592e1613c591d24fe0b529208055bbe962f221ce6c6fb36a043385b74508d40c28e592c6a87cd5c293cb9bbf7981f27a8cca06ba6486f9c962ca02fb505d52826da150ade739e31f88bc551f94f688603fe9459d20a4db401f7191e945deea96f95c0fb32b1137ca9827b77d00b4d5eda52bac4396a13999f4641eee8b8097f2cd883fb7923f2430d81e348f9a1455c02982a02dee67263bb5a6c9b20b198ed0d2a02a8dc4512e41324522b98c7e2fb38bd333df7c7ed77ed30baa491c12b643843e3e635178c9d5a383f4f69479e6d40d5923fe7a4b5ee6944d1a71236b7d007b1ac0d1d003894d91a1973bb24baf1819a5c86ac8bbfe1c6e02bc5fed57af474e893ced79276ac856f2a18ae88b067fe8e5c2a5464bdbb86c3f573fc9e53e9f233bd8b5e50e787c9bd54c1feb761f076dcff8fd23e08da9ee727c7af0ef4bc584f357e7853c35e7cd893c3fd6d0f72e338492620d6542bcb6435a3abfdf471e592b29bc06808b7d36b4f8dcd02f65dcf5b2213e1597629f4e7db48e563abd6edc9f5915dbbd8bd7fd637e97da895ee179aa94953f8dd7355cd0df6e17a98b9fc61a8b0d0dc997b15abce092e95f70d5f1cde992694b1fe46e939cf689129c2f1e2b24da5d20ac4cf3276f2eb442a44f333c0e5c11cf0c0329c904a2fa9524578fdac112cf273a856aef7de162df177e6e0ebae1c2e0bac5b2241f37a6034d1382258870b41599290830ded264a6a6f913f76332bf412a3a905b7cd4c4a13160158ba065035ddd368591f201be66d44e0853d81c2f33225debe5bf2979cb27914ffeeac385433a29401b7a4b0749d3ee258608bc5609318f853d89027621c857cb2c38a9f3a07c03996e317f078400b4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 3D Engine </category>
          
          <category> 3D Engine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Python】编码之encoding</title>
      <link href="/posts/3RHEW9J/"/>
      <url>/posts/3RHEW9J/</url>
      
        <content type="html"><![CDATA[<p><code>ASCII, gb2312, unicode, utf-8</code><span id="more"></span></p><div class="admonition note"><p class="admonition-title">Human use text. Computer speak bytes</p><p>不论什么字符, 在计算机中都是按照bytes存储. <br>区别仅在于 <strong>encoding</strong> 和  <strong>decoding</strong> 的规则.</p><ul><li>encoding: text -&gt; bytes</li><li>decoding: bytes -&gt; text</li></ul></div><h2 id="ASCII">ASCII</h2><p><em><strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange</em>  （since 1963） /ˈæski/</p><p>ASCII 使用 <em><strong>7 bits</strong></em> 来表示计算机键盘上的所有字符.<br>一共定义了 128 个字符, 描述范围是 0 ~ 127.</p><ul><li>95 x printable ch. : a-z, A-Z, 0-9…</li><li>33 x control ch. : EOF, LF</li></ul><div class="admonition warning"><p class="admonition-title">为什么 ascii 是 7bit 而不是 8bit?</p><ul><li>第8个bit</li><li>要么用于校验位: <a href="https://zh.wikipedia.org/wiki/%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E4%BD%8D">Parity bit 奇偶检验位</a><br></li><li>要么用于扩展 ascii 到 256个: <a href="https://en.wikipedia.org/wiki/Extended_ASCII">Extended ASCII</a></li></ul></div><blockquote><p>ANSI: 泛指最早每种国家语言各自实现的 ascii 扩展编码方式，各个编码互相之间不兼容</p></blockquote><h2 id="GB2312">GB2312</h2><p><em><strong>G</strong>uo <strong>B</strong>iao <strong>2312</strong> 号标准</em> （since 1981）</p><p>由于 1个byte 的ascii不能表示中文, <strong>GB2312将编码拓展到 2个byte.</strong><br>但是 GB2312 只收录了 7000多个 中文汉字, 不包含 生僻字、繁体字和日韩文字, 后来推广到 <strong>GBK</strong>（Guo Biao Kuozhan） 得以收录完毕.</p><h2 id="Unicode">Unicode</h2><p>GB2312 是显示中文的编码, 不同国际不同语言都维护了这样的编码, 管理起来就很混乱 （如 <code>\ux8\ue2</code>在中文和俄文编码中的含义就不同）.<br>Unicode 通过构建一个全世界通用的字符集解决了此问题.</p><p>具体的Unicode编码需要查表: <a href="http://www.metools.info/code/utf8235.html">Unicode, UTF-8, ASCII 在线转码的网站</a></p><h2 id="UTF-8-⭐">UTF-8 ⭐</h2><p><em><strong>U</strong>nicode <strong>T</strong>ransformation <strong>F</strong>ormat-<strong>8</strong>.</em></p><p>UTF-8 是 Unicode 的一种编码方案, 它是不定长的（1~4字节）, 可以显示 ascii、中文、繁体及其他文字.</p><p><strong>encoding 规则如下:</strong></p><ul><li>单字节符号 (ascii): 第一个bit 为0, 后7位即 ascii码, 这与 Unicode/GB2312 都是兼容的.</li><li>n字节符号 (如 汉字): 第一个byte 的 前n个bit 为1, 第 n+1个bit 为0, 后面byte的前两位一律为10, 剩下的都是Unicode编码.</li></ul><p><strong>decoding 规则如下:</strong></p><ul><li>若第一个bit是0, 则为单字节的ascii.</li><li>若第一个bit是1, 则连续多少个1, 就表示占用多少个字节.</li></ul><p><strong>根据Unicode范围决定字节数:</strong></p><pre><code>1 byte: 0000 ~ 007F: 0*******2 byte: 0080 ~ 07FF: 110***** 10******3 byte: 0800 ~ FFFF: 1110**** 10****** 10******4 byte: 0001 0000 ~ 0010 FFFF: 11110*** 10****** 10****** 10******</code></pre><p><strong>以汉字 “鲁” 为例, 解释 UTF-7的编码规则:</strong></p><p>“鲁”的unicode编码是 <code>0x9C81</code>, 二进制为 <code>1001 1100 1000 0001</code>.<br>首先查上表得知占用 3字节, 因此选择 <code>1110**** 10****** 10******</code>.<br>从后往前依次填入 Unicode, 不足的补0:<br>得到: <code>11101001 10110010 10000001</code>，十进制为 <code>0xE9B281</code></p><div class="admonition note"><p class="admonition-title">Python编码问题</p><ul><li>为什么首行添加 <code># -*- coding: utf-8 -*-</code>?</li><li>因为Python默认编码是 ascii, 如果文件中包含如中文, 会报错: <code>SyntaxError: Non-ASCII character '\xa3' in file ...</code>, 即 超过 127的ascii范围导致解码失败</li></ul></div><h2 id="BOM头">BOM头</h2><p><em><strong>B</strong>yte-<strong>O</strong>rder <strong>M</strong>ark</em></p><p>文本文件如何确定自己的编码方式?</p><p>通过开头几个字节即BOM来辨别, 同时包含大小端信息</p><ul><li><code>FE FF</code>: 大端</li><li><code>FF FE</code>: 小端</li><li><code>EF BB BF</code>: UTF-8</li><li>…</li></ul><p>下面这段 python2 程序:</p><pre><code class="language-python">a = u'El Niño'a.encoding('utf-16')# '\xff\xfeE\x00l\x00 \x00N\x00i\x00\xf1\x00o\x00'# fffe 即代表 小端存储</code></pre><h2 id="Escape">Escape</h2><p>Escape通常用来打印彩色输出等.</p><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6">wikipedia: Escape Character</a></p></li><li><p><a href="/posts/1MJH73F/">站内博客: Python之优雅输出</a></p></li></ul><h2 id="Python与编码">Python与编码</h2><p>传送门: <a href="https://docs.python.org/3/library/json.html">json Python3.11</a></p><ul><li>与编码打交道最多的是 <code>json</code>库<ul><li>Python2 中允许传一个参数为 <code>encoding</code></li><li>Python3 干掉了这个参数, 需要手动编码</li></ul></li></ul><p>有一个 <code>ensure_ascii</code>参数, 默认是True, 它允许对 ascii 不进行额外的编码.</p><p>工作中遇到过一个小bug, request请求得到的unicode编码为: <code>\\u6789...</code>, 问题出在多了一个斜杠, 原因是重复的<code>json.dumps</code>, 需要避免</p><h2 id="资料">资料</h2><ul><li><p><a href="http://www.metools.info/code/utf8235.html">Unicode, UTF-8, ASCII 在线转码的网站</a></p></li><li><p><a href="https://stackoverflow.com/questions/19212306/whats-the-difference-between-ascii-and-unicode">Stackoverflow: What’s the difference between ASCII and Unicode?</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">阮一峰: 字符编码笔记 ASCII，Unicode 和 UTF-8</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日志】2023年5月</title>
      <link href="/posts/2023/5/"/>
      <url>/posts/2023/5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c61a51a85f84168e3832e0377bc6a98dca95fb12ef3c4ba7ce2c51e96121683a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> linux </tag>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023上半年总结（写在五一）</title>
      <link href="/posts/2023a/"/>
      <url>/posts/2023a/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="62d5dca4adf091f06849bcb470fe1d2d174cd7a397f93dfff5a2bf4079a6615b">b3dc07a81f6459d120ce338ccca55046116de9af7135eccfa9c61a82756948fc17f3721d690036660e1ca319b1de7ea5abee2b21d3b2ea15225dc942382fb2c6a01d15f403303ea35415a8b95d29bb66ef379a601361db61ad440174f24415743f6c6f9156bfeeaf0e6657aec44167f87bf27d9768494353a067b87b00a8c76676a1351ebacf5d195df6fa9b57ce808c501fa2aa03b645d2393067c862c33671b06654a4787ea1d45a0123005205bec8cea6476970d45126eb65e8e41c2204755ee61b772cfc80df1938c72d56dd1171efe1683b3a3e8225dfdcf8e999ab2bc72d9c078c46414a2a1ec88978f9207b13046bbb4152fa7c5c912771ac4081deffca6235bfed3cfcccd86776aeb2e247975da6d8d8c5f97217c495d5f55645b82fda52bc29b6114c3c612e47d09f6f7bd6df69366238caddb4f2e0f75a06adfda300037feef6a9e6426651f58b448bea63e6c19e5de7941243ebbf477fd0fdff187250aea12f29fb37bed75737c26615effd83715a69856556d0d7caa8ace3af0b697e5756c306654f2f3c2fa5569ffb2857ad59ff567047f989d51bbfbcf7ec6873fefb563576bb875354666c54ff7dc85524e5fbb3d0f89ceecb3cdb74abfcd2388266307d1caa091555781377025fe5b22396aa85d41793338e3db1fe30eb6a993e70ef79933ca100cee264aabdb13a7170a4565c364d12d0599160d5b4899fd4be011688b95398d2400b6330dc25b4e33d754a9ca8c27ad29a0fb8637129b6a8c85cf3d64aae7a79da926e99f7850a9b3d601f7c8cb0da06a14560e17c19eb45ed171f9e8ee924f4e1e49e06b9355e9233faf5aff88c09da9542b9b90d86c95e29fd0e9f85444a4b1ca681504d28dd142e7cff06cd226adcb6ccf12bd3d3ebb38acfc9059ba34ff82478f4e21a148982f2ffbb0b1d02674b850fb02cc1c92e1ef9d05347f15f4f64033f0dded2725d0d44a668e508a7c774eed0bfa85f8583a3a4a5e838db20c7ab8f2853ed080d789cc9d4f85be2b5b69552fc104069cf4f2e1ccbbb81cde2a09dd18dfca376ca1bb0794c9fb2ec71c11a1fcaaa8176255d9077fb86e66e08ae8bab5ff4fa1dd3bf874298c6e18887bad76d2649968d114ce2c3cd5a3c7be7b4abf5273e1085a1bccc567d8a37370c9afeb0a64bbbf9022a48db59365068675bce2de12b96100c4e11adb4071ff9a102dce16f2fbd48eba54c64298ae4ddf256c9e3b62a8392a8ae4b74df9a463ccf0bf5a2fe005ba508a520f5c6ab641800e34482eec8f13abc390d39e715dff34268e04a8dbf484816f755a578d502cabd819b27f40a4c59fd3ccdef61d045ef3059653482fa47318d385d0500904d924f175c1977dc337a854ef864eb24ed831ecd2678a99245de31475720585c390e5a7ed145b33c36d69027c7f7e1ae9ed74d1c4a0776d9e7d5aaa7339734835ec2d1b45692308a7e91f03170a586d86a8d68f785cb7f862e7345b121042a8fdfa42c32c999e7b14cc4f78cf433f818331d14b9edefd8ee81467e20972c5feeb7655100861d9e75bfacc02c24800bce75e824071f6ba480696afdc9be8a95a9d37344f74c9d2f20683ee1dfedb0ccbe2c871e7f35ecef96de4c674fdfb7dbe2af9678e45177c20f6fb3eec48d11ff50998a251978e816dae9307d28beeb9718ba6c11f94b1891613324224d36a5a0c4bdf0d8248ec2c6425a4c32712d6f34966800b283b127ff4f3c65414bfff3a187ad7a4cd6156d599992a0cd24041d258777b2a1db4660171a8137c071ae53025d28c8c2892250876516418433431dcd099cd87c339b90e7b4beb8db8385be58f49403820c3dc07110e581a7db180c174fa35020afc38a66b8f16c1aa7ede367eb98c619d831fba5bf94ddd6ff9941f90abbcb969aaad58622c9d2cd179c2dbaee78ea0f9f642f41c3a137f5f8ce59714c66acac56ca80948194ffe566d4c2d612cd2c7b9ec3ee2f1231e3620459b2eb79dd7b543cecb1f9d67673b4abdd22242e02f79451dd60f057b125fe420618ef3338a82c42b9196043be45ef43369da4887b0ddab80edcef2242b94ad9b0bccb50a745841b07175cde913ca4de6df1e31e2763e172a14e2c88fb29bef3398ce153a851f475706209307f0786e45562128f58ed2fee5b4a78330442ceeeecc51d78736696a3a2e00faf613eb3dac0bee0a5b7f256de770db74d3fabc06a9a7ba2417820df126eb0fa17ef4eaf1335ebd53686246b8c5255d5bc35c5b5beeeed19a840bf962abb10e74175b7c49d7a169ef72c2ff405f22ed09d518e78adb90f709be4c5914c0dd9df2f8cfdf03d132401308c41df6c85671f19f76720ef328bc5b1e1402b293898d2c1f46dc958433abfd2441ec9f5208e62643a6d5a4228b70973e81506fbc1f213c66703983a3fd7a35e72df84f010bedef9f95b54970c6122477c1c905300f290f0317515434350f9d749f60b55c06215d0b6f8a53f11579d3503990fab5eb95f779153ef32906d745ad6d5ad6fb498a9048bd33bf3292f0cc53b6537c7985cd72e071960d7c572561bdfcbf2b95011351a237dd9ca4d65771e5ff8bd91ee4ba1b71951d6ab211b6f5b10c15ab9e2970c87e5b0b852343d29fca6c0e3d54732bc9f2c7a971e7cd6586fcc719b104a206748dd2b2ff4ad6163ca121a1e62ba80aa91acc29763f4b164bfa9b52a392ee175435283bdced0b2210235074ebfa0a52b2b2389c8d90f3fe13fbd1b44e6534a2de358efae5eeb51d935325026c964209fa5e918c6f2c158ab412ff0342d1d7319b230c5ac880fc6bc53328d42f0fde9057180c7f3aa55990dc19a25a057f1afe05d31396e2d60dd72baa7044b758732f5b466bd7243d51e71cb3801c3fc6a4084be623cc36329ef25b4be7f2374423beb3fb48a7c35fd2d0961546dc605f25a260c50e791c25291c8191ce55b16965b7caf2b43ea2cd69fff7d71a17e713d1fc7df0f5ab55b503085cb30b0edb5c7d14bc48cdc31772706357ec2648b374790333497f7f2798cbf951c8e2f42c497d472c85b141f859800d210d655f2acf1a6fd8d259f0662be33000f22fcb8d6300cd41400ebbabbf0d42ea457213f548e6a71312d62f5aeb5ca2bc1b6fc11690f17be8ee0f872cbcc7323c8b7765134ab70ca8a72ebad4d9e5db12e207aee53e43d9a42e5fb21461e221f7986435e1f0f2b75edd6c89488dffd055fa8f7e2bf86e5906dc7b5f19e1ba6bbc22ba3983504d03e1c0889649b3bfbde88d8eb148eeb783a4cbb8b199ef58965f1f3a31f0559507640211d8c62de1020142456500e0aaa4f3da82f36daae0288597fca7b48dca12c2b2f6d54e654c70c83fb5bf999e27da7af4a98f80911652854b1fde14a7390761d4a873ab53396b0d34ef21a36035954664465e8c52c7172edc0ea305fa7344d57d3a51ff801a8c7afd86952a108982101aeb737a29111534a31c5989be365ccf5d8f9f1de8a7c106d582572241db3e8eed380c2e2819660f651d9fe082d5a4eb79a59a60cf62b15f435d241050cbaec0f0ba1c029ca5565a98a48a19de1db963a46101747e3919978ccf6f945f9c7fb383a0398643e3cbe88e34db77407a1c008534b2e5f14f4579bc22bb082d5786695d81e67b2ce9f6aa9cb445812a3b2a0e01ca47ac385640b88e18fa9cfe760ba6328253c781cb963a8cd8434fbd51abb8798a9299966941d31c08445b23ad9e8dff95c54e6c8791cb3e85b2733cefa62e41bf17e22fb7148811b196088f7f00e9aa404a539386809df25ebefca1eb52d0de4d48da335e2625bd6456034a384a454b32e07db056557e4b4bbbcf55efc0802e65fbd86fc70281d3fcd03cbbd14c93e3f8f77cba91668235ed98c5a141ccad4d0b5aad84f18f12f07aaafdc65f5d70f8c8be3021eb60c2c82d23ca3aff1a2ffb0bf86a75e698063776c7bd848ad9e819aa61a25813a214e7bda5aadf182ab983732af3af07597ec92c48ebc5e72c84bd8b0115228d1db868e5adb209371943bd41d1cf5caa839db2ab5273ea558a924a4c185539a0df2f8e900f526145934dd794c0ea31a476ba74b7bdb4b457bd2fc1a3501c6267fd9070640ce635848fa9c0848f3c006eba0d6e54af1c9da67bfe494bb33fb726f379d5396ebf68d826e609e15f56807adb72c170c993ee8f336a9453e7b8c622ea7e64b351f7494cf1bb1f68751e05ef9bfb6a7eff9ddf96e253626e030ed56aed15e15886be150af573f833efaf3b41fe281f8e8f599e2dec7df8dcfbb6d408e3358415d46ce7420ca658a1dcb7361e289043e27f05839af88ce810cea8ee19989da86a10584b70eb46330cd5292d89eeb8fc11ff5aa32a0f98a481aec10f580b8f0a972bd6e5e1f71d9a199feb23fab9aed6f9da39150cc77098d7a38344f286de76db18ba11bf0c3d467640a870a8f4477b1c177aecfa812a92fb020f6e969be9638033bc4e054234abab4211dd063a9d53c7b12a009880338ea6cacf4068ce4021e63123bb469239f1178255e8e195d97f241a9dbd9243a25690b817a02e0edd7e4512a235332850b836e64fa92e2aadd51296231bd7f9b10510952acefa6e27fa411da0466add8fb92c5ec48a1f436e1e3b8effbaf6b5efcc038e419c2300fd9d07013d804a869029001dfa50513a1e1dd2d57fdca2213f3ff92740ddd5bd37422a7eb64a75700c37c9e1176</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【引擎】基础架构</title>
      <link href="/posts/2TKCV1V/"/>
      <url>/posts/2TKCV1V/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">提要</p><ul><li>很多技术点只是埋了个坑, 等以后学到了再回头补充</li></ul></div><h2 id="游戏引擎">游戏引擎</h2><table><thead><tr><th style="text-align:left">Engine</th><th style="text-align:left">Types</th><th style="text-align:left">Games</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.unrealengine.com/en-US/unreal-engine-5">UE ⭐</a></td><td style="text-align:left">商业引擎</td><td style="text-align:left">PUBG</td></tr><tr><td style="text-align:left"><a href="https://unity.com/">Unity3D ⭐</a></td><td style="text-align:left">商业引擎</td><td style="text-align:left">原神</td></tr><tr><td style="text-align:left"><a href="https://www.cryengine.com/">CryEngine</a></td><td style="text-align:left">商业引擎</td><td style="text-align:left">孤岛危机</td></tr><tr><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Rockstar_Advanced_Game_Engine">RAGE</a></td><td style="text-align:left">自研引擎（R星）</td><td style="text-align:left">GTA5<br>荒野大镖客</td></tr><tr><td style="text-align:left">NeoX<br>Messiah</td><td style="text-align:left">自研引擎（网易）</td><td style="text-align:left">阴阳师<br>明日之后</td></tr><tr><td style="text-align:left"><a href="https://www.ogre3d.org/">Orge</a></td><td style="text-align:left">开源引擎</td><td style="text-align:left">天龙八部</td></tr><tr><td style="text-align:left"><a href="https://godotengine.org/">Godot</a></td><td style="text-align:left">开源引擎</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left"><a href="https://www.cocos.com/en">Cocos2D</a></td><td style="text-align:left">2D开源引擎</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><h2 id="核心难题">核心难题</h2><h4 id="1-Complexity">1. Complexity</h4><p>游戏引擎设计的计算机技术非常广泛, 涉及模块不限于如下:</p><ul><li>渲染</li><li>物理、动画</li><li>Gameplay</li><li>网络</li><li>…</li></ul><p>图形与物理依赖于数学, 跨平台依赖操作系统的兼容性, 在线游戏又依赖于网络同步, 实时运算要求高效的cpu/gpu优化…<br>游戏引擎的开发, 可以说是计算机技术中的地域级难度</p><h4 id="2-Realtime">2. Realtime</h4><p>区别于电影行业的离线渲染（off-time rendering）, 游戏要求在30ms内完成多个模块的运算；<br>对于某些要求高的FPS/动作类游戏，甚至要求16ms（即60帧）</p><h4 id="3-Collaborate">3. Collaborate</h4><p>一个3A游戏至少上百人的工作团队, 难题在于多职能间的协同合作.<br>涉及的职能不限于如下：</p><ul><li>程序</li><li>美术 （模型，动作，特效，场编…）</li><li>策划 （数值，关卡，运营，战斗…）</li><li>…</li></ul><h2 id="引擎架构-⭐">引擎架构 ⭐</h2><h4 id="1-Tool-Layer">1. Tool Layer</h4><ul><li><p>工具层；</p></li><li><p>接触任何引擎的第一印象, 都来源于 编辑器</p></li></ul><h4 id="2-Function-Layer">2. Function Layer</h4><ul><li><p>功能层</p></li><li><p>让整个游戏的功能丰富起来, 如角色控制、如物理碰撞、如特效渲染等</p></li></ul><pre><code class="language-c">tickLogic();  // 逻辑ticktickRender(); // 渲染tick</code></pre><ul><li>单线程 -&gt; 多线程 ⭐<ul><li>Fixed Thread: <code>MainThread</code>, <code>RenderThread</code>, <code>LogicThread</code>…</li><li>MainStream: <code>fork</code>, <code>join</code></li><li>Job System: …?</li></ul></li></ul><h4 id="2-Resource-Layer">2. Resource Layer</h4><ul><li><p>资源层；</p></li><li><p>Assets: 将外部的资源导入为 游戏中的场景，模型，动画，声音…</p></li><li><p>Composite Assets: 索引其他资源（xml）, 如场景索引模型、模型索引贴图…</p></li><li><p>(Assets) Manager: 运行时资源管理很重要！</p><ul><li>频繁的加载与释放</li><li>垃圾回收</li><li>延迟加载</li></ul></li></ul><h4 id="3-Core-Layer">3. Core Layer</h4><ul><li><p>核心层</p></li><li><p>Math Library: <a href="https://betterexplained.com/articles/understanding-quakes-fast-inverse-square-root/">Quake’s Fast Inverse Square Root</a></p></li><li><p>Data Structure: 如八叉树管理场景</p></li><li><p>Memory Managerment: 内存管理, 减少cache miss, 处理垃圾回收</p></li></ul><h4 id="4-Platform-Layer">4. Platform Layer</h4><ul><li><p>平台层</p></li><li><p>需要兼容PC, Xbox, IOS, Android等多个操作系统</p></li></ul><h2 id="游戏对象">游戏对象</h2><p><strong>Everything is a Game Object</strong><br>游戏中一切对象都是一个 GO, 根据是否改变/运动可分为:</p><ul><li>Dynamic GO</li><li>Static GO</li></ul><p>如何描述一个 GameObject?</p><ul><li>Property: 位置, 大小, 其他属性…</li><li>Behaviors: 移动, 攻击…</li></ul><pre><code class="language-C++">class Character: public GameObjectBase{public:    // Property    Vector3 position;    float health;    // Behavior    void move();    void die();}</code></pre><h4 id="Component-⭐">Component ⭐</h4><p><strong>Every GameObject could be described in a Component</strong><br>将游戏对象的所有功能拆分为 Component, 例如:</p><ul><li>transform_comp: 移动的组件</li><li>ai_comp: AI的组件</li><li>…</li></ul><p>UE, Unity等主流商业引擎基本采用如下的设计：</p><pre><code class="language-C++">class ComponentBase{    virtual void tick() = 0;}class TransformComp: public ComponentBase{    Vector3 position;    ...    void tick();}class GameObjectbase{    vector&lt;ComponentBase*&gt; comps;    virtual void tick();    //...}</code></pre><h4 id="Tick-⭐">Tick ⭐</h4><p>游戏世界将所有 GameObject 的 Component 全部 tick一遍, 即模拟整个游戏世界的运行</p><p><strong>Object-Based tick</strong>: 按照对象tick ❌</p><ul><li>Simple and easy to debug.</li></ul><p><strong>Component-Based Tick</strong>: 按照系统tick ✔</p><ul><li>Parallelized processing.</li><li>Reduce cache miss.</li></ul><h4 id="Events">Events</h4><p><strong>GameObject interact with each other via events</strong></p><p>todo</p><h4 id="Scene-Management">Scene Management</h4><p><strong>GameObject are managed in a scene with efficient ways</strong></p><p>多个GameObject如何管理?</p><ul><li>Uid</li><li>Position</li></ul><p>当地图上的一个角色开枪, 是否要遍历所有的GameObject以查询伤害情况?</p><ul><li>二维 xz 划分: Quadtree 四叉树</li><li>三维 xyz 划分: Octree 八叉树</li></ul><div class="admonition error"><p class="admonition-title">TODO</p><p>Bounding Volume Hierarchies? 搞懂 BVH 的原理 <br></p><ul><li><a href="https://www.zhihu.com/question/48905832">知乎: BVH相比八叉树有什么优劣？</a></li><li><a href="https://en.wikipedia.org/wiki/Bounding_volume_hierarchy">Wiki: Bounding volume hierarchy</a></li></ul></div><h2 id="学习参考">学习参考</h2><ul><li><p><a href="https://games104.boomingtech.com/sc/course-list/">GAMES104-现代游戏引擎</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/List_of_game_engines">Wikipedia: List of game engines</a></p></li><li><p><a href="https://blog.csdn.net/CNHK1225/article/details/50748058">CSDN 2016: 游戏行业内部主要几款游戏引擎的技术对比</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 3D Engine </category>
          
          <category> 3D Engine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初读 周易八卦</title>
      <link href="/posts/3GXTS7K/"/>
      <url>/posts/3GXTS7K/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">先说为什么叫 周易?</p><ul><li>据传 "周的易经", 系周文王所创</li><li>昭示 周期性的<strong>规律</strong>, 世间万物的推演和<strong>变化</strong></li></ul></div><hr><p>理解周易, 核心是理解下面这段话:<br><strong>道生一，一生二，二生三，三生万物</strong></p><h2 id="道生一">道生一</h2><p>“一” 是世界上划分物质、时间的基本单位.<br>一壶酒、一竿纶… 物质的划分是简单而具体的，但如何划分时间呢?<br>古人通过观察时间的变化规律：</p><ul><li>根据日出日落划分为 “一日”</li><li>根据月亮阴晴圆缺划分为 “一月”</li><li>根据太阳位置变化的周期 划分为 “一年”.</li></ul><p>这就是 “道生一” 中的 ，一，而它是根据自然界的运转规律得来的，因此称为 “道生一”.</p><h2 id="一生二">一生二</h2><p>古人观察到一年中总有两天很特别:</p><ul><li>一天白天最长 （夏至）——&gt; 阳</li><li>一天白天最短 （冬至）——&gt; 阴</li></ul><p>这就是阴阳两极的由来，即 “一生二” 中二的含义<br>古人继续观察发现，世间的任何东西都可以通过阴阳来划分:</p><ul><li>日为阳、月为阴</li><li>男阳女阴</li><li>上为阳为阴，外为阳内为阴…</li></ul><p>为了方便记录，古人创建 爻（yao二声）来代表阴阳：<br><strong>即 <code>——</code> 表示 阳爻，<code>- -</code> 表示 阴爻</strong></p><p><img src="/images/yinyang-yao.png" alt=""></p><div class="admonition note"><p class="admonition-title">阴阳爻与二进制</p><p>阴阳即二进制中的 <code>0</code> 和 <code>1</code></p><p>古人认为阴阳是组成所有物质世界的基础，这与计算机的组成原理是一致的</p></div><hr><p><strong>阴阳转换</strong></p><p>古人观察发现，夏至和冬至间，白天长度一直在发生变化<br>这代表阴阳两极之间也会相互转变<br>它在当时对农业生产起到极大的推动意义<br><img src="/images/yinyang-change.png" alt=""></p><p>这就是八卦的由来：</p><p><img src="/images/yinyang.png" alt=""></p><hr><p><strong>阴阳拓展</strong></p><p>由于阴阳，夏至冬至的划分不足以满足 农耕农时的要求（理解为计算机中的精度不足）；<br>古人提出了 春分秋分 的概念</p><p>那么怎么表示呢?<br>聪明的古人将 “一爻” 推广到了 “二爻” （即计算机中<code>1bit</code>到<code>2bit</code>）<br>这样就能表示4种组合：春分、夏至、秋分、冬至</p><p><img src="/images/yinyang-season.png" alt=""></p><div class="admonition note"><p class="admonition-title">二进制的理解</p><p>对于上图用二进制表示，阳为<code>1</code>，阴为<code>0</code></p><p>即 春（10），夏（11），秋（01），冬（00）</p></div><h2 id="二生三">二生三</h2><p>古人将 阴阳爻 扩展到 三爻，即创造了8种的排列组合，这就是 <a href="https://www.nationsonline.org/oneworld/Chinese_Customs/bagua.htm">八卦</a> 的由来!</p><p><img src="/images/yinyang-8gua.png" alt=""></p><h2 id="三生万物">三生万物</h2><p>古人的 <code>两仪（阴阳）</code>、 <code>四象（春夏秋冬）</code>、 <code>八卦（天地水火山雷风泽）</code>，就是自然世界的基本组成，它的确可以表示任何物质.</p><p>用现代计算机的解释就是，<strong><code>3 bit</code>的组合可以推演出任何可能</strong>.</p><p><strong>六十四卦</strong></p><p>古人将 3bit 的八卦，衍生到 6bit，再拿去占卜算命，就是所谓的 “64卦”</p><h2 id="解64卦">解64卦</h2><p>以下图的 “否卦”（乾上坤下）为例：<br><img src="/images/yinyang-pi.png" alt=""></p><p>俗话说 “否极泰来”，显然否卦是不好的卦象，但是 “乾上坤下” 又很符合自然界的规律，这如何解释呢？</p><div class="admonition warning"><p class="admonition-title">为什么 “否卦” 是不好的？</p><p>易经的核心是 “易”，即万事万物是寻求变化的</p><p>因此 “乾上坤下” 这种与自然界一致的卦象，属于 “不易”，毫无变化内部无限熵增，最终会乱作一团</p></div><hr><p><strong>卦象赏析</strong></p><table><thead><tr><th style="text-align:center">64卦</th><th style="text-align:center"></th><th style="text-align:center">吉凶</th><th style="text-align:center">释</th><th style="text-align:center">象</th></tr></thead><tbody><tr><td style="text-align:center">乾，乾为天</td><td style="text-align:center">乾上乾下</td><td style="text-align:center">大吉</td><td style="text-align:center">诸事顺利，名利双收</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">坤，坤为地</td><td style="text-align:center">坤上坤下</td><td style="text-align:center">吉</td><td style="text-align:center">精守安顺，妄动招损</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">屯，水雷屯</td><td style="text-align:center">坎上震下</td><td style="text-align:center">吉</td><td style="text-align:center">宜守不宜进，蛰伏</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">蒙，山水蒙</td><td style="text-align:center">艮上坎下</td><td style="text-align:center">凶</td><td style="text-align:center">蒙昧忧愁，缺乏果断</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">需，水天需</td><td style="text-align:center">坎上乾下</td><td style="text-align:center">大吉</td><td style="text-align:center">等待时机，收成在后</td><td style="text-align:center">云团等待下雨</td></tr><tr><td style="text-align:center">讼，天水讼</td><td style="text-align:center">乾上坎下</td><td style="text-align:center">凶</td><td style="text-align:center">诸事不顺，避免树敌</td><td style="text-align:center">天水相隔，事物相背</td></tr><tr><td style="text-align:center">师，地水师</td><td style="text-align:center">坤上坎下</td><td style="text-align:center">中</td><td style="text-align:center">包容别人</td><td style="text-align:center">容纳江河的大地</td></tr><tr><td style="text-align:center">比，水地比</td><td style="text-align:center">坎上坤下</td><td style="text-align:center">吉</td><td style="text-align:center">求助聚力，方能谋事</td><td style="text-align:center">水依附大地</td></tr><tr><td style="text-align:center">小畜，风天小畜</td><td style="text-align:center">巽上乾下</td><td style="text-align:center">中</td><td style="text-align:center">受人牵制，蓄养实力</td><td style="text-align:center">风云积蓄但雨不曾落下</td></tr><tr><td style="text-align:center">履，天泽履</td><td style="text-align:center">乾上兑下</td><td style="text-align:center">中</td><td style="text-align:center">谦虚自重，不可攀缘</td><td style="text-align:center">上天下泽尊卑先别</td></tr><tr><td style="text-align:center">泰，地天泰</td><td style="text-align:center">坤上乾下</td><td style="text-align:center">大吉</td><td style="text-align:center">万事诸顺</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">否，天地否</td><td style="text-align:center">乾上坤下</td><td style="text-align:center">大凶</td><td style="text-align:center">诸事不顺，凡事忍耐</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">同人，天火同人</td><td style="text-align:center">乾上离下</td><td style="text-align:center">吉</td><td style="text-align:center">与人共事，谋事有成</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">大有，火天大有</td><td style="text-align:center">离上乾下</td><td style="text-align:center">大吉</td><td style="text-align:center">事事亨通，大有收获</td><td style="text-align:center">火在天上明烛四方</td></tr><tr><td style="text-align:center">谦，地山谦</td><td style="text-align:center">坤上艮下</td><td style="text-align:center">吉</td><td style="text-align:center">谦虚忍让，步步高升</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">豫，雷地豫</td><td style="text-align:center">震上坤下</td><td style="text-align:center">吉</td><td style="text-align:center">诸事吉祥，可得长辈助</td><td style="text-align:center">雷鸣催发大地万物</td></tr><tr><td style="text-align:center">随，泽雷随</td><td style="text-align:center">兑上震下</td><td style="text-align:center">吉</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">–</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">20. 观，风地观</td><td style="text-align:center">巽上坤下</td><td style="text-align:center">中</td><td style="text-align:center">处于变化中，观机行事</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">34. 大壮，雷天大壮</td><td style="text-align:center">震上乾下</td><td style="text-align:center">吉</td><td style="text-align:center">强盛壮大，切忌骄傲</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">55. 丰，雷火丰</td><td style="text-align:center">震上离下</td><td style="text-align:center">中</td><td style="text-align:center">如日中天，谨防盛衰无常</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">63. 既济，水火既济</td><td style="text-align:center">坎上离下</td><td style="text-align:center">事情已成，谨防变故</td><td style="text-align:center">水浇火熄</td><td style="text-align:center"></td></tr></tbody></table><h2 id="参考">参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1Fc411n7cR/?spm_id_from=333.788&amp;vd_source=db26a19e4b4372574c8ebde86f9333bd">B站: 一个视频就能讲明白的《周易》底层原理</a></li><li><a href="https://www.bilibili.com/video/BV1Ne4y1r7r6/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=db26a19e4b4372574c8ebde86f9333bd">B站: 如何解读周易64卦</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++11】lambda</title>
      <link href="/posts/87V2YJ/"/>
      <url>/posts/87V2YJ/</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda">Lambda</h2><p>lambda 表达式是C++11最重要的特性.</p><p>中文可以翻译为 匿名函数, 在此之前 <code>C#</code> 和 <code>Python</code> 都已经引入了 类似lambda 的概念:</p><ul><li><p>C#<br><code>Func&lt;int, int&gt; square = x =&gt; x * x;</code></p></li><li><p>Python<br><code>square = lambda x: x * x</code></p></li></ul><p>经常使用Python的同学应该能体会到lambda的好处, 避免了繁琐的函数定义, 提高可读性（避免跳转阅读）…</p><p>参考Python的语法, C++的 lambda语法基本一致, 只是多了其特有的 值传递 和 引用传递:</p><pre><code class="language-C++">auto func = [captures] (parameters) { /* func body */ };</code></pre><p>一个计算求和的简单Lambda函数:</p><pre><code class="language-C++">auto sum = [](int a, int b) {    return a + b;}</code></pre><h2 id="Parameters">Parameters</h2><p>这部分就是普通的参数定义, 不赘述;<br>重点提一下 <code>auto lambda</code>（C++14）, 即模板传参, 写起来非常方便</p><p><code>auto lambda = [](auto node) {};</code></p><h2 id="Captures">Captures</h2><p>与局部函数不同, lambda函数无法使用外部的变量, 因此需要通过 <font color="#ef6d3b"><strong>捕获（Caputres）</strong></font> 来获取外部变量.<br>同时捕获也分为 值捕获 和 引用捕获 两种:</p><ul><li><p><font color="#ef6d3b"><strong>Value capture</strong></font><br>等同于参数中的值传递, 会伴随一次拷贝, 无法修改原变量的值</p></li><li><p><font color="#ef6d3b"><strong>Reference capture</strong></font><br>等同于参数中的引用传递, 避免拷贝, 能够修改元变量的值</p></li><li><p><strong>Implicit capture</strong><br>隐式捕获, 主要如下几种写法:</p><ul><li><code>[]</code>: 无捕获</li><li><code>[&amp;]</code>: 都引用捕获</li><li><code>[=]</code>: 都拷贝捕获</li><li><code>[=v1, &amp;v2]</code>: v1拷贝, v2引用</li></ul></li></ul><div class="admonition error"><p class="admonition-title">关于捕获</p><ul><li><code>[=]</code> <code>[&amp;]</code> 不是捕获所有 <code>local</code> 里的变量, 而是 "对lambda内所有使用的变量, 采用 <code>值/引用捕获</code>"</li><li>避免对 很大的结构体 使用拷贝捕获, 例如 <code>vector&lt;int&gt; m_huge(10000)</code></li></ul></div><h2 id="Examples">Examples</h2><p>看了一圈发现微软的文档示例（<a href="https://learn.microsoft.com/en-us/cpp/cpp/examples-of-lambda-expressions?view=msvc-170">Examples of Lambda Expressions</a>）, 写的最好, 以后多读读微软的文档…</p><p>这是微软对 lamda 的介绍: <a href="https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170">Lambda expressions in C++</a></p><h2 id="related">related:</h2><ul><li><a href="https://changkun.de/modern-cpp/en-us/03-runtime/#3-1-Lambda-Expression">Modern C++ Tutorial Ch.3: Lambda Expression</a></li><li><a href="http://c.biancheng.net/view/3741.html">中文 lambda代码示例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluent Python</title>
      <link href="/posts/3K47Y0N/"/>
      <url>/posts/3K47Y0N/</url>
      
        <content type="html"><![CDATA[<p>《fluent python》前部分阅读摘录<span id="more"></span></p><div class="admonition note"><p class="admonition-title">NOTE</p><ul><li>英文原版pdf链接: <a href="https://bibis.ir/science-books/programming/python/2022/Fluent%20Python%20Clear,%20Concise,%20and%20Effective%20Programming,%202nd%20Edition%20by%20Luciano%20Ramalho_bibis.ir.pdf"><em><strong>Fluent Python (2nd Edition)</strong></em></a></li><li>上书随时可以拿来翻一翻，很多地方一目十行带过了</li></ul></div><h2 id="前景">前景</h2><p><strong>精通Python?</strong></p><p>Python作为一门脚本语言, 上手门槛很低, 但是自以为 “精通Python后”,  往往导致自己再难跳出舒适区, 不会花费时间去学习跟高效、更科学的特性；4月25日晚, 花了半小时初读第一章 <code>Data Structure</code> 的部分内容, 收货非常多!</p><p><strong>阅读计划</strong></p><ul><li>个人以为该书充当两个重要的作用:<ul><li><font color="#ef6d3b">随时查阅的手册 （Manual）</font></li><li><font color="#ef6d3b">编程习惯的养成 （如何Pythonic）</font></li></ul></li></ul><p><strong>章节划分</strong></p><p>很多小节应该过得很快, 实际不需要1天的开销, 暂时先排到五一结束吧.<br>阅读这本书的收益还是很高的, 尽快读完~</p><table><thead><tr><th style="text-align:left">大节</th><th style="text-align:left">小节</th><th style="text-align:center">排期</th><th style="text-align:center">进度</th></tr></thead><tbody><tr><td style="text-align:left">Data Structure</td><td style="text-align:left">1. The Python Data Model ⭐</td><td style="text-align:center">4.26</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">2. An Array of Sequences ⭐</td><td style="text-align:center">4.28</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">3. Dictionaries and Sets</td><td style="text-align:center">4.29</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">4. Unicode Text Versus Bytes</td><td style="text-align:center">4.30</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">5. Data Class Builders</td><td style="text-align:center">5.1</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">6. Object References, Mutability, and Recycling ⭐</td><td style="text-align:center">5.7</td><td style="text-align:center">✔</td></tr></tbody></table><h2 id="1-The-Python-Data-Model">1. The Python Data Model</h2><p>书中以实现52张的扑克牌为例（不包括大小王），讲述了若干Python的特性.<br>这段代码推荐反复阅读…</p><pre><code class="language-python">import collectionsCard = collections.namedtuple('Card', ['rank', 'suit'])class FrenchDeck(object):    ranks = [str(n) for n in range(2, 11)] + list('JQKA')    suits = 'spades diamonds clubs hearts'.split()    def __init__(self):        self._cards = [Card(rank, suit) for suit in self.suits                                        for rank in self.ranks]    def __len__(self):        return len(self._cards)    def __getitem__(self, position):        return self._cards[position]</code></pre><p><strong>涉及Python特性如下:</strong></p><ul><li><font color="#1A9BFF"><strong>namedtuple</strong></font></li></ul><p><code>collections.namedtuple('Card', ['rank', 'suit'])</code><br>它创建了一个 <code>Card</code> 对象, 拥有 <code>rank</code>, <code>suit</code> 两个属性.<br>namedtuple 可以替代 dict 和 class 的繁琐创建, 大幅提高代码的简洁度.</p><ul><li><font color="#1A9BFF"><strong>meta programming</strong></font></li></ul><p>重写各种 内置函数( <code>__len__</code> , <code>__getitem__</code> ), 合理搭配 <code>len</code>, <code>[]</code> 等特性使用.</p><ul><li><font color="#1A9BFF"><strong>list comprehension</strong></font></li></ul><p>列表推导式, 看第二节.</p><div class="admonition todo"><p class="admonition-title">TODO</p><p>找时间过一遍所有Python的内置函数<br>例如 <code>__getitem__</code>, <code>__dir__</code>...</p></div><h2 id="2-An-Array-of-Sequences">2. An Array of Sequences</h2><h4 id="Sequence">Sequence</h4><p>先看Python内置的容器</p><ul><li><p>根据存储的数据类型可分为:</p><ul><li><p><strong>Container sequences</strong><br>允许不同种类型的对象： <code>list</code>, <code>tuple</code>, <code>collections.deque</code></p></li><li><p><strong>Flat sequences</strong><br>仅允许同一种对象：<code>str</code>, <code>bytes</code>, <code>array.array</code></p></li></ul></li></ul><p>作为对比, Flat-seq 在内存上更为紧凑和节省, 因为 Container-seq 会存储 <code>ob_refcnt</code>、<code>ob_type</code>、<code>ob_val</code>等 C 对象, 这导致其内存占用也更大.</p><ul><li><p>根据是否可修改可分为:</p><ul><li><p><strong>Mutable sequences</strong><br>可修改类型：<code>list</code>, <code>bytearray</code>, <code>array.array</code></p></li><li><p><strong>Immutable sequences</strong><br>不可修改类型: <code>tuple</code>, <code>str</code>, <code>bytes</code></p></li></ul></li></ul><h4 id="Tuple">Tuple</h4><p>尽可能的使用<code>tuple</code>类型（在某些不可变对象的场景下）, 因为它有两个优点:</p><ul><li>防止数据被错误修改 （如误传引用）</li><li>比<code>list</code>节省内存</li></ul><p><code>tuple</code> 不可变, 是意味着被tuple直接引用的对象不可变.<br>以下图为例, tuple中嵌套一个list, 该list仍是可变的.</p><p><img src="/images/tuple-demo.png" alt=""></p><h4 id="List-comprehension">List comprehension</h4><p><code>[str(i) for i in range(10)]</code><br>这是一个最简单的 <strong>Python List Comprehension, 即列表推导式</strong>, 它可以替代简单的 for 循环.</p><p>性能上, 推导式 往往优于 for循环, 主要有两个原因:</p><ul><li>for循环中的 <code>append</code> 等操作很废.</li><li>推导式的 for 是C层面的 for, 它要快于Python写的for循环.</li></ul><div class="admonition warning"><p class="admonition-title">runtime 优化</p><p>当不需要一次性产生所有数据时, 使用<code>(str(i) for i in range(10))</code><br>它是一个generator, 每次迭代时才会从中取出数据<br></p><p><code>filter</code> 函数就是一个generator, 使用<code>list(filter(...))</code> 以将其转化为列表</p></div><h4 id="Unpack-and">Unpack and <code>*</code></h4><ul><li>使用unpack来赋值</li></ul><p><code>a, b = "1 2".split()</code></p><ul><li>使用<code>*</code>来存储溢出的数据</li></ul><p><code>a, *b = "1 2 3 4".split()</code>, 其中<code>b</code>是一个list</p><h2 id="3-Dictionaries-and-Sets">3. Dictionaries and Sets</h2><p>略</p><h2 id="4-Unicode-Text-Versus-Bytes">4. Unicode Text Versus Bytes</h2><p>写在这篇文章: <a href="/posts/3RHEW9J/">【Python】编码之encoding</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【问题求解】Hash Map</title>
      <link href="/posts/7BBSYB/"/>
      <url>/posts/7BBSYB/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li>《Introduction to Algorithms (4th)》: Hash Tables</li><li>Python dict的算法原理</li></ul></div><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Hashing：key -&amp;gt; value&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#Hash-Collisions\&quot;>Hash Collision</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;1. Chaining&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;2. Double-hashing&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#Hash-Function\&quot;>Hash Function</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;1. Division Method&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;2. Multiplication Method&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Hash Application&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#font-color-1F618D-SHA-font\&quot;>SHA</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#font-color-1F618D-MD5-font\&quot;>MD5</a>&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="Hashing">Hashing</h2><p><strong>A hash table, also known as hash map, is a data structure that maps keys to values.</strong><br>哈希表, 就是一种将 key 映射到 value 的数据结构</p><p>哈希表实则为列表的进阶应用, 那么为什么需要哈希表?<br>先看列表的增删查改开销:</p><ul><li>增删改: <code>O(1)</code></li><li>查: <code>O(n)</code></li></ul><p>因此遇到需要<strong>密集查询</strong>的场景 (如通讯录, 如飞机航班…), 列表就会遭遇查询的性能瓶颈 (数据量很大)…<br>此时 Hash Map 就是<strong>应对高效查询而提出的数据结构</strong><br><br></p><p><strong>Hashing 主要由三个部分组成:</strong></p><ul><li><em><strong>Key</strong></em> : 可以是任意的输入类型</li><li><em><strong>Hash Function</strong></em> : 将input 转化为Hash index的函数 ⭐</li><li><em><strong>Hash Table</strong></em> : 存储所有Key, Value的数据结构, 类似Python Dict</li></ul><p>Hashing的性能几乎完全由 Hash Function 的好坏决定, 因此本文将围绕 Hash Function 的选择展开论述.</p><h2 id="Hash-Collisions">Hash Collisions</h2><p>最朴素的Hash结构, 即用一个大的数组表示 （即直接地址法）, Key即Value.<br>缺点很明显, 随着数据量的上升, 该数据结构的内存开销很大, 且存在空隙的浪费</p><p><img src="/images/hash-direct-address.png" alt=""></p><p>这在实际应用中显然是不可能的, 任何一个Hash Table, 其大小肯定是小于数据量的大小.<br>因此根据抽屉原理, 总会存在两个Key 哈希到同一个Index的情况, 这就叫<font color="#ef6d3b"><strong>哈希冲突 (Hash Collisions)</strong></font>.<br>如下图所示:</p><p><img src="/images/hash-collisions.png" alt=""></p><div class="admonition warning"><p class="admonition-title">如何理解 哈希冲突?</p><p>班上出现两个同名学生, 老师第一次点名时, 根本无法识别到哪一位.</p><p>因此需要额外的特征（身高、衣服、别的外号等）才能识别</p></div><br><hr><p><strong>如何处理 Hash Collisions?</strong><br><a href="https://stackoverflow.com/questions/4980757/how-do-hashtables-deal-with-collisions">🏅 Stackoverflow: How do HashTables deal with collisions?</a></p><ul><li><font color="#1A9BFF"><strong>1. Chaining</strong></font></li></ul><p>算法导论书中的方法是, 在哈希冲突的槽位中, 引入一个链表（如下面所示）.<br>这也是 Java Hash-Map 中解决冲突的方式（jdk1.7）.</p><pre><code class="language-python">0  -&gt; 40 -&gt; 27 -&gt; 53  // Hash Collision1  -&gt; 88              // OK!2  -&gt; 16 -&gt; 42        // Hash Collision...</code></pre><ul><li><font color="#1A9BFF"><strong>2. Double hashing</strong></font></li></ul><p>第一次哈希冲突时, 使用另一个备用的哈希函数, 循环下去直到冲突不再产生.<br>缺点是哈希的计算时间复杂度变高.<br><br></p><p><strong>什么是 Load Factor (负载因子)</strong></p><p>负载因子 = 总样本数 / 哈希表容量</p><p>对于列表来说, 负载因子为1, 永远不会出现 哈希冲突的情况.<br>负载因子越大, 说明发生哈希冲突的概率越高.<br><br></p><h2 id="Hash-Function">Hash Function</h2><p>此时我们得到 <strong>衡量一个哈希函数好坏的标准:</strong></p><ul><li>运算 快</li><li>内存 小 (产生的index少)</li><li>哈希冲突 少 ⭐</li><li>负载因子 小<br><br></li></ul><p><strong>常用的哈希函数有如下几种:</strong></p><ul><li><font color="#1A9BFF"><strong>1. Division Method</strong></font></li></ul><p>$h(K) = k \space mod \space M$<br>最朴素的哈希函数, 取模. 其中k是Key, M是哈希表的大小.</p><p>示例如下:</p><pre><code class="language-c">k = 1278M = 11h(1276) = 1276 mod 11         = 2</code></pre><p>这里的关键是 M 的取值, 显然它不能是 2 的任何次幂.</p><div class="admonition todo"><p class="admonition-title">如何选 M 的取值?</p></div><br><ul><li><font color="#1A9BFF"><strong>2. Multiplication Method</strong></font></li></ul><p>$h(K) = floor(M \times (kA \space mod \space 1))$<br>乘法哈希, 其中k是Key, M是哈希表的大小, A是一个 $(0, 1)$之间的常数.</p><p>示例如下:</p><pre><code class="language-c">k = 12345A = 0.357840M = 100h(12345) = floor[ 100 (12345*0.357840 mod 1)]        = floor[ 100 (4417.5348 mod 1) ]        = floor[ 100 (0.5348) ]        = floor[ 53.48 ]        = 53</code></pre><h2 id="Application">Application</h2><p><strong>哈希如何用作加密?</strong></p><p>以SHA举例, 用户输入自己的密码后（比如长度为5~12的字符串），系统会利用SHA Hash将其映射为 一个256bit的 字符串，并存储在计算机本地.<br>当用户再次输入密码, 只需要对比生成的SHA Hash值是否前后一致即可.<br>同时, <strong>由于Hash的不可逆, 还能有效起到防盗的作用.</strong></p><hr><h3 id="font-color-1F618D-SHA-font"><font color="#1F618D">SHA</font></h3><p>SHA-256（Secure Hash Algorithm）是最广泛的加密哈希算法之一, 任何长度的信息都会被映射到一个256位（32字节）的字符串.<br>详细可以看这篇: <a href="https://zhuanlan.zhihu.com/p/278028577">知乎: SHA256算法详解及python实现</a></p><pre><code class="language-python">hash("hello") = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824hash("hbllo") = 58756879c05c68dfac9866712fad6a93f8146f337a69afe7dd238f3364946366</code></pre><hr><h3 id="font-color-1F618D-MD5-font"><font color="#1F618D">MD5</font></h3><p>MD5（Message Digest 5) 是一种消息摘要算法, 同时也利用了哈希函数.<br>本质上, MD5就是把任意长度的数据生成一个128位的字符串.<br>详细可以看这篇: <a href="https://juejin.cn/post/6844903663454928909">稀土掘金: MD5算法的应用及原理</a></p><p><strong>游戏Patch经常会使用MD5哈希算法, 来做文件下载校验.</strong><br><strong>SVN检查本地哪些文件作了修改, 也使用了MD5.</strong></p><hr><div class="admonition warning"><p class="admonition-title">SHA-256, MD5等哈希算法是否可逆?</p><p>显然是不可逆的, 因为这些是摘要算法, 本质是 <strong>无穷信息 到 有穷信息 的一种映射</strong></p><p><a href="https://www.zhihu.com/question/22651987">知乎: 为什么说 MD5 是不可逆的？</a></p><p><a href="https://www.zhihu.com/question/19743262">王小云: 破解出一个高效的MD5哈希碰撞算法</a></p></div><h2 id="Paper">Paper</h2><ul><li><p><a href="https://en.wikipedia.org/wiki/Hash_table">Wiki: Hash table</a></p></li><li><p><a href="https://www.geeksforgeeks.org/introduction-to-hashing-data-structure-and-algorithm-tutorials/">Geeksforgeeks: What is Hashing</a></p></li><li><p><a href="https://runestone.academy/ns/books/published/pythonds/SortSearch/Hashing.html#:~:text=One%20method%20for%20resolving%20collisions,first%20slot%20that%20is%20empty.">Hashing</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】如何阅读man手册</title>
      <link href="/posts/man/"/>
      <url>/posts/man/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">NOTE</p><ul><li><a href="https://www.kernel.org/doc/man-pages/">man-pages for web</a></li><li>程序员工作生涯三年, 至今恍然醒悟, 发现自己特喵的甚至不会读文档...</li><li><strong>搜索能力、阅读能力、表达能力</strong>, 是容易忽视却重要的技能</li></ul><p><font color="#1A9BFF"><strong>TODO:</strong></font></p><ol><li>man如何在多个标题之间快速跳转?</li><li>man如何显示行号?</li></ol></div><h2 id="man">man</h2><p><em><code>man man</code></em>, 利用man查看man指令的手册.</p><p><strong>基本使用:</strong></p><p>man 是完全按照 vim 的操作方式, 推荐阅读站内博客: <a href="/posts/adff27ce/">【VIM】Vi Improved</a></p><p>比如: q键退出, hjkl翻动等</p><hr><p><strong>下面总结几个重要的概念:</strong></p><h3 id="sections">sections</h3><p>为了处理 linux 不同模块手册中重名问题, 利用section将其区分.</p><p><strong>通过 <code>man -f [cmd]</code> 可以查看对应的section.</strong></p><p>以 <code>passwd</code> 指令为例:</p><ul><li><code>man (1) passwd</code>: changed user password (可执行指令)</li><li><code>man (5) passwd</code>: the password file (文件格式)</li></ul><p>通常情况, <strong>使用 <code>man [cmd]</code> 已经足够满足需求.</strong></p><p>下面列出常用的section:</p><ol><li>可执行程序或 Shell 命令 ⭐</li><li>系统调用（内核提供的函数） ⭐</li><li>库调用 ⭐</li><li>特殊文件（通常位于 /dev 目录）</li><li>文件格式和约定（比如 /etc/passwd）</li><li>游戏</li><li>杂项（包和一些约定) ⭐</li><li>系统管理命令（通常是 root 用户执行的命令）</li><li>内核相关的文件</li></ol><h3 id="headings">headings</h3><p>man手册的输出, 一般有如下几个标题组成:</p><ul><li>Name: 指令名</li><li>Synopsis: 指令的格式概要</li><li>Configuration: Configuration details for a device.</li><li>Description: 指令的详细描述 ⭐</li><li>Options: 指令接收的参数 ⭐</li><li>Examples: 指令的使用样例</li><li>Commands: 指令内置的操作键, 如htop有一个简单的UI界面.</li><li>Defaults: The default functions of the command and how they can be overridden.</li><li>Exit Status: 指令的返回值.</li><li>Environment: 指令相关的环境变量.</li><li>Files: 指令使用到的文件.</li><li>Authors: 开发者和维护者.</li><li>History: 发布历史.</li></ul><h3 id="man-k">man -k</h3><p>但你不确定要搜索的指令/模块名称, <strong>使用 <code>man -k</code> 可搜索所有的手册全文.</strong></p><p><img src="/images/man-k.png" alt=""></p><h2 id="colored-man-pages">colored-man-pages</h2><p>原生的man输出, 没有彩色的样式区分, 可以利用 colored-man-pages 实现.</p><p>阅读站内博客: <a href="/posts/2N8EPP4/">【Shell】oh-my-zsh</a><br>k<br><img src="/images/zsh-man.png" alt=""></p><h2 id="Quote">Quote</h2><ul><li><p><a href="https://phoenixnap.com/kb/linux-man#:~:text=To%20do%20so%2C%20follow%20these%20steps%3A%201%201.,man%20page%20in%20a%20browser%20of%20your%20choice%3A">How to Use man in Linux</a></p></li><li><p><a href="https://unix.stackexchange.com/questions/3586/what-do-the-numbers-in-a-man-page-mean">What do the numbers in a man page mean?</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OS】多线程之pthread</title>
      <link href="/posts/XT9Q9N/"/>
      <url>/posts/XT9Q9N/</url>
      
        <content type="html"><![CDATA[<p>大学时期写了一篇 <a href="https://blog.csdn.net/luhao19980909/article/details/89403233?spm=1001.2014.3001.5502">CSDN: 进程和线程的深入理解</a><br>阅读量接近4w, 回头看很多概念理解比较肤浅…<br>这篇文章会更注重代码层面的理解</p><h2 id="pthread">pthread</h2><ul><li><strong>man pthreads</strong></li></ul><p><em>Linux c</em> 提供 <em>pthread</em> 库用于实现多线程, 可通过 <em><code>man pthreads</code></em> 查阅手册.<br>阅读一遍筛选部分有用信息:</p><ul><li><strong>Description</strong></li></ul><p><code>pthreads</code> 是 POSIX threads 的简写, 它维护了线程相关的若干接口.</p><p><strong>These  threads  share  the same global memory (data and heap segments), but each thread has its own stack (automatic variables).</strong><br>这句很关键, 线程之间共享内存(堆), 但不共享栈.<br>看到没有, linux man 已经给了详细的答案和描述.</p><p><strong>Threads share a range of other attributess:</strong><br>线程间还共享如下属性:</p><pre><code>-  process ID-  parent process ID-  controlling terminal-  open file descriptors-  signal dispositions-  ...</code></pre><ul><li><strong>Thread IDs</strong></li></ul><p><strong>Each  of  the  threads in a process has a unique thread identifier (stored in the type pthread_t).</strong><br><strong>This identifier is returned to the caller of pthread_create(3).</strong><br>这就是俗称的pid (可以通过top指令看到), 它的类型是 <font color="#ef6d3b"><strong>pthread_t</strong></font>.<br>pid是由 pthread_create 第一个参数给出的.</p><ul><li><strong>Thread-safe functions</strong></li></ul><p><strong>A thread-safe function</strong> is one that can be safely (i.e., <strong>it will deliver the same results regardless of whether it is</strong>) called  from multiple threads at the same time.<br>重点+1, 这句直接解释了何为线程安全, 这不比CSDN上的一堆废话来的清晰直接吗?<br>线程安全, 即多线程下随便怎么调用, 结果都是唯一和确定的</p><p>后面接着列出了非线程安全的C函数…</p><ul><li><strong>Compiling on Linux</strong></li></ul><p><strong>On Linux, programs that use the Pthreads API should be compiled using cc -pthread.</strong><br>在linux下使用该API, 需要加上 <code>cc -pthread</code> 的编译选项！<br>直接 <code>include &lt;pthread.h&gt;</code> 以为就万事大吉了? 所以还是得看文档呀~</p><ul><li><strong>LinuxThreads</strong></li></ul><p>这里逐渐将如何使用 linux 多线程, 总结几点如下:<br>1.使用 <code>pthread_create(3)</code> 创建额外的线程, 这里自觉 <code>man 3 pthread_create</code> 查阅手册.<br>2.剩下的实践中再补充吧</p><h2 id="pthread-API">pthread API</h2><p>下面尝试利用pthreads实现 c 的多线程</p><ul><li><font color="#1A9BFF"><strong>pthread_create</strong></font></li></ul><p>这是创建线程的接口, 查看man文档可知:</p><pre><code class="language-c">#include &lt;pthread.h&gt;int pthread_create(pthread_t *thread, const pthread_attr_t *attr,                    void *(*start_routine) (void *), void *arg);</code></pre><ul><li><p>args:</p><ul><li>thread: 即pid</li><li>attr: 创建线程的相关参数, 传NULL即使用默认</li><li>void*: 线程调用的函数</li><li>void&amp; arg: 函数的参数</li></ul></li><li><p>return values:<br><strong>On success, pthread_create() returns 0</strong>; on error, it returns an error number, and the contents of *thread are undefined.<br>即创建成功会返回一个0, 有点像http请求的返回值规则.</p></li><li><p>下面给出一个示例:</p></li></ul><pre><code class="language-c">#include &lt;stdio.h&gt;#include &lt;pthread.h&gt;void *entry(void *arg) {    char *ret;    printf("thread() entered with argument '%s'\n", arg);}void main() {    pthread_t pid;    if (pthread_create(&amp;pid, NULL, entry, "thread 1") != 0) {        printf("pthread_create() error");    }}</code></pre><p>通过 <code>gcc main.c -lpthread &amp;&amp; ./a.out</code> 编译运行, 发现没有任何输出…<br>这里得出猜测, pthread_create 创建的线程不会直接运行<br>查阅文档得知, pthread线程的运行时不确定的, 进一步查阅 <code>pthread_join</code> 相关手册.</p><ul><li><font color="#1A9BFF"><strong>pthread_join</strong></font></li></ul><p><code>int pthread_join(pthread_t thread, void **retval);</code></p><p>作用是等到一个线程运行结束, join函数才会返回.<br>对于上面的 C代码示例, 只需要加一行:</p><pre><code class="language-c">if (pthread_join(pid, NULL) != 0) {}</code></pre><p>然后编译运行, 就可以看到 <code>entry</code> 函数中的正常输出.</p><p>另外, <code>pthread_join</code> 的另一个参数 <code>retval</code>, 可以获取线程的返回值.</p><h2 id="pthread封装">pthread封装</h2><p>Linux pthreads接口不是很好用, 且缺少一个全局的thread管理器.<br>我们可以尝试封装一层: <a href="/code/thread.h">thread.h</a><br>此时我们只需关注 <code>create</code> <code>join</code>这两个函数.<br>后面的所有代码示例都将使用 <code>thread.h</code> 展开.</p><pre><code class="language-c">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdatomic.h&gt;#include &lt;assert.h&gt;#include &lt;unistd.h&gt;#include &lt;pthread.h&gt;#define NTHREAD 64enum { T_FREE = 0, T_LIVE, T_DEAD, };struct thread {  int id, status;  pthread_t thread;  void (*entry)(int);};struct thread tpool[NTHREAD], *tptr = tpool;void *wrapper(void *arg) {  struct thread *thread = (struct thread *)arg;  thread-&gt;entry(thread-&gt;id);  return NULL;}void create(void *fn) {  assert(tptr - tpool &lt; NTHREAD);  *tptr = (struct thread) {    .id = tptr - tpool + 1,    .status = T_LIVE,    .entry = fn,  };  pthread_create(&amp;(tptr-&gt;thread), NULL, wrapper, tptr);  ++tptr;}void join() {  for (int i = 0; i &lt; NTHREAD; i++) {    struct thread *t = &amp;tpool[i];    if (t-&gt;status == T_LIVE) {      pthread_join(t-&gt;thread, NULL);      t-&gt;status = T_DEAD;    }  }}__attribute__((destructor)) void cleanup() {  join();}</code></pre><h2 id="Shared-Memory">Shared Memory</h2><p><a href="https://www.csl.mtu.edu/cs4411.ck/www/NOTES/process/shm/what-is-shm.html">What is Shared Memory?</a></p><ul><li><p><strong>进程间存在共享内存</strong><br>这个很容易解释, 想象一下windows的任务管理器, 或者Linux的top指令等.<br>他们一定可以读取其他进程的若干内存信息 (?).</p></li><li><p><strong>线程间不共享内存(local), 但共享进程间内存(global)</strong><br>线程的局部变量, 是存在栈中的, 之前看pthread man手册, 明确指出线程之间的栈是相互独立的空间.</p></li></ul><div class="admonition warning"><p class="admonition-title">TODO</p><p>关于共享内存先埋个坑, 看到相关的再补充.</p></div><h2 id="Atomic">Atomic</h2><p>从一个经典的问题入手: <a href="/code/sum.c">sum.c</a><br>两个线程分别对一个全局变量++, 最后的结果是多少?</p><pre><code class="language-c">long sum = 0;void Tsum() {  for (int i = 0; i &lt; 1000000; i++) {    sum++;  }}int main() {  create(Tsum);  create(Tsum);  join();  printf("sum = %ld\n", sum);}</code></pre><div class="admonition todo"><p class="admonition-title">WHY?</p><p>基本介于100w~200w之间, 偶尔会出现小于100w的情况.</p><p>先给出结论: <code>sum++</code> 不是一个原子操作, 即非线程安全.</p></div><br><ul><li><strong>为什么<code>++</code>非线程安全?</strong></li></ul><p><a href="https://stackoverflow.com/questions/39393850/can-num-be-atomic-for-int-num">stackoverflow: Can num++ be atomic for ‘int num’?</a></p><p>看汇编代码, <code>num++</code> 实际会拆分为3句汇编指令:<br>这三条指令在多线程中其执行顺序是不确定的.<br>即线程1在read时, 线程2可能在write…</p><pre><code class="language-asm">mov   eax, [num]  // readinc   eax         // addmov   [num], eax  // write</code></pre><br><ul><li><strong>什么是原子操作?</strong></li></ul><p><a href="https://wiki.osdev.org/Atomic_operation">Atomic operation</a><br>即原子操作在执行期间, 没有其他指令同时能够读或写.<br>正因为<code>num++</code> 不是一个原子操作, 才会出现上面的多线程bug.</p><br><ul><li><strong>多线程引发的支付问题</strong></li></ul><p>下面是一段模拟支付宝 扣除100元 的多线程代码:<br>当时尝试运行它, 会发现账户中瞬间多出用不尽的money…<br>这里的问题有两个:</p><ul><li><code>blance -= amt</code>: 它不是一个原子操作</li><li><code>unsigned long</code>: 非整形导致的溢出</li></ul><pre><code class="language-c">#include "thread.h"unsigned long balance = 100;void Alipay_withdraw(int amt) {  if (balance &gt;= amt) {    usleep(1); // unexpected delays    balance -= amt;  }}void Talipay(int id) {  Alipay_withdraw(100);}int main() {  create(Talipay);  create(Talipay);  join();  printf("balance = %lu\n", balance);}</code></pre><h2 id="Paper">Paper</h2><ul><li><p><a href="/posts/2DVYR5A/">如何阅读man手册?</a></p></li><li><p><a href="https://man7.org/linux/man-pages/man7/pthreads.7.html">pthreads(7) — Linux manual page</a></p></li><li><p><a href="https://learn.microsoft.com/en-gb/windows/win32/procthread/about-processes-and-threads?redirectedfrom=MSDN">Microsoft: About Processes and Threads</a></p></li><li><p><a href="https://web.mit.edu/6.005/www/fa14/classes/17-concurrency/">MIT: Concurrency</a></p></li><li><p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/threads-intro.pdf">Three Easy Pieces: Concurrency and Threads</a></p></li><li><p><a href="https://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread">Stackoverflow: What is the difference between a process and a thread?</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/posts/1T7TWH8/"/>
      <url>/posts/1T7TWH8/</url>
      
        <content type="html"><![CDATA[<p>涵盖Node.js, NPM, html, TS/JS…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">NOTE</p><ul><li><p><strong>WHAT is Node.js?</strong><br><a href="https://nodejs.org/en">Node.js</a> is a JavaScript runtime built on Chrome's V8 JavaScript engine.</p></li><li><p><strong>WHAT is NPM?</strong><br><a href="https://www.npmjs.com/">NPM</a> is the standard package manager for Node.js.</p></li><li><p><strong>WHAT is TypeScript?</strong><br><a href="https://www.typescriptlang.org/">TypeScript</a> is Typed JavaScript at Any Scale.</p></li></ul></div><h3 id="Node-js">Node.js</h3><p><code>linux</code> 默认安装比较老旧的 <code>Node.js</code> 版本，需要如下操作以升级：</p><ul><li><code>sudo npm install -g n</code></li><li><code>sudo n stable</code></li></ul><h3 id="TypeScript">TypeScript</h3><p><code>TS</code>默认使用非常严格的静态语法检查，通过如下途径屏蔽它（不推荐）：</p><pre><code class="language-tw">单行忽略// @ts-ignore忽略全文// @ts-nocheck取消忽略全文// @ts-check</code></pre><h3 id="nvm">nvm</h3><p><a href="https://github.com/coreybutler/nvm-windows/">https://github.com/coreybutler/nvm-windows/</a></p><p>nvm 是一个管理多 Node.js 版本的工具, 就像python conda.</p><p>使用: <code>nvm -h</code></p><ul><li><code>nvm list</code>: 查看所有Node.js版本</li><li><code>nvm install xxx</code>: 安装指定版本 (win10需要管理员权限)</li><li><code>nvm use xxx</code>: 切换到指定版本</li></ul><p>install 遇到报错, 是因为无管理员权限<br><code>Error extracting from Node archive: open ...\node-v18.15.0-win-x64\corepack.cmd: Access is denied.</code></p><h3 id="Problems">Problems</h3><p><strong>1. npm如何打包发布到html?</strong></p><p>借助 <code>browserify</code>: <a href="https://cloud.tencent.com/developer/article/1974393">如何在浏览器使用npm包?</a></p><p><strong>2. html调用js方法总结</strong></p><p><a href="https://blog.csdn.net/weixin_45587319/article/details/104776488">CSDN: HTML如何调用JavaScript</a></p><p><strong>3. html中js的相对路径问题</strong></p><p>使用 <code>" {{ assets/extra.css | url }} "</code>, html会自动生成相对路径</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VSCode插件】function decoration</title>
      <link href="/posts/AEKS3P/"/>
      <url>/posts/AEKS3P/</url>
      
        <content type="html"><![CDATA[<h3 id="🏠-vscode-function-decorations"><a href="https://github.com/593413198/vscode-function-decorations">🏠 <em><strong>vscode-function-decorations</strong></em></a></h3><h2 id="原始需求">原始需求</h2><p>某个项目需要通过全局的Env属性来控制函数的可见性, 如下：</p><ul><li><a href="http://Env.py">Env.py</a></li></ul><pre><code class="language-python"># Env.pyFeature_A = TrueFeature_B = FalseFeature_C = True# ...</code></pre><ul><li><a href="http://xxx.py">xxx.py</a></li></ul><pre><code class="language-python">if Env.Feature_A:    def f1():        passif Env.Feature_B:    def f2():        pass</code></pre><h2 id="痛点">痛点</h2><p>当python文件很大, 函数定义很多的时候, 你得往上翻文件并通过对齐来确定函数是属于哪个if的作用域, 这是非常痛苦的.<br>因此希望通过vscode插件解析其作用, 在不同的函数后面显示样式来区分, 如下:</p><p><img src="/images/vscode-decoration.png" alt=""></p><h3 id="python语法解析">python语法解析</h3><p>先借助 <a href="https://docs.python.org/3/library/ast.html">python ast</a> 解析整个语法树<br>只需关注<code>ast.If</code>节点, 将它的body中是<code>ast.FunctionDef</code>的子节点都拿到即可<br>注意, 为了匹配else 还需要拿到其<code>orelse</code>对象</p><p>整体实现思路很简单, 见 <a href="https://github.com/593413198/vscode-function-decorations/blob/main/src/pyast.py"><strong>pyast.py</strong></a></p><h3 id="VScode添加标注">VScode添加标注</h3><p><code>DecorationInstanceRenderOptions</code> 的 <code>after</code>属性, 可以改变尾部的值和样式<br>代码示例:</p><pre><code class="language-js">// 新建一个样式实例const myRenderOptions: DecorationInstanceRenderOptions = {    after: {        contentText: ` # Feature_A`,        fontWeight: 'bold',        color: '#FF00FF',    },}// 控制样式位置和范围dividerRanges.push({    range: ...,    renderOptions: myRenderOptions,})// setDecorations, 切换文件会失效editor?.setDecorations(    dividerDecoration,    dividerRanges,)</code></pre><h3 id="效果展示">效果展示</h3><p><img src="/images/vscode-decoration-demo.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OS】实现指令pstree</title>
      <link href="/posts/3AGXVNM/"/>
      <url>/posts/3AGXVNM/</url>
      
        <content type="html"><![CDATA[<h2 id="提要">提要</h2><p>pstree 是os-2022的一个mini lab: <a href="http://jyywiki.cn/OS/2022/labs/M1">M1: 打印进程树 (pstree)</a><br>主要内容是模拟linux下的<code>pstree</code>的输出</p><pre><code class="language-shell">$ pstreesystemd─┬─YDLive─┬─YDService─┬─sh───13*[{sh}]        │        │           └─23*[{YDService}]        │        └─14*[{YDLive}]        ├─acpid        ├─2*[agetty]        ├─barad_agent─┬─barad_agent        │             └─barad_agent───2*[{barad_agent}]        |         ...</code></pre><h2 id="思路">思路</h2><p>先通过 <strong><code>strace pstree</code></strong> 查看其系统调用, 发现其通过读取linux下 <code>/proc/xxx</code> 的文件实现 (这源自linux <code>everthing is file</code>的思想)</p><pre><code class="language-shell">$ strace pstree# 这句调用pstree的脚本execve("/usr/bin/pstree", ["pstree"], 0x7ffe85396ce0 /* 40 vars */) = 0...# 这句读取了/proc下的文件openat(AT_FDCWD, "/proc", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = 3fstat(3, {st_mode=S_IFDIR|0555, st_size=0, ...}) = 0...# 这句读取/proc/1/stat的文件openat(AT_FDCWD, "/proc/1/stat", O_RDONLY) = 4...</code></pre><p>所以该实验考察的核心内容是:</p><ul><li><code>strace</code> 系统调用</li><li><code>c</code> 读文件</li><li><code>树</code> 数据结构</li></ul><h2 id="代码">代码</h2><p>无脑写完的, 没有什么技巧, 等过完os-2022的课程再回头review一遍此代码, 看是否有提高吧<br>缩进不一, 应该是因为混用tab和space导致, 这个有空处理下Hexo的编码</p><pre><code class="language-c">#include &lt;stdio.h&gt;#include &lt;assert.h&gt;#include &lt;dirent.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;struct Proc{char name[255];unsigned int pid;unsigned int ppid;};struct Proc proc_list[255];int proc_count = 0;int isNumber(char *str){    return strlen(str) == strspn(str, "0123456789");}void walkTree(int ppid, int tabs){// printf("%d:%d", ppid, tabs);for (int i=0; i&lt;proc_count; i++){struct Proc tmp = proc_list[i];if (ppid == tmp.ppid){for (int i=0; i&lt;tabs; i++)printf("---------");printf("%s(%d) [%d]\n", tmp.name, tmp.pid, tmp.ppid);walkTree(tmp.pid, tabs+1);}}}void walkDir(){    DIR *d = opendir("/proc/");    struct dirent *dir;    FILE *fp;    while ((dir = readdir(d)) != NULL)    {        if (isNumber(dir-&gt;d_name) == 0)continue;char path[256] = "/proc/";strcat(path, dir-&gt;d_name);strcat(path, "/status");fp = fopen(path, "r");if (fp == NULL) continue;char buff[256];struct Proc proc;while (fgets(buff, 128, fp) != NULL){char *ptr = strtok(buff, ":");if (ptr){char *val = strtok(NULL, ":");if (strcmp(ptr, "Name") == 0){strncpy(proc.name, val, strlen(val)-1);} else if (strcmp(ptr, "Pid") == 0){proc.pid = atoi(val);} else if (strcmp(ptr, "PPid") == 0){proc.ppid = atoi(val);}}}proc_list[proc_count++] = proc;fclose(fp);    }    closedir(d);}int main(int argc, char *argv[]) {for (int i = 0; i &lt; argc; i++) {assert(argv[i]);printf("argv[%d] = %s\n", i, argv[i]);}assert(!argv[argc]);walkDir();walkTree(0, 1);//printf("%s: %d\n", "12.3", isNumber("12.3"));//printf("%s: %d\n", "123", isNumber("123"));return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【问题求解】Recursion</title>
      <link href="/posts/20ER2MC/"/>
      <url>/posts/20ER2MC/</url>
      
        <content type="html"><![CDATA[<div class="admonition todo"><p class="admonition-title">TODO</p><ol><li>理论: 英文教材 《Chapter 2 Recursion: The Mirrors》</li><li>Leetcode: <a href="https://leetcode.cn/tag/recursion/problemset/">递归专题</a> | <a href="https://leetcode.cn/circle/article/OqbWl5/">递归blog</a></li><li>Recursion | Devide-and-Conquer | DP</li></ol></div><h2 id="Recursion-Mirrors">Recursion = Mirrors</h2><ul><li><em><strong>Recursion breaks a problem into smaller identical problems.</strong></em></li></ul><p>想象两面镜子正对着放在一起, 其中会无限产生倒映, 并且越来越小以至于肉眼看不见.<br>递归的本质, 就是将问题逐渐拆分成更小规模的问题, 以至于能被简单解决.</p><h3 id="How-to-search-a-word">How to search a word</h3><p>书中以 “在英文字典查词 <code>vademecum</code>” 为例, 阐述了两种方法:</p><ul><li><p><strong>Sequential search</strong><br>从字典第一个单词开始, 按顺序逐个查询…</p></li><li><p><strong>Binary search</strong><br>翻到字典一半位置, 根据首字母确定在前半部还是后半部, 然后接着翻到一半位置, 循环下去…<br>直到翻到只剩一页, 就停止循环, 在此页查找</p></li></ul><p>这就是一个经典的递归思想.</p><h3 id="2-x-Features-⭐">2 x Features ⭐</h3><p>递归思想解决问题, 符合如下2个特征:</p><ul><li><strong><code>base-CASE</code></strong>: 递归会终止于一个简单的问题</li><li><strong><code>降维</code></strong>: 每次递归都会调用自身, 并解决一个规模更小的问题</li></ul><h2 id="Recursion-Problems">Recursion Problems</h2><h3 id="Factorial-N">Factorial N</h3><p>先以阶乘为例, 阐述上面的特征:</p><p>$factorial(n) = n \times (n-1) \times (n-2) \times … \times 1$</p><ul><li>$f(1) = 1$<ul><li>这是一个base case, 因为它是最小的正整数, 是终止条件</li></ul></li><li>$f(n) = f(n-1) \times n$<ul><li>每次通过调用自身缩小了问题规模</li></ul></li></ul><p>python程序如下:</p><pre><code class="language-python">def fact(n):    if n == 1:        return 1    return n * fact(n - 1)</code></pre><h3 id="String-Backward">String Backward</h3><p><strong>字符串倒置问题</strong>, 这是递归中稍难的问题, 因为没有返回值, 它不再像 Factorial那样直观<br>以此为例, 阐述解决递归问题的思路：</p><ul><li><strong>找到<code>base-CASE</code></strong>: 长度为1的字符串, 倒置即是本身</li><li><strong>找到降维方式</strong>:<ul><li>已知n-1字符的倒置, 如何求n字符的倒置?</li><li>即S[n] + S[1…N-1]</li></ul></li></ul><p>python程序如下:</p><pre><code class="language-python">def write_backward(s):    if len(s) == 1:        print s    else:        print s[-1]        write_backward(s[:-1])</code></pre><h3 id="Binary-Search">Binary Search</h3><p><strong>二分查找</strong>, 这是计算机最经典的问题, 生活中也经常用到这个类思想.<br>任何情境下的二分问题,只需要想清楚如下2点:</p><ul><li>什么是<code>base-CASE</code>? 它确保二分能停止</li><li>选左半边? 还是选右半边?</li></ul><p>例如对一个有序数组作二分查找:</p><ul><li><code>base-CASE</code>: array[i] == target 或者 left &gt;= right</li><li>选择: 根据大小关系很容易选</li></ul><p>python程序如下:</p><pre><code class="language-c">int binarySearch(const int&amp; Array[], int left, int right, int target) {    if (left &gt; right)        return -1; // not found    int mid = (left + right) / 2;    if (Array[mid] == target)        return mid; // find it    else if (Array[mid] &lt; target)        // find right        return binarySearch(Arrary, mid, right, target)    else        // find left        return binarySearch(Arrary, left, mid, target)}</code></pre><h3 id="Find-Largest">Find Largest</h3><p>二分查找每一半的最大值</p><pre><code class="language-python">def findLargest(arr):    if len(arr) == 1:        return arr[0]    mid = len(arr) / 2    return max(arr[:mid], arr[mid:])</code></pre><h3 id="Find-k-th-Largest">Find $k_{th}$ Largest</h3><h3 id="Combination-of-C-k-n">Combination of $C^{k}_{n}$</h3><h3 id="Hanoi-Tower-⭐">Hanoi Tower ⭐</h3><p>这有个 <a href="https://www.mathsisfun.com/games/towerofhanoi.html">网站演示demo</a></p><div class="admonition warning"><p class="admonition-title">WARNING</p><p>这些算法待实现, 存在一定难度, 尤其是汉诺塔</p></div><h2 id="Recursion-Complexity-⏳">Recursion Complexity ⏳</h2><p>递归算法的效率往往不高, 因为任何编程语言的函数调用开销都较大.<br>可以通过使用迭代避免, 以Faborial为例:</p><pre><code class="language-python">def fact(n):    ans = 1    for i in range(1, n+1):        ans * = i    return ans</code></pre><h2 id="Leetcode-递归专题">Leetcode <a href="https://leetcode.cn/tag/recursion/problemset/">递归专题</a></h2><p>这里选取了几个最经典的算法题:</p><ul><li>斐波那契</li><li>反转链表</li></ul><h3 id="509-Fibonacci-Number"><a href="https://leetcode.cn/problems/fibonacci-number/">509. Fibonacci Number</a></h3><blockquote><p>F(0) = 0, F(1) = 1<br>F(n) = F(n - 1) + F(n - 2), for n &gt; 1.<br>计算F(n), 0&lt;=n&lt;=30</p></blockquote><h4 id="递归">递归</h4><pre><code class="language-c++">int fib(int n) {    return n &lt; 2 ? n : fib(n - 1) + fib(n - 2);}</code></pre><p>尝试用主定理分析一波复杂度:<br>$T(n) = 2 T(n)$</p><p>等比数列求和得到复杂度: $O(2^n)$, 空间复杂度: $O(1)$</p><p>尝试优化一下:<br><code>fib(n-1)</code>和<code>fib(n-2)</code>中间有很多是重复的运算, 可以作一个存储</p><h4 id="递归-缓存">递归 -&gt; 缓存</h4><pre><code class="language-c++">int fib(int n) {    // n &lt;= 30    int cache[31] = {0, 1};    for (int i=2; i&lt;=n; i++)        cache[i] = cache[i-1] + cache[i-2];    return cache[n];}</code></pre><p>通过数组存储, 避免了重复计算, 这里复杂度很容易分析:<br>时间$O(n)$, 空间也是$O(n)$</p><h4 id="进一步优化">进一步优化</h4><p>那么是否有办法优化掉$O(n)$的空间呢?<br>尝试使用多个局部变量即可<br>即a, b, c, 三者分别代表$fib(n)$, $fib(n-1)$, $fib(n-2)$:</p><pre><code class="language-c++">int fib(int n) {    if (n &lt; 2) return n;    int a = 1,  b = 0;    int c = a + b;    for (int i=3; i&lt;=n; i++)    {        b = a;        a = c;        c = a + b;    }    return c;}</code></pre><p>他是复杂度为:<br>时间$O(n)$, 空间$O(1)$</p><h3 id="206-Reverse-Linked-List"><a href="https://leetcode.cn/problems/reverse-linked-list/">206. Reverse Linked List</a></h3><blockquote><p>反转链表, 并返回链表head</p></blockquote><h4 id="递归-2">递归</h4><p>先尝试递归的解法, 按照递归的两个特性尝试理解:</p><ul><li><code>base-CASE</code>: 链表长度为1, 此时反转即本身</li><li><code>降维</code>: 长度为n的链表, 反转为 $R_{n}$ + $R^{'}_{1 - (n-1)}$</li></ul><p>实现的技术细节不是很直观, 因为利用了递归中函数调用的栈特性<br>如下 <code>next_node</code> 其实会一直调用下去, 直到最后一个尾节点, 然后才会执行<code>head-&gt;next-&gt;next=head</code>那两行代码.<br>即真实执行的顺序, 是<strong>从尾部到头部</strong> !<br>这个leetcode题解有动画演示, <a href="https://leetcode.cn/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/">跳转链接</a></p><pre><code class="language-c++">ListNode* reverseList(ListNode* head) {    if (head == nullptr || head-&gt;next == nullptr){        return head;    }    ListNode* next_node = reverseList(head-&gt;next);    head-&gt;next-&gt;next = head;    head-&gt;next = nullptr;    return next_node;}</code></pre><p>照例分析复杂度: 时间$O(n)$, 空间$O(1)$</p><h4 id="双指针">双指针</h4><p>其实是单指针的方法, 利用<code>head-&gt;next</code>来更新节点, <code>cur</code>当做指针移动:<br>这个leetcode题解有动画演示, <a href="https://leetcode.cn/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/">跳转链接</a></p><pre><code class="language-c++">ListNode* reverseList(ListNode* head) {    ListNode* cur = head;    while (head &amp;&amp; head-&gt;next)    {        ListNode* next_next = head-&gt;next-&gt;next;        head-&gt;next-&gt;next = cur;        cur = head-&gt;next;        head-&gt;next = next_next;    }    return cur;}</code></pre><p>复杂度和递归的方案一致</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题求解与算法</title>
      <link href="/posts/3HZHSCW/"/>
      <url>/posts/3HZHSCW/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">理论书籍</p><ul><li><a href="https://dokumen.tips/documents/data-abstraction-problem-solving-with-c-walls-and-mirrors-6th-edition.html">《Data Abstraction &amp; Problem Solving with C++》</a></li></ul></div><h2 id="目录">目录</h2><table><thead><tr><th style="text-align:left">专题</th><th style="text-align:left">Blog</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:left">Sorting</td><td style="text-align:left"><a href="/posts/1CKQG3J/">【Algorithm】Sorting</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Recursion</td><td style="text-align:left"><a href="/posts/20ER2MC/">【问题求解】Recursion</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Hash</td><td style="text-align:left"><a href="/posts/7BBSAYB/">【问题求解】Hash Map</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">String-matching</td><td style="text-align:left"><a href="/posts/1RJC6HF/">【Algorithm】String matching</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Binary-tree</td><td style="text-align:left"><a href="/posts/1E2J1Y0/">【Algorithm】BinaryTree</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Graphs</td><td style="text-align:left"><a href="/posts/2W1G2XP/">【Algorithm】Graphs</a></td><td style="text-align:center"></td></tr></tbody></table><p><img src="/images/algorithms-all.png" alt=""></p><h2 id="时间复杂度分析">时间复杂度分析</h2><p>递归和分治法, 可以通过主定理计算:<br>假设每次递归, 拆分为 $a$ 个规模是 $\frac{n}{b}$ 的子问题, 额外计算量是$f(n)$<br>$$T(n) = aT(\frac{n}{b}) + f(n)$$<br>则时间复杂度为:<br><img src="/images/master_theorem.png" alt=""></p><p>参考链接:</p><ul><li><a href="https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)">wikipedia: Master theorem</a></li><li><a href="https://blog.csdn.net/caozhk/article/details/24734371">主定理的证明及应用举例</a></li></ul><h2 id="附录">附录</h2><ul><li><a href="https://programmercarl.com/">算法随想录</a></li><li><a href="https://leetcode.cn/circle/discuss/E3yavq/">leetcode刷题攻略</a></li><li><a href="http://www.btechsmartclass.com/data_structures/introduction-to-algorithms.html">Data-Structures</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日志】2023年4月</title>
      <link href="/posts/2023/4/"/>
      <url>/posts/2023/4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="76a2277ae896c6b5980267a2882d582b7e5efb5514a778ea0567f822f56a5dae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态网页搜索引擎</title>
      <link href="/posts/2F3J6A9/"/>
      <url>/posts/2F3J6A9/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">背景提要</p><p>在使用 <a href="https://www.mkdocs.org/"><strong>python-mkdocs</strong></a> 生成内部文档时, 其内嵌的搜索非常难用, 奇卡无比且不支持中文</p><p>因此萌生了写一个简易静态搜索引擎的想法</p></div><h2 id="搜索方案">搜索方案</h2><h4 id="常见的搜索有两种实现">常见的搜索有两种实现:</h4><ul><li><ol><li>接入 <strong>Baidu, Google</strong> 等搜索引擎的爬取, 然后利用他们的搜索接口去搜</li></ol><ul><li>适用于ip公开的网页, 好处是搜索快且功能全</li><li>坏处是, 不太好做输入的实时预览?</li></ul></li><li><ol start="2"><li>静态搜索网页内容, 适用于个人博客、内部站点</li></ol><ul><li><strong>本文讨论的就是这种方案</strong></li></ul></li></ul><h4 id="实现步骤">实现步骤</h4><ol><li>解析markdown语法树</li><li>按照一定规则将解析结果写入Json</li><li>实时搜索时调用fast-fuzzy搜索</li><li>html前端展示搜索结果</li></ol><h3 id="markdown语法树解析">markdown语法树解析</h3><p>借助 <a href="https://pypi.org/project/commonmark/"><strong>python-commonmark</strong></a> 实现</p><pre><code class="language-python">import commonmark"""MdParser: 解析一个md, 返回所有正文"""parser = commonmark.Parser()class MdParser(object):    def __init__(self):        self.visited = set()        self.content = defaultdict(list)        self.all_content = []        self.head = ''        def entry(self, path):        with open(path, encoding='utf-8') as f:            string = f.read()            root = parser.parse(string)            self._walk(root)    def _parse_children(self, node):        if node in self.visited:            return        child = node.first_child        while child:            if child.literal and child.t != 'code_block':                self.content[self.head].append(child.literal)                self.all_content.append(child.literal)            child = child.nxt        self.visited.add(node)            def _walk(self, root):        for node in root.walker():            if node[1]:                node = node[0]                if node.t == 'heading':                    self.head = node                self._parse_children(node)        def dump(self):        content = '.'.join(self.all_content)        # fix special character        content = content.replace(' ', '').\                        replace('，', ',').\                        replace('!.!.!.', '').\                        replace('\t', ' ').\                        replace('img.', ' ')        return content</code></pre><h3 id="生成数据search-json">生成数据search.json</h3><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:left">Value</th></tr></thead><tbody><tr><td style="text-align:center">title</td><td style="text-align:left">h1标题</td></tr><tr><td style="text-align:center">text</td><td style="text-align:left">正文</td></tr><tr><td style="text-align:center">link</td><td style="text-align:left">跳转链接</td></tr></tbody></table><ul><li>如下遍历一个目录下的所有md, 并将结果写入一个json, 供搜索用</li></ul><pre><code class="language-python">import osimport json"""MdWalker: 解析路径下所有md"""index_output_path = ''output_path = './search.json'class MdWalker(object):    def __init__(self):        self.output = {'all': []}    def entry(self, folder):        # read index        f = open(index_output_path, 'r', encoding='utf-8')        index_json = json.load(f)        f.close()        # walk *.md        for root, _, files in os.walk(folder):            for _file in files:                if not _file.endswith('.md'):                    continue                path = os.path.join(root, _file)                md = MdParser()                md.entry(path)                file_name = _file.split('.')[0]                index_info = index_json.get(file_name, {})                self.output['all'].append({                    'title': index_info.get('title', file_name),                    'text': md.dump(),                    'link': index_info.get('link', '.'),                })        # dump to output_path        self.dump()        def dump(self):        with open(output_path, 'w', encoding='utf-8') as f:            json.dump(self.output, f, ensure_ascii=False, indent=4)</code></pre><h3 id="fast-fuzzy模糊搜索">fast-fuzzy模糊搜索</h3><p>借助 <a href="https://www.npmjs.com/package/fast-fuzzy"><strong>Node.js: fast-fuzzy</strong></a> 实现<br>使用方法直接看文档</p><h3 id="html展示搜索结果">html展示搜索结果</h3><p>考虑复用mkdocs原有的前端框架, 或者找一个带滚动条的容器<br>采用这个html样式: <a href="https://www.shouce.ren/study/api/s/framework7--swipeout-overswipe.html">swipeout-overswipe</a></p><h3 id="其他问题">其他问题</h3><p>参考这篇: <a href="https://luhao.wiki/posts/1T7TWH8/">Node.js (站内文章)</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OS】调试理论与实践</title>
      <link href="/posts/2F2QH5R/"/>
      <url>/posts/2F2QH5R/</url>
      
        <content type="html"><![CDATA[<div class="admonition error"><p class="admonition-title">牢记两条定律</p><ul><li><p>机器永远是对的</p></li><li><p>未测代码永远是错的</p></li></ul></div><h3 id="Bug产生原理">Bug产生原理</h3><ul><li><p>代码错 <font color="#FF1E10"><strong>Bug</strong></font> -&gt; 程序状态错 <font color="#FF1E10"><strong>Error</strong></font>  -&gt; 可观测错 <font color="#FF1E10"><strong>Failure</strong></font></p><p><strong>代码错</strong>，通过阅读代码发现是比较困难的<br><strong>程序状态错</strong>，是可以通过状态机（断点调试）一步一步定位出来的<br><strong>可观测错</strong>，如Segmentation Fault、如Wrong Answer，是发掘Bug最主要的途径</p></li><li><p>因此debug最佳的方式，是 <strong>让Bug尽早暴露出来</strong></p><ul><li>二分</li><li>使用assert</li><li>使用print (注意是debug环境下…)</li></ul></li></ul><h3 id="gdb">gdb</h3><ul><li><p><a href="https://luhao.wiki/posts/3DJGDAE/">汇编（四）：gdb调试</a></p></li><li><p>为什么gdb可以暂停程序的运行?</p></li></ul><p>一般的debug都是利用 <strong>软中断</strong>，即将系统调用<code>INT 3</code> 注入汇编代码<br>明白此原理，可以自己实现一个gdb调试程序!</p><h3 id="vscode断点调试原理">vscode断点调试原理</h3><p>现代编辑器（&amp;IDE）为每款语言都实现了一套自己的debug工具<br>如 <a href="https://github.com/microsoft/ptvsd">ptvsd</a> 就是vscode对python的debug工具<br>如下<code>main.py</code>:</p><pre><code class="language-python">import timewhile 1:    time.sleep(1)</code></pre><p>运行时需要加入ptvsd选项，默认端口是5678<br><code>python -m ptvsd --host localhost .\main.py</code></p><p>对vscode的<code>launch.json</code>加入如下配置:</p><pre><code class="language-json">{    "version": "0.2.0",    "configurations": [        {            "name": "Client: Python Attach",            "type": "python",            "request": "attach",            "port": 5678,            "host": "127.0.0.1",        },    ]}</code></pre><p>此时启动vscode 的f5，就可以愉快的断点调试了!</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Shell】oh-my-zsh</title>
      <link href="/posts/2N8EPP4/"/>
      <url>/posts/2N8EPP4/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">NOTE</p><p><a href="https://ohmyz.sh/">oh-my-zsh</a> 是一款具有高亮和丰富插件的跨平台终端</p><p>已亲测在Linux、Win10、MacOs上使用</p></div><p><img src="/images/zsh.png" alt=""></p><h2 id="安装">安装</h2><p>需要先安装 zsh：<code>sudo apt-get install zsh</code></p><p>官方文档给的是:<br><code>sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code><br>但是这个链接可能会被墙，因此使用国内代理:<br><code>sh -c "$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)"</code><br>接着执行<code>install.sh</code>，如果速度仍然很慢，修改其中内容:</p><pre><code class="language-bash"># 这是旧的配置REPO=${REPO:-ohmyzsh/ohmyzsh}REMOTE=${REMOTE:-https://github.com/${REPO}.git}</code></pre><p>更改为:</p><pre><code class="language-bash"># 这是新的配置REPO=${REPO:-mirrors/oh-my-zsh}REMOTE=${REMOTE:-https://gitee.com/${REPO}.git}</code></pre><hr><p>Linux的默认shell一般是<code>/bin/bash</code><br>可以通过<code>echo $SHELL</code>查看环境变量</p><p>设置zsh为默认shell, 重新打开shell后生效<br><code>sudo chsh -s /bin/zsh</code></p><h2 id="zsh插件">zsh插件</h2><p>zsh插件基本是通过<code>.sh</code>实现的, 通过编辑<code>~/.zshrc</code>修改:<br>通过<code>source ~/.zshrc</code>使其生效</p><pre><code class="language-python">plugins=(    git    zsh-autosuggestions    colored-man-pages    # ...)</code></pre><h4 id="zsh-git">zsh-git</h4><p>这个是默认配在plugins的, 会显示当前的git branch, 如图：</p><p><img src="/images/zsh-git.png" alt=""></p><h4 id="zsh-autosuggestions"><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></h4><ul><li><code>git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></li><li><code>source ~/.zshrc</code></li></ul><p>会自动根据历史、剪切板、推荐等补全shell输入，如图：<br>注意，右键是补全</p><p><img src="/images/zsh-auto.png" alt=""></p><h4 id="colored-man-pages"><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colored-man-pages">colored-man-pages</a></h4><p>彩色显示<code>man</code>，查手册非常有效</p><p><img src="/images/zsh-man.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode</title>
      <link href="/posts/3HCBFZ8/"/>
      <url>/posts/3HCBFZ8/</url>
      
        <content type="html"><![CDATA[<p>涵盖vscode源码、插件、使用技巧…<span id="more"></span></p><div class="admonition note"><p class="admonition-title">其他站内文章</p><ul><li><a href="/posts/1RVNF84/">vscode 多种语言断点调试</a></li></ul></div><h2 id="源码">源码</h2><blockquote><p><a href="https://github.com/microsoft/vscode"><em>github: microsoft/vscode</em></a></p></blockquote><p><strong>Windows build</strong></p><p>限制node.js版本最好使用: <code>v16.19.0</code><br>安装yarn: <code>npm install -g yarn</code></p><ul><li><p><code>git clone git@github.com:microsoft/vscode.git</code></p></li><li><p><code>.\scripts\code.bat</code></p></li><li><p><code>yarn watch</code>: 任何源码修改会自动reload</p></li></ul><p><strong>Linux build</strong><br>还没成功, Linux谁用vscode…</p><h2 id="vscode-插件">vscode 插件</h2><p><strong>推荐插件只有如下几个:</strong></p><ul><li><p><strong>Remote-SSH</strong><br>远程连接服务器开发必备, 太爽了!<br>建议在其config中配置所有常用服务器的ip, 别名, 然后直接在<code>Remote-Explore</code>中快速连接</p></li><li><p><strong>Bookmarks</strong><br>快速在代码指定行添加标签, 方便跳转<br>推荐快捷键改为:</p><ul><li><code>ctrl + →</code>: 添加mark</li><li><code>ctrl + ←</code>: 取消mark</li><li><code>ctrl + ↑↓</code>: 跳转</li></ul></li><li><p><strong>Live Server</strong><br>网页开发必备, 快速其一个本地的server</p></li></ul><hr><p><strong>自研插件:</strong></p><ul><li><strong>vscode-function-decoration</strong> <a href="https://luhao.wiki/posts/AEKS3P/">博客</a> | <a href="https://github.com/593413198/vscode-function-decorations">Github</a></li></ul><p>为Python函数增加标识, 以区分是哪个if包围.</p><ul><li><strong>vscode-markdown-snippet</strong> <a href="https://luhao.wiki/posts/2167JH4/">博客</a> | <a href="https://github.com/593413198/VScode-Markdown-Snippet">Github</a></li></ul><p>提供markdown的常用样式插入</p><h2 id="使用技巧">使用技巧</h2><p><strong>0. Tasks</strong></p><p>自定义vscode执行任务<br>相当于快速执行某个bat/shell脚本</p><p><strong>1. 区分顶部窗口颜色</strong></p><p>当work-space项目较多, 可以在<code>setting.json</code>下作颜色区分.<br>active代表选中, inactive代表未选中的颜色</p><pre><code class="language-xml">"titleBar.activeBackground": "#583e63","titleBar.inactiveBackground": "#583e6399",</code></pre><p><strong>2. editor和terminal切换</strong><br>作为VSCode terminal的重度使用者, 经常需要在其与编辑器界面切换<br>推荐绑定<code>ctrl+</code>, 在<code>Keybord Shortcuts</code>配置如下快捷键即可:</p><pre><code class="language-xml">{     "key": "ctrl+j",     "command": "workbench.action.focusPanel"},{     "key": "ctrl+j",     "command": "workbench.action.focusActiveEditorGroup",     "when": "panelFocus"}</code></pre>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OS】程序与状态机</title>
      <link href="/posts/22MGG22/"/>
      <url>/posts/22MGG22/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">先理解两个概念:</p><ul><li><font color="#ef6d3b"><strong>程序是 状态机</strong></font></li><li><font color="#ef6d3b"><strong>程序 = 计算 + SYS_call</strong></font></li></ul></div><h3 id="如何模拟一个数字电路">如何模拟一个数字电路?</h3><p>假设有两个寄存器，X和Y，取值分别为0和1<br>每次执行下面的动作:</p><ul><li><code>X′= ¬X ∧ Y</code></li><li><code>Y′= ¬X ∧ ¬Y</code></li></ul><p>则对应下面三种状态的转移，每个转移对应cpu一个时钟周期：</p><ul><li><code>X=0 Y=0</code></li><li><code>X=0 Y=1</code></li><li><code>X=1 Y=0</code></li><li><code>循环...</code></li></ul><p>这就是一个简单程序的数字电路视角，下面是C代码的实现:<br><code>gcc -E main.c</code> 可以展开宏</p><pre><code class="language-c">#define REGS_FOREACH(_)  _(X) _(Y)#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \                         Y1 = !X &amp;&amp; !Y;#define DEFINE(X)        static int X, X##1;#define UPDATE(X)        X = X##1;#define PRINT(X)         printf(#X " = %d; ", X);int main() {    REGS_FOREACH(DEFINE); // 展开: static int X, X1;    while (1) { // clock        RUN_LOGIC; // 展开: X1 = !X &amp;&amp; Y;        REGS_FOREACH(PRINT); // 展开: printf("X" "=%d;" X)        REGS_FOREACH(UPDATE); // 展开: X = X1;        putchar('\n'); sleep(1);    }    return 1;}</code></pre><p>示例代码:</p><ul><li><a href="/code/logisim.c">logisim.c</a></li><li><a href="/code/seven-seg.py">seven-seg.py</a></li></ul><h3 id="C程序的状态机">C程序的状态机</h3><ul><li>状态 = stack frame + 全局变量</li><li>初始状态 = main(argv, argv)</li><li>转移 = 执行pc处指令，pc++</li></ul><p>就是这么简单！结合上面的代码更容易理解。</p><h3 id="模拟一个C程序的函数调用">模拟一个C程序的函数调用</h3><ul><li><a href="/code/hanoi-r.c">hanoi-r.c</a></li><li><a href="/code/hanoi-nr.c">hanoi-nr.c</a></li></ul><h3 id="二进制程序的状态机">二进制程序的状态机</h3><ul><li>状态 = M(内存) + R(寄存器), 所有能存储数据的东西</li><li>初始状态 = ？</li><li>转移 = 执行pc处指令</li></ul><h3 id="程序-计算-syscall">程序 = 计算 + syscall</h3><p>最基础的main函数都是通过syscall系统调用实现的<br>假设没有syscall，你甚至都不能让程序返回or停止！</p><p>如下是一个最简单的没有syscall的C程序</p><pre><code class="language-c">// main.cvoid _start() {}</code></pre><p>可以通过<code>gcc -c main.c &amp;&amp; objdump -d main.o &amp;&amp; ld main.o</code>的方式编译链接它<br>但当执行<code>a.out</code>时，得到<code>Segmentation fault</code></p><p>尝试用gdb去调试这个程序，得到汇编如下：</p><pre><code class="language-as">0x401000 &lt;_start&gt;       push   %rbp0x401001 &lt;_start+1&gt;     mov    %rsp,%rbp0x401004 &lt;_start+4&gt;     nop0x401005 &lt;_start+5&gt;     pop    %rbp0x401006 &lt;_start+6&gt;     ret</code></pre><p>下面将打印每步执行后的寄存器和堆栈的值：</p><table><thead><tr><th style="text-align:left">汇编</th><th style="text-align:center">rsp</th><th style="text-align:center">rip</th><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:left">初始</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0x0001, 0x0000</td></tr><tr><td style="text-align:left">push %rbp</td><td style="text-align:center">- 8</td><td style="text-align:center"></td><td style="text-align:center">0x0000, 0x0001</td></tr><tr><td style="text-align:left">mov  %rsp,%rbp</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">pop  %rbp</td><td style="text-align:center">+ 8</td><td style="text-align:center">0x0</td><td style="text-align:center">0x0001, 0x0000</td></tr><tr><td style="text-align:left">ret</td><td style="text-align:center">+ 8</td><td style="text-align:center">0x1</td><td style="text-align:center">0x0000, 0x0000</td></tr></tbody></table><p>最后执行ret时，rip的值是0x1，这意味着要取0x1地址上的指令去执行<br>但是0x1的内存是无法访问的！<br>因此报错 segmentation fault</p><hr><p>课程资料: NJU-OS2022 jyy</p><ul><li><a href="http://jyywiki.cn/OS/2022/slides/2.slides">ppt: 操作系统上的程序</a></li><li><a href="https://www.bilibili.com/video/BV12L4y1379V/?spm_id_from=333.880.my_history.page.click&amp;vd_source=db26a19e4b4372574c8ebde86f9333bd">b站: 南京大学2022操作系统-P2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Slidev】基于Markdown的Web-PPT</title>
      <link href="/posts/2CQGWAY/"/>
      <url>/posts/2CQGWAY/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">NOTE</p><ul><li><a href="https://sli.dev/">slidev官网</a></li><li><a href="https://stackblitz.com/edit/slidev-nrxvdx?file=slides.md">slidev在线编辑器</a></li><li><a href="https://demo.sli.dev/starter/1">slidev demo</a></li></ul><p><code>slidev</code>是一款基于markdown语法，基于vite/vue3搭建的开源powerpoint工具，它的最大优势是可以部署在任何网站上，以实现快速、轻便访问目的</p></div><h3 id="使用">使用</h3><div class="admonition warning"><p class="admonition-title">WARNING</p><p>下面这部分看官网文档...</p></div><ul><li><p><code>npm install @slidev/cli @slidev/theme-default</code></p></li><li><p><code>npm init slidev</code>: 初始化一个slidev工程</p></li><li><p><code>slidev build</code>: 项目默认发布到<code>./dist</code>目录</p></li><li><p><code>slidev</code>: 默认以<code>localhost:3030</code>的域名进行预览</p></li></ul><h2 id="演讲者模式">演讲者模式</h2><p>使用<code>http://localhost:3030/presenter</code><br>可以查看注释，并且能同步操作另一处ppt的显示<br>todo：此功能无法用于发布场景</p><h2 id="VSCode快速开发">VSCode快速开发</h2><p>插件：<a href="https://marketplace.visualstudio.com/items?itemName=antfu.slidev"><strong>antfu.slidev</strong></a></p><p><img src="/images/slidev-dev.png" alt=""></p><h2 id="如何编写自己的theme">如何编写自己的theme?</h2><p>所有主题开发遵循npm包规范，且存放在<code>./node-modules</code><br>通过md中<code>theme: default</code>来指定选择的主题</p><p>为了适应公司内分享的ppt需求，特维护了一个slidev theme:<br><a href="https://github.com/593413198/slidev-theme-beautiful"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> slidev-theme-beautiful</a></p><h3 id="如何部署到服务器">如何部署到服务器?</h3><p><code>slidev build</code>会在当前<code>./dist</code>下生成所有的依赖资源，<code>./dist/index</code>即为访问的ppt主页</p><ul><li>需要将<code>./dist</code>拷贝到对应服务器下，就能通过浏览器在线访问</li><li><code>slidev build --base './'</code> 防止以下的路径使用绝对路径</li></ul><pre><code class="language-html">  &lt;script type="module" crossorigin src="/root/hexo-workspace/source/assets/index-aaad8f94.js"&gt;&lt;/script&gt;  &lt;link rel="stylesheet" href="/root/hexo-workspace/source/assets/index-43f0699a.css"&gt;</code></pre><h2 id="编写规范">编写规范</h2><h4 id="全局配置">全局配置</h4><p>相关配置可以阅读源码：<a href="https://github.com/slidevjs/slidev/blob/main/packages/types/src/config.ts">💡 config.ts</a></p><p>官方推荐的主题：<a href="https://cn.sli.dev/themes/gallery.html">themes 合集</a></p><pre><code class="language-python">theme: seriph # ppt主题background: https://source.unsplash.com/collection/94734566/1920x1080 # ppt背景图class: text-center # 字体对齐方式highlighter: shiki # 代码高亮格式lineNumbers: false # 是否显示行号drawings:  persist: falsetransition: slide-left # ppt跳转方式</code></pre><h4 id="矢量Icons">矢量Icons</h4><p>借助 <a href="https://pictogrammers.com/"><strong>pictogrammers</strong></a> 实现ICONS自由:<br>先在官网查到icon名称, 如<code>unity</code>, 然后在md中插入:<br><code>&lt;mdi-unity/&gt;</code></p><h4 id="transition-跳转">transition 跳转</h4><ul><li><code>fade, fade-out</code> - 淡出</li><li><code>slide-left, slide-right</code> - 左右移出</li><li><code>slide-up, slide-down</code> - 上下移出</li></ul><h4 id="class-对齐方式">class 对齐方式</h4><ul><li><code>text-center</code>: 居中对齐, 一般用于首页</li></ul><h4 id="代码">代码</h4><pre><code class="language-c">// ```ts {2-3}// 表示从2-3行高亮// ```ts {2-3|4-5|all}// 每次显示不同的高亮, 2-3 -&gt; 4-5 -&gt; 全部// ```ts {monaco}// 可以运行编辑器</code></pre><h3 id="主题示例">主题示例</h3><ul><li>一个具备图片轮播的主题<br>github: <a href="https://github.com/godkun/ppt-template">https://github.com/godkun/ppt-template</a><br>示例: <a href="https://ppt.godkun.top/#/4">https://ppt.godkun.top/#/4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Apache】搭建文件服务器</title>
      <link href="/posts/5S5T02/"/>
      <url>/posts/5S5T02/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li>文件服务器: <a href="http://110.42.228.178/">http://110.42.228.178/</a></li><li>旧服务器地址即将到期（2023.6.24），已经迁移完毕</li></ul></div><h2 id="apache2-介绍">apache2 介绍</h2><p><a href="https://httpd.apache.org/"><strong>Apache2</strong></a> 又称为 httpd，它是一款开源的网页文件服务器，由于其安全性和可靠的跨平台性，被广泛使用。</p><ul><li>安装：<code>apt-get install apache2</code></li><li>启动服务：<code>systemctl start apache2</code></li><li>停止服务：<code>systemctl stop apache2</code></li><li>重启服务：<code>systemctl restart apache2</code></li></ul><p>Apache2 配置:</p><ul><li>配置文件：<code>/etc/apache2/apache2.conf</code></li><li>字体配置：<code>/etc/apache2/conf-enabled/charset.conf</code></li></ul><p>文件服务器的根目录（默认）：<strong><code>/var/www/html</code></strong></p><div class="admonition warning"><p class="admonition-title">默认显示</p><ul><li>Apache默认展示的网页是 <code>index.html</code>，需要将其删除。</li><li>之后添加文件就能在服务器上看到</li></ul></div><h2 id="内容规划">内容规划</h2><p>该文件服务器主要用于存储一些文件，以方便在不同机器随时访问、以及起到备份的作用。<br>大概分为如下几类：</p><ul><li>pdf：一些书籍、资料、ppt等</li><li>tools：一些工具的安装包（支持正版）</li><li>…</li></ul><h2 id="疑难">疑难</h2><h3 id="软链目录">软链目录</h3><p><code>/var/www/html</code> 目录藏得太深，我们希望软链一个外层的目录，这样更容易修改和获取它：</p><ul><li>先删除 <code>html</code> 目录：<code>rm -rf /var/www/html</code></li><li>新建一个软链 到 <code>~/apache</code>：<code>ln -s ~/apache .</code></li><li>改回默认的 html 名称：<code>mv /var/www/apache /var/www/html</code></li></ul><p>如果此时文件服务器仍无法访问，这是因为需要为root加权限：<br><code>chmod +x ~/apache</code></p><h3 id="加密">加密</h3><ul><li><p>为用户 <code>luhao</code> 创建一个密码，写在passwd中，后续会提示你输入密码的<br><code>htpasswd -c /etc/httpd/passwd luhao</code></p></li><li><p>接着在<code>/etc/apache2/apache2.conf</code>中维护你要加密码的路径：</p></li></ul><pre><code class="language-json">&lt;Directory "/var/www/html/to_lock"&gt;  AllowOverride all  authuserfile "/etc/httpd/passwd"  authname "luhao"  authtype basic  require user luhao &lt;/Directory&gt;</code></pre><h3 id="中文乱码">中文乱码</h3><p>todo，这个还没解决，文件名显示正常，文件内是乱码</p><h3 id="美化">美化</h3><p>默认的apache网页风格实在太丑，推荐如下一个GUI框架：</p><p><a href="https://github.com/fuchcz/simple-apache-directory-listing-theme">Github: simple-apache-directory-listing-theme</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【日志】2023年3月</title>
      <link href="/posts/2023/3/"/>
      <url>/posts/2023/3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7461458ba6481fa5d6eb6156451374f1dc676560f939f3920d8f93c82ca5ae15"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编（四）：gdb调试</title>
      <link href="/posts/3DJGDAE/"/>
      <url>/posts/3DJGDAE/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.sourceware.org/gdb/">GDB: The GNU Project Debugger</a></li><li><a href="https://jyywiki.cn/pages/OS/manuals/gdb-cheat-sheet.pdf">gdb cheat sheet</a></li><li><a href="https://gcc.godbolt.org/">godbolt</a> (C/C++, python等在线转汇编)</li><li><a href="https://www.onlinegdb.com/">online gdb</a> (在线gdb调试)</li></ul><h2 id="godbolt">godbolt</h2><p>推荐这个网站 <a href="https://gcc.godbolt.org">https://gcc.godbolt.org</a>，在线写 <code>C/C++/Python</code> 等代码，并查看整理后的汇编码，非常清晰。</p><p><img src="/images/godbolt.png" alt=""></p><h2 id="Todo">Todo</h2>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编（三）：基础AT&amp;T汇编</title>
      <link href="/posts/1QNHHCN/"/>
      <url>/posts/1QNHHCN/</url>
      
        <content type="html"><![CDATA[<p><em>Read the Fucking Manul</em></p><ul><li><a href="https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html">x86 Assembly Guide</a></li><li><a href="https://faculty.nps.edu/cseagle/assembly/sys_call.html">Linux System Call Table</a></li><li><a href="https://godbolt.org/">godbolt</a> (C/C++, python等在线转汇编)</li></ul><h2 id="AT-T与intel汇编风格">AT&amp;T与intel汇编风格</h2><ul><li>汇编的编写，离不开寄存器和基础指令，前置知识需要阅读 <a href="https://luhao.wiki/posts/14G1VW3/"><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>汇编（二）：基础寄存器</a></li><li>汇编分为<code>AT&amp;T</code>与<code>Intel</code>风格：<a href="https://www.cs.mcgill.ca/~cs573/winter2001/AttLinux_syntax.htm#:~:text=Notable%20differences%20between%20the%20two,Intel%20register%20operands%20are%20undelimited.">Intel vs. AT&amp;T syntax</a></li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">Intel</th><th style="text-align:left">AT&amp;T</th></tr></thead><tbody><tr><td style="text-align:center">注释</td><td style="text-align:left">;</td><td style="text-align:left">// #</td></tr><tr><td style="text-align:center">指令</td><td style="text-align:left">mov</td><td style="text-align:left"><code>movb是byte, movw是word, movl是long</code></td></tr><tr><td style="text-align:center">寄存器</td><td style="text-align:left">eax</td><td style="text-align:left">%eax</td></tr><tr><td style="text-align:center">立即数</td><td style="text-align:left">0x12</td><td style="text-align:left">$0x12</td></tr><tr><td style="text-align:center">汇编</td><td style="text-align:left"><code>mov eax, 0x12</code></td><td style="text-align:left"><code>mov $0x12, %eax</code> 移动0x12到eax寄存器</td></tr><tr><td style="text-align:center">编译器</td><td style="text-align:left"><em>windows masm</em></td><td style="text-align:left"><em>unix as</em></td></tr></tbody></table><h2 id="AT-T汇编示例">AT&amp;T汇编示例</h2><p>各个字段的含义，请继续阅读后文</p><pre><code class="language-x86asm">.data   # 定义数据段        t1: .int 0x1230 # 定义int型的t1, t2变量        t2: .int 0x4.text   # 定义代码段.globl _start   # 定义_start函数入口    _start:        mov t1, %eax  # eax: 0x1230        mov t2, %ebx  # ebx: 0x4        add %eax, %ebx # ebx: 0x1234        # 0x80系统调用sys_exit, 退出程序        mov $0x1, %eax        int $0x80</code></pre><h2 id="编译与链接">编译与链接</h2><ul><li>利用汇编器将<code>.s</code>转化为目标文件<code>.o</code><br><code>as hello.s -o hello.o</code></li><li>利用链接器将<code>.o</code>链接为可执行文件<code>hello</code><br><code>ld hello.o -o hello</code></li><li>为什么需要一个链接的步骤?<ul><li><a href="https://www.cnblogs.com/immortal-worm/p/5819036.html">链接器（linker）的作用</a></li></ul></li></ul><h3 id="内存划分-section">内存划分 .section</h3><p><code>.section</code> <strong>将代码划分若干个段</strong>，程序执行时，每个段会被加载到不同的内存地址</p><table><thead><tr><th style="text-align:left">.section</th><th style="text-align:center">含义</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>.data</code></td><td style="text-align:center">数据段</td><td style="text-align:center">存放已初始化的全局、静态变量</td></tr><tr><td style="text-align:left"><code>.bss</code></td><td style="text-align:center">数据段</td><td style="text-align:center">存放未初始化的全局、静态变量</td></tr><tr><td style="text-align:left"><code>.text</code></td><td style="text-align:center">代码段</td><td style="text-align:center">存放只读的代码</td></tr><tr><td style="text-align:left"><code>.heap</code></td><td style="text-align:center">堆</td><td style="text-align:center">动态分配的内存</td></tr><tr><td style="text-align:left"><code>.stack</code></td><td style="text-align:center">栈</td><td style="text-align:center">函数局部变量等</td></tr></tbody></table><ul><li>内存划分如图所示：<br>其中除了堆和栈是动态分配的，其他都是静态预先分配的内存</li></ul><p><img src="/images/section.png" alt=""></p><ul><li>调用<code>size [target]</code>查看各个段的内存大小</li></ul><pre><code class="language-python"># 示例见上面的汇编代码size hellotext data  bss dec hexfilename23     8      0     31     1f    out"""text: 代码段大小data, bss: 全局/静态变量大小dec: 总结大小 (hex是十六进制)"""</code></pre><ul><li>统计代码段的内存大小</li></ul><pre><code class="language-x86asm">0x401000&lt;+0&gt;: 0xb8 0x34 0x12 0x00 0x00 ---&gt; mov $0x1234, %eax0x401000&lt;+5&gt;: 0xb0 0x12 0x00           ---&gt; movb $0x1, %el0x401000&lt;+7&gt;: ..."""mov和movb都是操作符, 占1个字节, 分别是0xb8与0xb0因为mov的操作数是16位，因此占2个字节，而movb占1个字节eax和el寄存器也是，分别占2个和1个字节"""</code></pre><ul><li>Linux上可以查看所有虚拟内存的分配：<u class="black"><code>/proc/[pid]/maps</code></u><br>可以通过 <code>man proc</code> 阅读linux文档。<br>观察到：内存 <code>heap</code> 位于低地址，而 <code>stack</code> 位于高地址，没有 <code>pathname</code> 的一般是通过 <code>mmap</code> 分配的匿名内存<br>而读写属性有如下几种：<br>r = read<br>w = write<br>x = execute<br>s = shared<br>p = private (copy on write)</li></ul><pre><code>address                   perms offset  dev   inode                 pathname561155768000-5611557b5000 r--p 00000000 fe:01 410132                /usr/bin/python2.75611557b5000-56115594a000 r-xp 0004d000 fe:01 410132                /usr/bin/python2.7561155ad9000-561155afc000 rw-p 00000000 00:00 0561156b9f000-561156c7d000 rw-p 00000000 00:00 0                     [heap]7f7265abe000-7f7265da5000 r--p 00000000 fe:01 393252                /usr/lib/locale/locale-archive7f7265da5000-7f7265f1b000 rw-p 00000000 00:00 07f7265f1b000-7f7265f3d000 r--p 00000000 fe:01 431545                /usr/lib/x86_64-linux-gnu/libc-2.31.so7f7266278000-7f7266279000 rw-p 0001c000 fe:01 442692                /usr/lib/x86_64-linux-gnu/libpthread-2.31.so7f7266279000-7f726627f000 rw-p 00000000 00:00 07f72662b2000-7f72662b3000 rw-p 0002a000 fe:01 431541                /usr/lib/x86_64-linux-gnu/ld-2.31.so7f72662b3000-7f72662b4000 rw-p 00000000 00:00 07ffd4c51b000-7ffd4c53c000 rw-p 00000000 00:00 0                     [stack]7ffd4c59e000-7ffd4c5a2000 r--p 00000000 00:00 0                     [vvar]7ffd4c5a2000-7ffd4c5a4000 r-xp 00000000 00:00 0                     [vdso]</code></pre><h3 id="数据类型">数据类型</h3><ul><li>文本字符: <code>.ascii</code></li><li>整型: <code>.byte(8位)</code> <code>.short(16位)</code> <code>.int(32位)</code></li><li>浮点: <code>.float</code> <code>.double</code></li><li>指令后缀同时代表精度:<ul><li><code>b, w, l, q</code>: 分别代表8，16，32，64位</li></ul></li></ul><h3 id="start函数">_start函数</h3><ul><li>就像C++的main函数一样，_start是整个汇编程序的入口，你必须显示的定义它</li><li>且需要通过<code>.globl _start</code>，来告诉链接器如何查找_start的符号地址</li></ul><h3 id="系统调用">系统调用</h3><ul><li>Unix下通过<code>int $0x80</code>进行系统调用，其中参数存在<code>%eax</code>等寄存器中：<ul><li><em>查阅对照表:</em> <a href="https://faculty.nps.edu/cseagle/assembly/sys_call.html">Linux System Call Table</a></li></ul></li></ul><table><thead><tr><th style="text-align:center">%eax</th><th style="text-align:center">名称</th><th style="text-align:center">%ebx</th><th style="text-align:center">%ecx</th><th style="text-align:center">％edx</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><font color="#ef6d3b"><strong>sys_exit</strong></font></td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><font color="#ef6d3b"><strong>sys_fork</strong></font></td><td style="text-align:center">struct pt_regs</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><font color="#ef6d3b"><strong>sys_read</strong></font></td><td style="text-align:center">usigned int</td><td style="text-align:center">char *</td><td style="text-align:center">size_t</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><font color="#ef6d3b"><strong>sys_write</strong></font></td><td style="text-align:center">usigned int</td><td style="text-align:center">const char*</td><td style="text-align:center">size_t</td></tr></tbody></table><h3 id="star-TODO"><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> TODO</h3><ul><li>push/pop 栈相关</li><li>loop 循环</li><li>系统调用不够细</li><li><a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2022/">PA实验</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编（二）：基础寄存器</title>
      <link href="/posts/14G1VW3/"/>
      <url>/posts/14G1VW3/</url>
      
        <content type="html"><![CDATA[<p><em>约定如下原则：</em></p><ul><li>ax与AX都代表同一寄存器，不区分大小写</li><li>0xAA、0xaa、AAH都代表十六进制的写法</li><li>本文汇编基于<a href="https://www.cs.mcgill.ca/~cs573/winter2001/AttLinux_syntax.htm#:~:text=Notable%20differences%20between%20the%20two,Intel%20register%20operands%20are%20undelimited.">Intel vs. AT&amp;T syntax</a></li></ul><h2 id="什么是寄存器">什么是寄存器?</h2><ul><li>寄存器是cpu中负责数据存储的电子器件</li><li>它的<strong>传输速度最快</strong>，大于l1、l2 cache，远大于RAM和磁盘</li><li>一个16位的寄存器，可以存储2字节的数据，最大可表示0~65536范围的数据</li><li>寄存器一般用约定俗成的命名，来区分其具体用途</li></ul><h2 id="通用寄存器">通用寄存器</h2><ul><li>存储<font color="#ef6d3b"><strong>一般性数据</strong></font>的寄存器，如<code>AX, BX, CX, DX</code>…</li></ul><table><thead><tr><th style="text-align:center">汇编</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>mov ax, 18</code></td><td style="text-align:center">将18写入寄存器ax</td></tr><tr><td style="text-align:center"><code>mov ax, bx</code></td><td style="text-align:center">将bx的数据写入ax</td></tr><tr><td style="text-align:center"><code>add ax, bx</code></td><td style="text-align:center">将ax,bx的值相加，并写入ax</td></tr><tr><td style="text-align:center"><code>sub ax, bx</code></td><td style="text-align:center">将ax,bx的值相减，并写入ax</td></tr></tbody></table><ul><li>寄存器数据溢出时，会自动舍弃最高位，例如：<ul><li>8位寄存器：ax(0xff), bx(0x01)</li><li>执行<code>add ax, bx</code>后, ax中的值为 0x00</li></ul></li></ul><h2 id="段寄存器">段寄存器</h2><ul><li><p>根据 <a href="https://luhao.wiki/posts/3AJJP5S/">《汇编（一）：计算机架构入门》</a>：物理地址 = 段地址 * 16 + 偏移地址</p></li><li><p>因此，<strong><code>CS</code>存储代码段的段地址，<code>EIP</code>存储代码段的偏移地址!</strong></p><ul><li>代码执行地址为：(CS) * 16 + (EIP)，且每次执行一行后，EIP会根据指令长度偏移若干字节</li><li>计算机每次运行，会根据如上计算出的物理地址，取出对应的指令去运行</li></ul></li><li><p>详解下图过程：</p><ul><li>1.取出<code>CS</code>,<code>EIP</code>的值，并放入地址加法器，得到结果是<code>0x20000</code></li><li>2.将物理地址<code>0x20000</code>送上地址总线</li><li>3.读取到该处指令为<code>mov ax, 0123H</code>，并送入数据总线</li><li>4.CPU ALU获取到该指令，将其执行（涉及<code>AX, BX</code>的读写）</li></ul></li></ul><p><img src="/images/register01.png" alt=""></p><ul><li><p><strong><code>DS</code>存储要访问数据的段地址</strong></p><ul><li>当我们要将<code>al</code>中的数据写入<code>0x1000</code>的内存时：</li><li><code>mov bx, 0x1000</code></li><li><code>mov ds, bx</code>: 将bx值写入到ds，注意，不支持直接往ds寄存器写数据!</li><li><code>mov [0], al</code>: [0]代表读取以ds为段地址，以0为偏移的内存地址上的值</li></ul></li><li><p><font color="#ef6d3b"><strong><code>[ax]</code></strong></font>的特殊用法<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> :<br>表示以寄存器ax上的值，为偏移地址（段地址在<code>ds</code>中），此时去对应物理地址寻值</p></li></ul><h2 id="栈寄存器">栈寄存器</h2><ul><li><p>什么栈（stack）？<br>后进先出的操作规则：<code>LIFO(Last in First out)</code>，就像往枪膛里填子弹</p></li><li><p>程序在运行时，会将一段连续的内存空间划分为栈，这里的操作原则符合<code>LIFO</code></p></li><li><p><strong><code>SS</code>存放栈顶的地址，<code>SP</code>存放栈的偏移地址</strong></p></li></ul><table><thead><tr><th style="text-align:center">汇编</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>push ax</code></td><td style="text-align:center">将ax值写入栈顶，即写到<code>SS+SP</code>，并将SP位置下移</td></tr><tr><td style="text-align:center"><code>pop ax</code></td><td style="text-align:center">将栈顶值写入ax，并将SP位置上移</td></tr></tbody></table><p><img src="/images/stack01.png" alt=""></p><ul><li>什么是<code>Stack Overflow?</code><br>因为程序中的系统调用，都是用堆栈实现的，但默认分配的大小为固定的；<br>当你写如下一个Python无限递归时，就会因堆栈溢出而导致<code>RuntimeError</code>而程序退出</li></ul><pre><code class="language-python">def f(n):    return f(n-1)f(100)# RuntimeError: maximum recursion depth exceeded</code></pre><h2 id="内联汇编">内联汇编</h2><div class="admonition error"><p class="admonition-title">TODO</p><ul><li>关于 <strong>内联汇编（inline asm）</strong> 可以单独开一篇学习之</li><li><a href="http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">GCC-Inline-Assembly-HOWTO</a></li><li><a href="https://akaedu.github.io/book/ch19s05.html">C内联汇编</a></li></ul></div><p>写汇编经常遇到 <strong><code>movq %0, %%rsp</code></strong> 的写法，其中的 <code>%0</code> 是什么含义?</p><p>它一般用于 C++内联汇编：</p><pre><code class="language-c++">int a=10, b;asm ("movl %1, %%eax;      movl %%eax, %0;"     : "=r"(b)        /* output */     : "r"(a)         /* input */     : "%eax"         /* clobbered register */    );       </code></pre><ul><li><code>"=r"(b)</code> 表示把 <code>%0</code> 寄存器的值输出给 变量b</li><li><code>"r"(a)"</code> 表示分配一个寄存器 <code>%1</code> 保存变量a 的值</li></ul><p>因此这段代码的作用是：将a赋值给b</p><p><strong>进阶示例:</strong></p><p>下面这段代码，能够切换到指定的堆栈（sp），并执行对应的函数调用（entry arg）</p><pre><code class="language-c++">static inline void stack_switch_call(void *sp, void *entry, uintptr_t arg) {  asm volatile (#if __x86_64__    "movq %0, %%rsp; movq %2, %%rdi; jmp *%1"      : : "b"((uintptr_t)sp), "d"(entry), "a"(arg) : "memory"#else    "movl %0, %%esp; movl %2, 4(%0); jmp *%1"      : : "b"((uintptr_t)sp - 8), "d"(entry), "a"(arg) : "memory"#endif  );}</code></pre><p><strong>输出修饰符:</strong></p><ul><li>a: 使用 eax/ax/al 寄存器；</li><li>b: 使用 ebx/bx/bl 寄存器；</li><li>c: 使用 ecx/cx/cl 寄存器；</li><li>d: 使用 edx/dx/dl 寄存器；</li><li>r: 使用任何可用的通用寄存器；m: 使用变量的内存位置；</li></ul><p>这段代码一共使用了3个寄存器：</p><ul><li><code>"b"((uintptr_t)sp)</code>: 使用 ebx 寄存器（%0）保存 sp 的值;</li><li><code>"d"(entry)</code>: 使用 edx 寄存器（%1） 保存 entry 的值;</li><li><code>"a"(arg)</code>: 使用 eax 寄存器（%2） 保存 arg 的值;</li></ul><p>此时再去理解汇编代码，其作用是：</p><ul><li><code>movq %0, %%rsp</code>: 将 sp 的值传递给 rsp寄存器（函数堆栈）;</li><li><code>movq %2, %%rdi</code>: 将 args 的值传递给 rdi寄存器（传递参数）;</li><li><code>jmp *%1"</code>: 跳转去执行 entry 函数;</li></ul><h2 id="对照表">对照表</h2><table><thead><tr><th style="text-align:right">寄存器</th><th style="text-align:right">作用</th><th style="text-align:center">英文</th></tr></thead><tbody><tr><td style="text-align:right"><code>AX</code>, <code>BX</code>, <code>CX</code></td><td style="text-align:right">通用寄存器</td><td style="text-align:center">Register</td></tr><tr><td style="text-align:right"><code>CS</code></td><td style="text-align:right">（代码段）段寄存器</td><td style="text-align:center">Code-Segment</td></tr><tr><td style="text-align:right"><code>(E)IP</code></td><td style="text-align:right">（代码段偏移）寄存器</td><td style="text-align:center">(Extend)Instruction-Pointer</td></tr><tr><td style="text-align:right"><code>DS</code></td><td style="text-align:right">（数据段）段寄存器</td><td style="text-align:center">Data-Segment</td></tr><tr><td style="text-align:right"><code>SS</code></td><td style="text-align:right">（栈顶）段寄存器</td><td style="text-align:center">Stack-Segment</td></tr><tr><td style="text-align:right"><code>SP</code></td><td style="text-align:right">（栈顶偏移）段寄存器</td><td style="text-align:center">Stack-Segment</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编（一）：计算机架构入门</title>
      <link href="/posts/3RBTN4W/"/>
      <url>/posts/3RBTN4W/</url>
      
        <content type="html"><![CDATA[<p><em>介绍CPU、寄存器、物理内存、寻址等硬件架构与概念</em><span id="more"></span></p><h3 id="架构图">架构图</h3><p>这张架构图清晰的解释了计算机各个硬件之间的关系与作用<br>第一次看不懂，先理解下面各个器件的作用<br>箭头连线代表电信号的传输，从计算机角度就是数据的传输<br><img src="/images/arch01.png" alt=""></p><h3 id="存储器">存储器</h3><p>存储器是存放计算机数据的器件，根据读写属性分为两类：</p><ul><li><p><font color="#ef6d3b"><strong>ROM（Read-Only-Memory）</strong></font><br>只读，一般是显卡、网卡上的默认系统，如<code>BIOS</code></p></li><li><p><font color="#ef6d3b"><strong>RAM（Random-Access-Memory）</strong></font><br>可读可写，显卡上的RAM又成为显存</p></li></ul><h3 id="数据总线-Data-bus">数据总线 Data-bus</h3><ul><li>数据总线是为CPU与存储器<code>提供数据传输</code>的</li><li>1根数据总线（宽度为1），一次能传送1位（2bit）的二进制数据</li><li>数据总线的宽度，决定CPU与外界传输数据的速度</li></ul><h3 id="地址总线-Address-bus">地址总线 Address-bus</h3><ul><li>读写操作时，CPU通过地址总线来<code>指定存储单元</code>的位置</li><li>宽度为10的地址总线，<font color="#ef6d3b"><strong>寻址能力</strong></font>为<code>2^10</code>个内存单元</li></ul><h3 id="控制总线-Control-bus">控制总线 Control-bus</h3><ul><li>代表CPU对计算机器件的控制能力</li><li>如有一根“读线”控制发送内存读取的信号，有一根“写线”控制写信号</li></ul><h3 id="CPU">CPU</h3><ul><li><font color="#ef6d3b"><strong>寄存器</strong></font>负责存<ul><li>对于一个16位寄存器，能存储的最大数值是<code>2^16</code></li></ul></li><li><font color="#ef6d3b"><strong>逻辑算数单元（ALU）</strong></font>负责算</li><li><font color="#ef6d3b"><strong>控制器</strong></font>负责控制各个器件 ?</li><li>CPU也有自己的内部总线, 同上</li><li>主频用来衡量CPU的执行性能，如<code>2.0GHz</code>的CPU，每个时钟周期是<code>0.5ns</code></li><li>可以通过时钟周期衡量各个器件的传输效率</li></ul><table><thead><tr><th style="text-align:center">器件</th><th style="text-align:center">消耗cpu时钟周期 (&lt;<em>1ns</em>)</th></tr></thead><tbody><tr><td style="text-align:center">Register</td><td style="text-align:center">0.5</td></tr><tr><td style="text-align:center">L1 cache</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">L2 cache</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">L3 cache</td><td style="text-align:center">45</td></tr><tr><td style="text-align:center">RAM内存</td><td style="text-align:center">300</td></tr><tr><td style="text-align:center">SSD固态盘</td><td style="text-align:center">300000</td></tr><tr><td style="text-align:center">HDD机械盘</td><td style="text-align:center">&gt;&gt;SSD</td></tr></tbody></table><div class="admonition note"><p class="admonition-title">延伸阅读: 为什么 SRAM 读写速度更快?</p><ul><li><a href="https://rf.eefocus.com/article/id-336795">存储技术SRAM详解</a></li></ul></div><h3 id="物理地址">物理地址</h3><ul><li>计算机的内存单元是一个线性的地址<ul><li>假设总内存大小1M的计算机，<code>(1M=2^20=16^5)</code>，可以理解为<code>[0x0, 0xFFFFF]</code>这样的一维数组</li></ul></li><li>当内存较大，但地址总线较小时，通常采用寻址的方式：<ul><li><code>物理地址 = 段地址 x 16 + 偏移地址</code></li><li>因此通常将<code>内存分段</code>, 但物理意义上内存是连续的</li><li>《汇编语言》(王爽第三版)P23，列举了一个学校、图书馆位置的例子，很好解释了寻址的思想</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
          <category> 汇编 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++】编码规范</title>
      <link href="/posts/WTFJWR/"/>
      <url>/posts/WTFJWR/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.kernel.org/doc/html/v6.0/process/coding-style.html">Linux kernel coding style</a></li><li><a href="https://bot-man-jl.github.io/articles/?post=2020/Conventional-Cpp#references"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 聊聊 C++ 的优雅写法</a></li></ul><h3 id="Names-and-Order-of-Includes"><a href="https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes">Names and Order of Includes</a></h3><p>当一个<code>cpp</code>存在非常多的 <code>include</code> 时，请合理地对其进行排序。这个编码规范在很多语言都值得引起注意，如 <code>python</code>、<code>JS/TS</code>。</p><p>顺序逻辑如下，不同模块间请用一行空格隔开：</p><ul><li><code>self</code> header</li><li><code>C</code> header</li><li><code>C++</code> header</li><li>libraries</li><li>project</li></ul><h3 id="Preincrement-and-Predecrement"><a href="https://google.github.io/styleguide/cppguide.html#Preincrement_and_Predecrement">Preincrement and Predecrement</a></h3><p>使用 <code>++i/--i</code> 代替 <code>i++/i--</code>，因为后者会产生一个临时变量的开销。</p><hr><hr><h2 id="分割线">分割线</h2><hr><h3 id="1-缩进">1. 缩进</h3><ul><li><p>Linux指定缩进为 8 个空格</p><ul><li><a href="https://peps.python.org/pep-0008/">python pep8</a> 使用 4 空格缩进 ✔</li><li>一些 C/C++ 开源框架式用 2 空格缩进: <a href="https://github.com/google/leveldb">leveldb</a></li></ul></li><li><p>当缩进层数较多（n&gt;=3），应该考虑代码的设计问题！👍</p></li></ul><h3 id="2-单行长度">2. 单行长度</h3><ul><li>限制在80字符内，利用<code>\</code>换行 （可以借助VSCode提示监督）</li></ul><h3 id="3-大括号">3. 大括号 {}</h3><ul><li>对于函数定义，大括号单独换行</li></ul><pre><code class="language-c">int function(int x){    return x;}</code></pre><h3 id="4-空格">4. 空格</h3><ul><li>对于二元、三元运算符，左右都留空</li></ul><pre><code class="language-c">int a = b + c;</code></pre><ul><li>对于一元运算符，右侧不留空</li></ul><pre><code class="language-c">s = sizeof(struct file);</code></pre><h3 id="5-命名">5. 命名</h3><ul><li>全局变量，使用详细的命名<ul><li><code>g_info</code> ❌</li><li><code>g_send_msg_info</code> ✔</li></ul></li><li>局部变量，力求短小精悍<ul><li><code>is_decoration_always_open</code> ❌</li><li><code>is_open</code> ✔</li></ul></li><li>避免种族歧视的命名 ⚠<ul><li><code>master -&gt; primary</code></li><li><code>blacklist -&gt; denylist</code></li></ul></li></ul><h3 id="6-函数规范">6. 函数规范</h3><ul><li>声明函数原型时，需要包含变量名（尽管编译器允许只写变量类型）</li></ul><pre><code class="language-c">__init void * __must_check action(enum magic value, size_t size, u8 count,                                  char *fmt, ...) __printf(4, 5) __malloc;</code></pre><ul><li><code>.h</code>的函数声明包含默认参数的，<code>.cpp</code>中使用注释注明</li></ul><pre><code class="language-c">// a.hvoid action(size_t a, size_t b = 10);// a.cppvoid action(size_t a, size_t b /* = 10 */) {    // todo}</code></pre><h3 id="7-注释">7. 注释</h3><ul><li><strong>注释是解释<code>What</code>，而不是解释<code>How</code></strong><ul><li>What -&gt; 注释</li><li>How -&gt; 文档、Readme</li></ul></li><li>多行注释的格式如下：</li></ul><pre><code class="language-c">/* * This is the preferred style for multi-line * comments in the Linux kernel source code. * Please use it consistently. * * Description:  A column of asterisks on the left side, * with beginning and ending almost-blank lines. */</code></pre><h3 id="8-宏定义">8. 宏定义</h3><ul><li>常量的宏定义，应该大写</li><li>宏定义 如果使用操作符，务必使用括号扩起</li></ul><pre><code class="language-c">#define CONSTANT 0x4000#define CONSTEXP (CONSTANT | 3)</code></pre><ul><li>函数的宏定义，应该小写</li><li><s>跨行函数，应该使用<code>do-while</code> ❓</s></li></ul><pre><code class="language-c">#define macrofun(a, b, c)                       \        do {                                    \                if (a == 5)                     \                        do_this(b, c);          \        } while (0)</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Forward Lighting的技术优化</title>
      <link href="/posts/2KDTR1T/"/>
      <url>/posts/2KDTR1T/</url>
      
        <content type="html"><![CDATA[<p><em>Foward管线下实时光照计算的若干优化技术</em><span id="more"></span></p><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;<a href=\&quot;#复杂度分析\&quot;>复杂度分析</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Forward Lighting：<code>O(mesh*light)</code>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;Deferred Lighting：<code>O(light)</code>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;1. 硬件MRT&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;2. 半透明渲染 ×&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;3. MSAA ×&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;4. 带宽瓶颈&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;<a href=\&quot;#1-降低Mesh\&quot;>优化：减Mesh</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;Vertex Lighting&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Pre-Z&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#2-降低光源数\&quot;>优化：减光源</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;Tiled-Based Lighting&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Clustered Lighting&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;Cone &amp;amp; AABB Intersect ⭐&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;球谐SH&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="复杂度分析">复杂度分析</h2><p>谈优化前，先分析一波复杂度</p><ul><li><font color="#ef6d3b"><strong>Forward Lighting</strong></font><br>遍历场景所有的mesh和光源分别计算光照,<br>复杂度是<code>O(mesh*light)</code></li></ul><pre><code class="language-c">for mesh in scene  for light in scene    color += Calc(mesh, light)</code></pre><p>当场景的光源数量上升时，GPU计算开销会骤增，显然吃不消；<br>题外话，为什么Deferred管线下，能驾驭多光源的实时计算呢?</p><ul><li><font color="#ef6d3b"><strong>Deferred Lighting</strong></font><br>在包含SceneColor, SceneNormal的GBuffer上进行光照计算,<br>复杂度是<code>O(light)</code></li></ul><pre><code class="language-c">for light in scene  color += Calc(Gbuffer, light)</code></pre><p>而Deferred管线的弊端，网上很多没说清，因此提一嘴：</p><ul><li><p><strong>硬件不支持MRT</strong><br>不用考虑，根据<a href="http://blog.kurokoz.com/reports/2020-china-mobile-game-quality-white-paper">2020年移动端白皮书</a>，gles 3.0下的占有率已接近0，海外市场具体问题具体分析</p></li><li><p><strong>不支持透明渲染</strong><br>代价低的方案是，在Deferred结束后，新开一个ForwardPass去渲染透明物体，缺点是透明物没有光照</p></li><li><p><strong>不支持MSAA</strong><br>一方面是对GBuffer做AA无意义，另一方面Multi-Sample会使带宽问题雪上加霜</p></li><li><p><strong>带宽瓶颈</strong><br>移动端硬伤, 标准的GBuffer4最低就是128-bits的带宽</p></li></ul><h2 id="优化方向">优化方向</h2><p>对于Forward lighting<br>已知：复杂度是<code>O(mesh*light)</code><br>问：如何优化?<br><strong>答：要么降低Mesh数量（也可理解为Gemotry数量）, 要么减少计算光源数量</strong></p><h3 id="1-降低Mesh">1. 降低Mesh</h3><ul><li><font color="#ef6d3b"><strong>Vertex Lighting</strong></font></li></ul><p>正常的光照计算是在pixel shader, 但如果在顶点做光照计算, 复杂度就很可控<br>但是画面表现很差, 推荐在低画质使用</p><ul><li><font color="#ef6d3b"><strong>Pre-Z</strong></font><br>因为Pixel-Shader是在Depth-Test阶段前进行；<br>那么某个Mesh即便经过光照计算，最终也未必呈现在屏幕上，所造成的算力浪费，就是OverDraw问题；<br>Pre-Z可以在Pixel之前拿到DepthBuffer，就能只对通过深度测试的点做计算:</li></ul><pre><code class="language-c">for mesh in scene  if (DepthPass(mesh.depth))    for light in scene      color += Calc(mesh, light)</code></pre><h3 id="2-降低光源数">2. 降低光源数</h3><p>如何优化光源数量?<br>一方面，光源较多时，适当阉割几盏，对整体光照效果影响不大；<br>另一方面，光源范围都是有限的，适当做一点剔除，也能起优化作用；</p><ul><li><font color="#ef6d3b"><strong>Overlap</strong></font></li></ul><p><img src="/images/unity_lighting.png" alt=""></p><p>如上图，一个像素接受了8盏光源的影响，增加计算量的同时，最后呈现的效果又不明显。<br>不妨先根据距离、强度等信息对光源排序，对应A~H 8盏：</p><ul><li>方案一：只计算前几盏光源；</li><li><strong>方案二：根据贡献度混合计算，如：</strong><ul><li>近（ABC）用Pixel-Lighting</li><li>中（DEF）用Vertex-Lighting</li><li>远（GH）用球谐光照</li></ul></li></ul><p>此时复杂度就下降为<code>O(k*mesh)</code>, 且丢失的光照细节很有限</p><ul><li><font color="#ef6d3b"><strong>Tiled Based Lighting</strong></font></li></ul><p><img src="/images/tiled_lighting.png" alt=""></p><ul><li><font color="#ef6d3b"><strong>Clustered Based Lighting</strong></font></li></ul><p><img src="/images/clustered_lighting.png" alt=""></p><p>对于每个像素, 当我们无脑遍历每个光源时, 思考一个问题:<br><strong>光源的影响范围真有这么大吗?</strong><br>Tiled的主要思想, 就是把屏幕划分多个区域, 记录每个tiles能影响的光源id, shader阶段只用计算受他们影响的光源<br>Clustered是Tiled的三维划分版本, 将视锥空间沿xyz划分成 <strong>24*8*16</strong> 个cluster<br>接下来cpu负责计算，对于每个cluster影响到的光源id和分布, gpu负责计算剔除后的light shading</p><ul><li>根据光源类型如下，需要做如下相交测试:</li></ul><table><thead><tr><th style="text-align:center">Light</th><th style="text-align:center">Intersection</th></tr></thead><tbody><tr><td style="text-align:center">AreaLight</td><td style="text-align:center">AABB &amp; AABB求交</td></tr><tr><td style="text-align:center">PointLight</td><td style="text-align:center">AABB &amp; 球求交</td></tr><tr><td style="text-align:center">SpotLight <span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center"><strong>AABB &amp; 圆锥求交</strong></td></tr></tbody></table><ul><li><p>严谨的相交检测，在物理引擎中使用较多，可以尝试学习：</p><ul><li><a href="https://github.com/phenomLi/Blog/issues/23"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Separating Axis Theorem (分离轴定律)</a></li><li><a href="https://www.realtimerendering.com/intersections.html"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Realtime Rendering: Static Object Intersections</a></li></ul></li><li><p><font color="#ef6d3b"><strong>圆锥&amp;AABB求交优化</strong></font>:</p></li></ul><p>在做Spotlight的视锥剔除时，传统方案是, 用圆锥的AABB包围盒，或者是包围球，与和视锥的AABB求交。<br>这样就转化为AABB&amp;AABB 或 AABB&amp;球体 的求交问题，相对比较简单，但从剔除率堪忧，因为圆锥占其包围盒的体积比很小，不足三分之一，这里就是我们的优化点<br><strong>我们改成用圆锥与视锥的包围球相交，方案如下：</strong><br>首先圆锥由2个部分组成：侧面、底面，若两者都未与球相交，则说明无相交：</p><ul><li>底面相交:<br>只需计算锥顶到球心的投影（如图红线），范围在<code>(-r, r+h)</code>之间，则判定相交；</li><li>侧面相交:<br>只需计算球到圆锥侧面的最短距离（高中数学题3D版），若小于半径r，则判定相交；</li></ul><p><img src="/images/cone_test_sphere.png" alt=""></p><!-- * 优化后，视锥剔除率对比如下，效果一目了然<iframe  class="embed-responsive-item" srcdoc="<!DOCTYPE html><html> <head><script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js></script><script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js></script> <meta charset=utf-8> <style>html, body {margin: 0; padding: 0;}canvas { display: block; } </style> </head> <body><script src=/html/Cone_vs_Frustum.js></script></body></html>"width=830 height=410></iframe><iframe  class="embed-responsive-item" srcdoc="<!DOCTYPE html><html> <head><script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js></script><script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js></script> <meta charset=utf-8> <style>html, body {margin: 0; padding: 0;}canvas { display: block; } </style> </head> <body><script src=/html/Cone_vs_Sphere.js></script></body></html>"width=830 height=410></iframe> --><ul><li>光源信息的建表和查表<br>首先需要一个32位int存储如下信息，以及一张光源信息表</li></ul><pre><code class="language-c">struct ClusterDataDesc{    uint16_t light_idx; // 对应去查light信息表    uint8_t pointlight_count;    uint8_t spotlight_count;}</code></pre><p>查表过程比较繁琐，原理不细讲了，对着下图去看代码会更清楚：<br>原理看这里： <a href="https://km.netease.com/wiki/1072/page/375174">NeoX Wiki: Clustered Shading</a></p><p><img src="/images/light_indices.png" alt=""></p><h3 id="3-球谐SH">3. 球谐SH</h3><p>这篇KM写得很清楚，就不再赘述</p><ul><li><a href="https://km.netease.com/article/363605">基于球谐的动态点光优化方案</a></li></ul><h3 id="引用">引用</h3><ul><li><a href="https://km.netease.com/wiki/1072/page/375174">NeoX Wiki: Clustered Shading</a> (NeoX Clustered实现方案)</li><li><a href="https://www.adriancourreges.com/blog/2016/09/09/doom-2016-graphics-study/">DOOM(2016)- Graphics Study</a> (DOOM Clustered实现方案)</li><li><a href="http://www.humus.name/Articles/PracticalClusteredShading.pdf">Practical Clustered Shading by Emil Persson</a> (正当防卫引擎的Clustered实现方案)</li><li><a href="http://www.aortiz.me/2018/12/21/CG.html">A Primer On Efficient Rendering Algorithms &amp; Clustered Shading</a><br>(好文, 系统且详细地讲解了大部分lighting方案及优化)</li><li><a href="https://www.realtimerendering.com/intersections.html">RealtimeRendering: Static Object Intersections</a><br>(realtimerednering文档，含游戏中常用几何体求交的算法及数学证明)</li><li><a href="https://simoncoenen.com/blog/programming/graphics/SpotlightCulling">Optimizing spotlight intersection in tiled/clustered light culling</a><br>(利用AABB的包围球，近似的算AABB&amp;Cone求交)</li><li><a href="https://bartwronski.com/2017/04/13/cull-that-cone/">Cull that cone! Improved cone/spotlight visibility tests for tiled and clustered lighting</a><br>(同利用AABB的包围球，近似的算AABB&amp;Cone求交)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graphics </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts可视化库</title>
      <link href="/posts/M53XVE/"/>
      <url>/posts/M53XVE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://pyecharts.org/#/zh-cn/intro"><strong>pyecharts</strong></a><br><a href="https://echarts.apache.org/examples/zh/index.html"><strong>Apache Echarts</strong></a><br><a href="https://github.com/593413198/shawshank/blob/main/src/ChartManager.py"><strong>shawshank/ChartManager.py</strong></a></p><p><em>写这个目的是不是搬运代码和图片，而是封装一个便于自己常用的绘制库.</em></p><h2 id="echarts简介">echarts简介</h2><p>echarts是百度开源的一款图表绘制库，包括且不限于折线图、柱状图、蜡烛图及3D图表<br>pyecharts是移植于python的三方库</p><ul><li><p>安装方式:<br><code>pip install pyecharts</code></p></li><li><p><strong>应用重点</strong>:</p><ul><li>性能分析数据: 如帧率折线图、flamegraph火焰图</li><li>量化金融数据：如K线图</li><li>装B应用：地图、词云等</li></ul></li></ul><h2 id="代码示例">代码示例</h2><h3 id="0-基础代码">0. 基础代码</h3><ul><li>写法一：python风格</li></ul><pre><code class="language-python">from pyecharts.charts import Barbar = Bar()bar.add_xaxis(["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"])bar.add_yaxis("商家A", [5, 20, 36, 10, 75, 90])bar.render() # 默认是./render.html</code></pre><ul><li>写法二：链式调用 （推荐<span class="github-emoji"><span>👍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</li></ul><pre><code class="language-python">from pyecharts.charts import Bar(    Bar()    .add_xaxis(["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"])    .add_yaxis("商家A", [5, 20, 36, 10, 75, 90])    .render() # 默认是./render.html)</code></pre><ul><li>Fake库：生存随机数据，方便测试</li></ul><pre><code class="language-python">from pyecharts.faker import FakerFaker.choose() # 生成x-axisFaker.values() # 生成y-axis</code></pre><ul><li><code>is_smooth</code>: 曲线平滑</li><li><code>is_symbol_show</code>: 显示数据详情</li></ul><h3 id="1-Line-折线图">1. Line-折线图</h3><ul><li>按年度生成<code>600519贵州茅台</code>的日线价格走势:</li></ul><pre><code class="language-python">timeline = Timeline()df = G.dm.parse(file_name)code = file_name.split('/')[-1]if split_year:    min_year, max_year = df.index[0], df.index[-1]    for year in range(min_year.year, max_year.year + 1):        _df = df[str(year) : str(year)]        line = (            Line()            .add_xaxis(list(map(lambda x: x.date(), _df.index)))            .add_yaxis(f'{code} {year}', _df.close.to_list(), is_smooth=True)            .set_global_opts(                # NOTE: y轴分割线                yaxis_opts=opts.AxisOpts(                    splitline_opts=opts.SplitLineOpts(is_show=True),                    split_number=10                )            )        )        timeline.add(line, str(year))timeline.render()</code></pre><!-- <iframesrc="/html/line_stock.html"height=550width=100%frameborder=0scrolling=yes></iframe> --><h3 id="2-Kline-K线图">2. Kline-K线图</h3><ul><li>按年度生成<code>600519贵州茅台</code>的日K线:</li></ul><pre><code class="language-python">timeline = Timeline(init_opts=opts.InitOpts('1500px', '500px'))df = G.dm.parse(file_name)code = file_name.split('/')[-1]if split_year:    min_year, max_year = df.index[0], df.index[-1]    for year in range(min_year.year, max_year.year + 1):        _df = df[str(year) : str(year)]        oclh = _df[['open', 'close', 'low', 'high']].values.tolist()        kline = (            Kline()            .add_xaxis(list(map(lambda x: x.date(), _df.index)))            # open, close, low, high            .add_yaxis(f'{year}年度', oclh)            .set_global_opts(                xaxis_opts=opts.AxisOpts(is_scale=True),                yaxis_opts=opts.AxisOpts(                    is_scale=True,                    splitarea_opts=opts.SplitAreaOpts(                        is_show=True, areastyle_opts=opts.AreaStyleOpts(opacity=1)                    ),                ),                datazoom_opts=[opts.DataZoomOpts(pos_bottom="-2%")],                title_opts=opts.TitleOpts(title="贵州茅台 600519 日线"),            )        )        timeline.add(kline, str(year))timeline.render()</code></pre><!-- <iframesrc="/html/kline_stock.html"height=550width=100%frameborder=0scrolling=yes></iframe> --><h2 id="TODO">TODO</h2><ul><li>搞懂opts每个配置项对应的图表含义</li><li>MarkAreaOpts: 标记区域</li><li>增加按钮, 在页面打开html</li><li>flamegraph火焰图</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shawshank量化引擎</title>
      <link href="/posts/5WQSBJ/"/>
      <url>/posts/5WQSBJ/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="045dfdddd705bcfec1e6f10b97035618c763b00302d752587b6be68ec5aa45ae">b3dc07a81f6459d120ce338ccca55046671b4a11946133462b62f833fff124b243e3ba385d06b0c10183eeb45d16e9e64555c878540b005ee8e510d0594fc3b902c0d537dbb3164621b9c0205b017e355210d0c78c2605d9c7942d4c53b98952e0d777f5611cf0b6c8d5b8ccc5bd4ecc512ebeca9d8df7e0c714a88c4753e7ad813913b027b69cd7669ff98b33d4a171b92e8e8d5a124a26efaf77696207d20670ce64f39d9d504dd0f78f778d71b9aa21832e8b184d50f1c073ed7ab020d45a1911a4e1b34e6a9f77cb43de7cea7aa28b7491145ecb8ddd4e01fdf98f8967c0db18fd2a6b716c8fffe9d882ef6af7bf250c189dec757bfd82462ed19f9e5f84ffea7e2775783ee525034204ab7f1f09b53d10ae22b63523b95c5056ee7003e809c32a7b643c652bc262ad27b07a0e6158f01be1fc97031b5149e676a76bdbb3a39cf800563fb67f4b772f54db05df296746895c6704542db9d2b6be09c8c52b7d4f62ea2ea723f681e3ce3f3dc612074d7b8a4d3fa2e725602ac1031e5a8cc4830f430e52dc95e3aeaca0a6550d2003cc7b4fcbb61862a538a65a2085357b98726baef9a9a96dd0e07ccdeb5d260209eaffb10e51241a528796327c61feda9f35bd7c26e265829ee071967dba739e0b4cefdc2076c1ba1d55f408afc50102e181417e0fc5c871fd55b4df196206da7bf3cd6b80230799bcaaa7db8f2fd4beef7ff079a4ac3d7a13793c897059f4a1fbd1031e9b05af2a61b0aaaaaa72048f3fb38eac6001713f6a61b779a6d168d441d6417a9d4472ad83d6b68b2e1696ea6a249aeb644a68e48108accbc6b69b14d024318911fd12f864fd62deb1d1fe4f418ac39e7db1911dc37eb37bdf04d47ef9ef5b0fd9d1c127ce3242be9c9a7b72329d99bae74db3a070d4071032ac136d1342996c5681ce0bd791f44ed8d06bb0655c4947d04b4502eb4bd51fdb49e588f90279f78d6e7caa67abc1411d4d89e17ac42314d8dd70e8f3f1ab20811c53b1914b0683cfa8a7f98e3e4b7500e9f4fcf8988ea28a6ae5b0c7fa13711253da404bf3b2b181061071df4adb59036ecea575a7f48f047850e0cad960d4ea3bbf849a7fc5dcb05e9a6cb89f6c74985c2fc35f72b0b54fe19ade9b3fe67ff120c852e9b96f32d4c0ab88d8a1e9e22ec62b7c9d235e0fc0e9b10af234971e6171cf0669636dabd76a26d3ce886608ce2ec4c270e8812deaca9e268a7bd814f3af77926c60489936c54305ee7a7a0bf769cee70fe1888e1f91c4eb0d9d036aea789c39abfcc3c544014d538124c41cd8ec67b09a0b8770c0ac1ef53ebc3e6467dc9cba0f2c971c6f58e7e21f9206f0a0d65818bcf375f560f2deee3f1e308a1ca827a1a45510f7194578d5a05ec135fda5f32969aec8d367f2e2ca03b5042a805e577fbe4b50cdc84890bc76b5d198bbf3a1eb457d6281461bcbff76ee32dc6843542a9d2b012fac541a18c541ef56ed359ea876a2bd1421e416c98b645fde72cd77da45e79ad68a2b410054348571ba0b87f054ae4607a5ebb111b8f99a5bbdb3b7fe9b4adc57c76693e184e538dce47eb7f2df1e026b8259f16978fced0689e49a0a478e31d91f254a479ed96ec78ea78010bd21cb6edd5624ab82f24d406dff33082a4447c65b76c9fb924788698f5bc738c6ab469676effcc0f5245e7b2e6be24e85b41aa12e3d888e6046eb8d62b0dbf76d1a47a834dabec7b574a75f0b2b56b5ed7168d3e51fd05c82f36dcc4f6dc6e75f1bac9a91e133c0e150704b02c00e5e0334b66f6bd6781f2216d5d477447d7d2c1c2294db255dc6d5d098d59ff0b3a0256f9de29261d23f2dd283b9ab46d9cae2cfa1a9f563836b5c28ace938c6e7438fa45ee7fc232a9fca722a0aaf07fc9a70a8cb6ab8688d644bf3216e049c3126f9a5363fac9990700bb5eee2cad740be734ad32639649d91335f1e21581d18c56a36461f2ba6e3c4dd4cdf25947cc47a67ce927a5d68b7a1af667f93d59f0bfe1d40bd0e1d3462856b97a3c49464969ca46940df79def7e7a441a477c176d73ac0d4b43983f7da9e3e10737abbecbe460eada35163b3b2834aa916ba915427d79bf2fb4a6d896e85d402d5b41a5ee0118388411a4d8485d3678e4ab3c25cef4b04ddbbbee96097edb71ff205e7be270ca1f729de17f13250c65b649656b76906e2ec7239b694534ffb768f28b5d0e9cf8e4967346f42d5ab44f8b0c31fd2fc69edc8b8c85f31b9b1cc243720139538efeeeafaf01c00397514e738b27d74d49570f7f2a8e4269f39166da202da079916092ba3ca8efa4f610acf793ddd39580b9da3f43aed6f0c3790d194b15246686bf5fcd8a874386e51b4ce4fd935f3393298666a36bff452ef21eda83a3d3da017c2c1efae590a28ad63739884966b2fd3484da0988487d255102377641b15629320e8c5a151300c1427750e6b7754eec907b2c4f8ef7a4c8321a11bcd8c219b58a45ff5184ccfea87e1131ffb1259cd91126eac07908060c1621c2a669e29f3440880ea74befd03b7244ef95a5aa4fda43757bdc40a6556c22042a2543ee83f8d956766a18b1b067f2a550cddeddaebba08ffa6f262b4bbdd8c2734822f1ce17b193400a37a0ef645b91beed574cdc48552c0eee439d045990f4866dd2d403ba3a82019c31b003353d1e536dd0eaecea57bf5123c6be53ca05c0176858990f554e8a102022d93b957579860033eac3a31254d96a4624b792e15ba891f9c3c7c5793aa39b9b2f8bda628e214886dc82d0b2eeb560e5b5e3c74a7627d769bf4ff842ee13766915883019f0bc33ae39e3ec2b96d41d330fbccc9e536f88b70441eab669e6b64886ee196d13b43d561944d757956b3b8eb57392290ba050c22f03b80939370f2b0fdb24c93ff757ac2cf692e8d34860984ac44efc708a89ff5e358d64e0729b73c09eef94fb5d088c6e268a5c746dfd04b873883caea68f65f5790fe0153385295c4be49b07ca1c0b740ff5364e2f83f471ff4393000453e9db1d4251d891761d01e85c371976784546be80ac44bcb7a6dec549e3a03ba374aedde751390deebf7e2f6bf4df26ae7de293aa2b8043559d2c12d6986a84ab4fe1bf1941dbcfd37236f1e2dd0c625f4a14255ade0b168dc41396b1a3329585f99c62be5b8cc894ce0e3d2fc3bc779ac2f09494a26c52009cf7d3368260655138ad7f15c1f4a4847cabdcef83b99c5639fb8e2bb98b34e28dde738d9ae4866b3e3f38205ce3ef5df35741c7cbb31d0187832b41ae450b92963a094f4574bc8aeb0e5499700508912e3368a06c5f5aa112b1abe1612cdfea156ef0c6edb262b742c5198680d195159d299c366a4a0f64897c8015f978bc0a66758c95ec128e85c09f4511c27cc87267b71f2dd2049f92b223d8d53daeebb12ef411795746bf5c64bc45bc35751c718f4a132c9d55aa3f01a0ac79cd35b8a764e7fa218b5f3dbe560218c77dec242eba6a0d2f496a8c100d8de8af6600f54edaad5e9554d26c8bf6812ec4205b8ec1fcc5f445ebc16c56d859d09c6347b1729ed4d3566c1ef6f67e5baeaf352277362c978aa1b6f0fa75a8456388feba31a077a7c2dbaa99c7799fae8ac6b9ea4c883411b09b9c1ecea596d9afaa53347720071614c58a5b39d37a865cddf7fcb9d78a5e7d856af0a6300b628fd88b37cb44b17d23e223bbf514cd33cf4cd8cd61bfc9a6524b1a3fd82bc80e43986cda61158ebe7b314d1fd83186793800ce9c6d0f416897e96d51dd84f8856a98ca81f89f42d752f002ad82fc2dcb58dd35b978f8cfb26a44ccf9a5bd28ad5659bd3dcf1e5c49338dc582928619b255057dfaf091ce90166e0bd9465f1c86d9c5b8391cb6bf8cf2bcda16b4090a348931cff86c2cf572c3e17a0811b6f4345989d730bc719a3b3f7746556f0f1a53f70e7b96ea4ab50ea20d73284c4d8d24a1bf0948fb01376981c393501a89d427682550cbfe42daa24d9a0c054c071fcb5f6a665eb052185700e28f4e697caeae960ad1993926afda4720d77d06b09bdc1528b5e38598a8c86550f6dd741793755fc49a31a2ae1d2c3677fdab5fdd65df14526a1ef43d95ed70130423049cf0b46c518a2930dea3d55aea6331793638460de8701423f23b19aadb34e78b45c01cd2467421e0d5c53cfb69ca64bb01beef0ed0956ba840276f176a857002456b1436572c54d44216d284e596053b8f58300f0f162</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Crontab定时任务</title>
      <link href="/posts/15G1D76/"/>
      <url>/posts/15G1D76/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">资料</p><ul><li><a href="https://www.runoob.com/linux/linux-comm-crontab.html"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 菜鸟教程crontab</a></li><li><a href="https://tool.lu/crontab/">在线验证 crontab</a></li></ul></div><h2 id="技术背景">技术背景</h2><ul><li>服务器经常定时执行任务（如每日9点开盘），自己维护定时器又容易出Bug，还得做日志模块…</li><li><font color="#1A9BFF"><em><strong>Windows Server</strong></em></font> 推荐 <font color="#1A9BFF"><em>Windows定时任务</em></font>（有GUI和命令行）</li><li><font color="#1A9BFF"><em><strong>Linux</strong></em></font> 推荐 <font color="#1A9BFF"><em><strong>Crontab</strong></em></font>（纯命令行）</li></ul><h2 id="crontab">crontab</h2><ul><li>基本使用</li></ul><ol><li><code>crontab -e</code>: 编辑配置</li><li><code>service cron restart</code>: 重启cron服务</li><li><code>service cron reload</code>: 重新载入cron配置, 修改配置后需要reload</li></ol><ul><li>定时语法</li></ul><pre><code class="language-python"># Part 1:*    *    *    *    *   task-    -    -    -    -|    |    |    |    ||    |    |    |    +----- 星期 (0 - 6) (周日为0)|    |    |    +---------- 月份 (1 - 12) |    |    +--------------- 日期 (1 - 31)|    +-------------------- 小时 (0 - 23)+------------------------- 分钟 (0 - 59)# Part 2:*/5: 代表每5分钟1-5: 代表第1-5分钟都执行</code></pre><ul><li><p>如果不需要任何输出:<br><code>xxx.bat &gt; /dev/null 2&gt;&amp;1</code></p></li><li><p>附上服务器上的crontab量化相关配置</p></li></ul><p><img src="/images/crontab.png" alt=""></p><h2 id="Q-A">Q&amp;A</h2><h3 id="crontab没有日志">crontab没有日志</h3><ol><li><code>/etc/rsyslog.conf</code>: 取消crontab的log注释</li><li><code>service rsyslog restart</code>: 重启syslog</li><li><code>/var/log/cron.log</code>: 接着就可以看crontab的log!</li></ol><h3 id="没有-service-指令">没有 <code>service</code> 指令</h3><p>使用 <code>/etc/init.d/cron reload</code> 等代替</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年总结（写在除夕夜）</title>
      <link href="/posts/19KZ887/"/>
      <url>/posts/19KZ887/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="10d08a99131d07e3b6b8dd1cfeb11e77ceace130b9f58907c0936b47a7741852">b3dc07a81f6459d120ce338ccca5504661c2b6d199f8abfa2402c5b16901e347024de2c78f361d0ef47e1cde1303c3a8822026a64881b4638ef155338ea76cb1ccbcc2fbbf742a4f3070a7d9b42e431dcbe95d92f1417cbb887e9e54af2d88a5a74520860d80486fcb86fc73e942bf7941a9773e852aedb8200286cb2ab906047f86456675c6bde6c0093bea5239620ad245c2a7ec1b9400de4c95235d9104a6ddc0446748fb69b6a1aa305dfbef999715b3b1ac87d1bab79af8437885d4c9b329e8c8a813b335cdf221b6b663d6c00890b0744d6e159f8a7068da64977cbde3d4d1401637450aa42464b2e281778f55feae741b3c097361af34421b519372dd5a8b7746dc61ea4b32c7f4bea23222785afd438726ff91feb0ef36aba4254fb27b9a63d01ad7e6ea981f479f9e6ec4451625982918852962ef58ed53f9330592f7bf685f81e01f04d76b06e9ddf6926adf50fdcd88aa613666e097f169cf84a95604ad4f25f68b2a116a41f0df70c3befcc81e646b095525205bf86a72b2eb303219e01bb38c361effc1b5cb8afb26e83363549511f6734cb3383abeffd5dcff07f4b6ccf93eb452106d17843bf1f914ce7905f5413eda38f5f2836fa58f194557a356afab190ed393e8b724dbd498f495b8ba5f7c98ad748b1175b35233c91593d4c3f61ad88b9a035d039f9ed1a5c9efea66d4d25da3f152b3ca6da335eddb4e20ab7e226dc390a458a291698af63b9a13755af75ea9cca27893a5aa82591bea44c53d0d154c97c839f627d1b4432801bec0d7d5c0e2337f72e3213e4824321f75f08d64bca7980c9ebe4c06e3c187bb1966858cad410f2089ca030eb0a3a03a87d5d64279eb1f200554e8eac027aa72b1dfb4c6538d3a4dff03ebef5b7a3acf547b6c58849716a5d9f296fc941c5cfe5158c93e7397007a7ac07c2021ef1648594a0caebbf35b5c98147e8353bbaab8eb98bc042e36e4ba143abc072d2f5dad3b6fa06e0909a3ae70da5472a6916588ce97990a6ba87e09cb4cad834b91f3ec0913bb00ebf96561c2c1393939ebbee8bf840ce33d1785f44e1f762e1eae1e58322b80766a61f53cf8b7f854c7a2938c58ee846ce6744fc3038e01a86ae9c43b83683087ab08a73b30a79c8bb7abdd06ba8c558771a3c3455b6c8a6e00ae579d52cacaabc7d9e55cdc7c4c4b756f7d6ebb29faa160243b0268a8c65b76e06a858a324ddfb63c4fe354783e7e876e67ae7e4d682752880eaf589f5be9375c526216f51eb6f1a82a01b4d4fc9f1684fca005eb2e098e35b17fc8fdf45717a7d3ed2d4136ee100ff4263acdc6e8f883b84a894a63d69de30ebe7cda09c4d3a3004cd8e45ec0c04a49ad8c3fc076f6736474cbf50f92f6c1696dcbcebbbb459425970a6be01f93e5b3f2d7b30ceaa79c80c4ede7bc003d91c0f5727bfe25c70b825b0ce263f0f05c57c1ed72d818c9559657a9e3463aca1f95c7589bc39f914bab887fd8aa124379803207b31c344e3a82814c964a0802d00b323ad1cc77c6ffd30255d9629a2b9730657f236f9520eb338d5392b6860f209502f3caac9da96a99f6a2c36543ca6e6e8e63eaac0224a84de69b67d0214aef4b961e9474574049aaf374e78721f0e03693e4d1ceb07c5e8008a632ee4882ddae973edd56059225658172572dbaa6f9eee2825eeab4b3f7189d6cc7fd5428e23a55c4d843a46a52d6a494da2213d844eb1d7bf035c103ee9bb87d7218b11e8208f2aa25a436fe436fbefb18e6596a6786f3d55118207063ceb868366f2dcceab03743286181d4d5937b969bba9b98c29792217dcf01ab51a14b9834d07eb4daae0ea73757bf2419425fac6c695bd88f38b3a546582369255212371fa7466d4607ad4ab1f46e9b4a74d27b1110ccb1e1bcdba65bc1fb6f927fc144f8afd31a208854a61a5f0c0ade394cac9d97c6600eb2bccfff2321d983e7e4b9627f769d4e49e7d01efe7712bb89643bb4c3c435c92bc45a25fc1b884dda77a42f2ec1e21b22b9159b9cb453cde0e5a301f3bf8d85844bf81225dbe1767d75d881be2e636eaa6450bc5f3eed4a8453f7c3632c9eef82a2e0f27c1b34187c047622d6f7f4f5d240138861be413ca74911e7d0558c2d92d5d9e9989828364fb3aaddd143a5fdea53d5e4508c5a307bec84753e5d09370a3e807c3043467a01ee5cd2f855236eb2903f1f126a32d3540db886fa679e73417bdd61f9196d302e45777d0676ab26183c5d9984485a2d2e0c4cca536b76dce3cc8bdade92dad936f58f6c62e8c9a400e0541d40ea1f1658d31a5a94037b320acf85c9b544628bed424214739d0fe52bd2b3ee52305ef9c69fb8fbde13598b09eee99c0c2485a46478d3e6458696f09f3ae5bb60b5895c7a68b8c08f5e68ad1bfd6f64d8e9769c92ce5a8362c27a14fea013aaba724a13a84715cae254748e4f6811d1877f714808d46871893831af89489765d9cc25a7b9272ecf2f20044f92aed2d0c7645d681fbc72e8c980cfd1c733bc519604bfb4feca7779b6b358d277484b63959ec3a4fd86e9c12d4bbe8853461a05d32df6399257df2f2599d65b5b0873e3d24d9f02ed87cc28e6152929b4f920550abe4086dfffe9f306b66b9398545c4a84a46738582bde79c411f8844eb53d5136911fbaadd907d64266144b716dbe3d6b9c240e0e7457e4f1d9c3de0bcd492653f98e18bd47b46132c78ce6504442e629dd6795ea064477d5cedb8f280b3f5d94587991400905e089d9346a063f7b8674fe9ee640a49b0626ee183106da7606575ec9e845a0f998c8e3946bd8721cfd06bbca7870b0e4bacdfa7bf49532c42976b1f87e87b6310907da874f448543dc628aa991053df6608752c2d3b1e3bd1c2ec1c5f04a0cd56f4d615a11af5db83229a103d4581a24b8e846c01c9eba5784ef6ddd165ed553c37041f9ca7c49e6c26ef9432c7514e96983a22b49d28dca8ac8a6d6488c5009e13773c42175dd68afdde5d4e380ddf6e8d69b21827201ed24c34139a571c322f78a3e1f9bdb5000f5674b24c2ef0069a8bce1f0504591b0ae81f060861cb6d4586aa7b16549dcea5219c329b9779d9aa3ba27767f04eea1411e602fc265ea77b5bbd861fb70201bb1c861cc51240195685454366ed9d07ef4a289156c7e6fb8c2454d222572a1fe0bbfbb7916f9e6705ab9f6ec40fd180a04d7d3417ac3eb0dc5ce92b29c559702bf12b922552582e1cdf68fa6207abf5ef763d8168cd372f0c1ad75ff40daa90af561aa00c40bd102fa1b0f0ce80befbb96845ad7d1d7e765076588fde40dad6b83a8cf9dda68926a637e86422a5b6f038630f50f72f0887517100c6f2e1f45cab53018145a2036632c4dd46dbb47c4c3aaa3ab73ff1f5882e034e51c86cf042bf95ceceb5f3d9a305b5993e036deb6e1aedddb9fa55ed76d847090ee72c56bd0f055a05f37d1a621409e9ea927ffb670610e09edc5fb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>火焰图flamegraph</title>
      <link href="/posts/38ZNGYA/"/>
      <url>/posts/38ZNGYA/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是火焰图">什么是火焰图?</h2><p>首先火焰图, 是一个性能排查的可视化工具, 广泛应用于<font color="#FF1E10"><strong>函数调用开销、内存占用统计</strong></font>等…<br>如图长这样:<br><img src="/images/flamegraph.png" alt=""></p><p>它有两大优势: <font color="#FF1E10"><strong>1.可以看清调用关系, 2. 一眼看出性能瓶颈;</strong></font></p><h2 id="如何生成火焰图">如何生成火焰图?</h2><p>常见的开源flamegraph都是基于perf结果解析出的svg, 再用浏览器打开就是火焰图了;<br>比较经典的开源是这个:<br><a href="https://github.com/brendangregg/FlameGraph"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>brendangregg/FlameGraph</strong></a><br>但比较可惜，作者基于Perl写的，windows下运行比较麻烦（因为你得为每台工作机装个perl环境吧…）</p><p>推荐一个在线看火焰图的网站:<br><a href="https://www.speedscope.app/"><strong>speedscope.app</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 汇总</title>
      <link href="/posts/2N6K1PK/"/>
      <url>/posts/2N6K1PK/</url>
      
        <content type="html"><![CDATA[<h2 id="语言特性">语言特性</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">时间</th><th style="text-align:left">特性</th></tr></thead><tbody><tr><td style="text-align:center">C++98</td><td style="text-align:center">1998</td><td style="text-align:left">the original standard</td></tr><tr><td style="text-align:center">C++11</td><td style="text-align:center">2011</td><td style="text-align:left">almost a new language</td></tr><tr><td style="text-align:center">C++14</td><td style="text-align:center">2014</td><td style="text-align:left">some improvements</td></tr><tr><td style="text-align:center">C++17</td><td style="text-align:center">2017</td><td style="text-align:left">new features &amp; library extensions</td></tr><tr><td style="text-align:center">C++20</td><td style="text-align:center">2020</td><td style="text-align:left">game-changing new features &amp; libraries</td></tr></tbody></table><h3 id="ISO-Standard-C">ISO Standard C++</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">since</th><th style="text-align:center">Got</th></tr></thead><tbody><tr><td style="text-align:center">nullptr</td><td style="text-align:center">c++11</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">constexpr</td><td style="text-align:center">c++11</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">auto</td><td style="text-align:center">c++11</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">decltype</td><td style="text-align:center">c++11</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">decltype(auto)</td><td style="text-align:center">c++14</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">lambda</td><td style="text-align:center">c++11</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">shared_ptr</td><td style="text-align:center">c++11</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">unique_ptr</td><td style="text-align:center">c++11</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">weak_ptr</td><td style="text-align:center">c++11</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">make_unique</td><td style="text-align:center">c++14</td><td style="text-align:center"></td></tr></tbody></table><h3 id="constexpr">constexpr</h3><p>阅读材料:</p><ul><li><a href="https://en.cppreference.com/w/cpp/language/constexpr">cppreference: constexpr</a></li><li><a href="https://learn.microsoft.com/en-us/cpp/cpp/constexpr-cpp?view=msvc-170">Microsoft: constexpr</a></li></ul><p><strong>constexpr和const有什么区别?</strong></p><ul><li><a href="https://stackoverflow.com/questions/14116003/whats-the-difference-between-constexpr-and-const">stackoverflow</a></li><li><code>const</code> simply means that value <strong>cannot be changed</strong></li><li><code>constexpr</code> creates a <strong>compile-time constant</strong></li></ul><p>核心在于, constexpr在编译期就已经完成值计算.</p><h2 id="compile-flag">compile flag</h2><p>阅读资料：<a href="https://linuxhandbook.com/gcc-flags/">Important GCC Flags in Linux</a>，<a href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">Gcc Option-Summary</a><br><code>compile flags</code>，使用合理的编译选项来让你的程序更健壮和友好，掌握如下重点：</p><ul><li><code>-Wall</code>：打印所有的 warning</li><li><code>-Werror</code>：所有 warning 当做 error 处理</li><li><code>-o</code>：指定输出文件</li><li><code>-l</code>：链接共享库，如<code>-lpthread</code></li><li><code>-g</code>：编译包含debug信息</li><li><code>-std=c++11</code>：指定C++标准</li><li><code>-O[0|g|1|2|s|3]</code>：优化级别，<code>-O0</code>不含任何优化</li></ul><h2 id="Value-or-Reference">Value or Reference?</h2><p>引用自《C++ Templates》，总体说使用类对象时传递值，使用基础类型时传递引用。</p><h2 id="quote">quote</h2><ul><li><p>Modern C++ Tutorial<br><a href="https://changkun.de/modern-cpp/en-us/01-intro/">https://changkun.de/modern-cpp/en-us/01-intro/</a></p></li><li><p>cpphacking<br><a href="https://hackingcpp.com/index.html">https://hackingcpp.com/index.html</a><br>强推这个网站</p></li><li><p>fmt库<br><a href="https://github.com/fmtlib/fmt">https://github.com/fmtlib/fmt</a></p></li><li><p>基于C++17的python解释器<br><a href="https://github.com/blueloveTH/pocketpy/blob/main/src/main.cpp">https://github.com/blueloveTH/pocketpy/blob/main/src/main.cpp</a><br>搭配这个看, python写的py解释器<br><a href="https://aosabook.org/en/500L/a-python-interpreter-written-in-python.html">https://aosabook.org/en/500L/a-python-interpreter-written-in-python.html</a></p></li></ul><h2 id="工具">工具</h2><ul><li><p>学习 <code>Makefile</code></p></li><li><p>学习 <code>cmake</code></p></li><li><p>学习 <code>编译选项</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】命令行大全</title>
      <link href="/posts/2G7VBZ2/"/>
      <url>/posts/2G7VBZ2/</url>
      
        <content type="html"><![CDATA[<p>记录常用的Linux指令、踩坑经历<span id="more"></span></p><div class="admonition warning"><p class="admonition-title">导读</p><ul><li>查阅 man 手册是最根本的办法，但某些用法要牢记!</li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8">The art of command line</a></li><li><a href="https://explainshell.com/">explain shell，解释任意指令</a></li></ul></div><div class="markmap-container" style="height:550px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;<a href=\&quot;#符号\&quot;>重定向</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<a href=\&quot;#pipe管道\&quot;>pipe</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;<a href=\&quot;#here-document\&quot;>here document</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#xargs\&quot;>xargs</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<a href=\&quot;#xargs-d\&quot;>xargs -d</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;<a href=\&quot;#xargs-find\&quot;>xargs+find</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;<a href=\&quot;#match\&quot;>match</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;regex, glob&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;<a href=\&quot;#grep\&quot;>grep</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;<a href=\&quot;#find\&quot;>find</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;<a href=\&quot;#watch\&quot;>watch</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;less&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;head, tail&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;<a href=\&quot;#curl\&quot;>curl</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;curl -X&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;curl -o&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;<a href=\&quot;#apt-get\&quot;>apt-get</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#port\&quot;>port</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;<a href=\&quot;#sed-stream-editor\&quot;>sed</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;<a href=\&quot;#scp-上传-下载\&quot;>scp</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;<a href=\&quot;#disk\&quot;>disk</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;<a href=\&quot;#nohup\&quot;>nohup</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;<a href=\&quot;#compression\&quot;>compression</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;kill&quot;}],&quot;p&quot;:{}}"></svg></div><h2 id="重定向">重定向</h2><p>Linux 的宗旨是 <code>everythin is file</code>，对于进程、IO、设备等，都是以文件的形式存在，这些文件都可以用文件描述符（<code>file descriptor</code>）来表示。<br>Linux 默认有三个文件描述符，你可以始终默认它们是存在的：</p><ul><li>stdin（0）：可以理解为键盘设备的输入信号</li><li>stdout（1）：标准输出</li><li>stderr（2）：标准错误</li></ul><h3 id="符号">符号</h3><div class="admonition note"><p class="admonition-title">重定向操作的格式:</p><ul><li>shell命令 + 重定向符号 + &lt;文件、文件描述符、设备&gt;</li></ul></div><ul><li><p>“<font color="#FF1E10"><strong>&gt;</strong></font>” 默认重定向 stdout，会覆盖原内容<br><code>cmd &gt; file</code>，等价于 <code>cmd 1 &gt; file</code></p></li><li><p>“<font color="#FF1E10"><strong>&gt;&gt;</strong></font>” 是追加，不会覆盖</p></li><li><p>“<font color="#FF1E10"><strong>&lt;</strong></font>” 重定向 stdin，可以从输入设备、文件内读取<br><code>wc -l &lt; file</code>，会统计文件的行数</p></li><li><p>“<font color="#FF1E10"><strong>&gt;&amp;</strong></font>” 符号实现 stdout、stderr 之间的重新绑定。</p><ul><li><code>cmd 1&gt;&amp;2</code>，会将所有 stdout 输出到 stderr</li></ul></li></ul><h3 id="忽略">忽略</h3><p><code>/dev/null</code> 是linux下的一个device，相当于黑洞，任何输出重定向到这里都会被吞掉（即忽略）。</p><p><code>cmd &gt; /dev/null</code>，会忽略所有的stdout，但会保留stderr，想要忽略任何输出，可以使用 <code>cmd 1&gt;/dev/null 2&gt;&amp;1</code></p><h3 id="pipe管道">pipe管道</h3><p>管道（“<font color="#FF1E10"><strong>|</strong></font>”） 和 “<font color="#FF1E10"><strong>&gt;</strong></font>” 的区别在于，它仅仅支持将一个（前面）指令的 stdout 传递给 下一个指令。</p><p><code>cat file | grep luhao</code>，即将file的内容传递给grep，以匹配luhao字段</p><div class="admonition note"><p class="admonition-title">理解pipe：将上一个指令的stdout，重定向到下一个指令的stdin</p><ul><li>阅读材料：<a href="https://www.cnblogs.com/pengliangcheng/p/5211786.html">linux管道和重定向区别</a></li></ul></div><h3 id="here-document">here document</h3><pre><code class="language-bash">command &lt;&lt; EOF    documentEOF</code></pre><p><code>here document</code> 是 linux 一种特殊的重定向方式，它会将两个<code>EOF</code>之间的字符重定向给 command（或者一个程序）。<br>一种常见的用法是，结合 <code>cat</code> 实现多行字符的输出。</p><h2 id="xargs">xargs</h2><p>前面说到 <u class="black">管道</u> 可以在两个指令间传递信息，但很遗憾的是一些指令并不支持管道，例如 <code>echo</code>。<br>这个时候就需要 <code>xargs</code> （<em>eXtended ARGuments</em>）发挥作用！</p><blockquote><p>xargs [-options] [command]<br>xargs 本质是 将stdin转化为command的参数（结合管道使用）</p></blockquote><ul><li><p><code>$ xargs find -name</code><br>回车后会等待用户输入，<u class="black">然后按下 <code>ctrl+d</code></u>，会执行 <code>find -name [input]</code></p></li><li><p><code>$ echo "test" | xargs mkdir</code><br>实际上等价于 <code>mkdir test</code>，如果不加xargs会报错</p></li></ul><h3 id="xargs-d">xargs -d</h3><p>xargs默认根据 “空格” 进行分割，可以用参数 <code>-d</code> 调整其分割策略</p><ul><li><p><code>echo "one two three" | xargs mkdir</code><br>实际会创建名为<code>one</code>, <code>two</code>, <code>three</code>的三个目录</p></li><li><p><code>echo -e "a\tb\t\c" | xargs -d "\t"</code><br>即按照<code>\t</code>分割，实际输出<code>a b c</code></p></li></ul><div class="admonition note"><p class="admonition-title">NOTE</p><ul><li><code>-p</code>：解析完参数，请求用户确认 <font color="#FF1E10"><strong>（当你不确定时请用 <code>-p</code>）</strong></font></li><li><code>-t</code>：打印出参数，直接执行</li></ul></div><h3 id="xargs-find">xargs + find</h3><p>这两个指令搭配好为例无穷，举个例子，搜索目录下所有 <code>*.txt</code> 中是否包含 <code>luhao</code> 的字符：</p><ul><li><code>find . -name "*.txt" | xargs grep "abc"</code> ✔</li><li><code>find . -name "*.txt" | grep "abc"</code> ❌</li></ul><p>再例如，删除所有以 <code>test</code> 开头的文件：（<code>-print0</code>是处理文件名含空格）</p><ul><li><code>find . -name "test* -print0" | xargs -0 rm</code></li></ul><p>高级应用，统计所有 <code>.cpp</code> 文件的代码行数：</p><ul><li><code>find ./source -type f -name "*.cpp" | xargs  wc -l</code></li></ul><div class="admonition warning"><p class="admonition-title">管道和xargs区别?</p><ul><li>管道 将上一个stdout一股脑丢到stdin执行</li><li>xargs 会将上一个stdout根据空格等分离，再一个一个丢进来执行</li></ul></div><h2 id="匹配">匹配</h2><p>linux下有两种匹配规则，分别是 RE正则表达式 和 Glob通配符。<br><code>Glob</code>一般在shell指令下使用较多，因为较多的指令不支持正则表达式。例如 <code>ls</code>、<code>find</code>、<code>sed</code>…</p><ul><li><p><a href="/posts/3SAT4K7/">regex 正则表达式</a></p></li><li><p><a href="https://tldp.org/LDP/abs/html/globbingref.html">glob 通配符</a></p></li></ul><p>linux关于匹配的指令也有多种，使用最多的是 <code>find</code>、<code>grep</code>… 推荐查阅man手册来学习</p><h3 id="font-color-1A9BFF-grep-font"><a href="https://man7.org/linux/man-pages/man1/grep.1.html"><font color="#1A9BFF"><strong>grep</strong></font></a></h3><p>grep 会将匹配的部分高亮输出到 stdout，需要牢记如下几个参数：</p><ul><li><code>-i</code>：ignore-case</li><li><code>-o</code>：only-matching，只打印完全匹配的部分</li><li><code>-v</code>：invert-match，只输出“不匹配”</li></ul><h3 id="font-color-1A9BFF-find-font"><a href="https://man7.org/linux/man-pages/man1/find.1.html"><font color="#1A9BFF"><strong>find</strong></font></a></h3><blockquote><p>TODO：用到时候再来学习</p></blockquote><h2 id="watch">watch</h2><p><code>linux cat</code> 指令会将文件所有的内容输出到 stdout，当文件很大的时候会占用很大的缓冲区，并造成卡顿和等待。因此学会如下几个指令：</p><ul><li><code>less</code>：打印部分，借助vim指令上下滚动</li><li><code>head</code>：打印头部</li><li><code>tail</code>：打印尾部</li></ul><p>可选参数常用的有两种：</p><ul><li><code>-f</code>：follow模式，当文件增长时会刷新stdout</li><li><code>-n</code>：打印指定的行数</li></ul><div class="admonition note"><p class="admonition-title">监测日志时，使用 tail -f *.log | grep xxx 非常有帮助</p></div><h2 id="curl">curl</h2><p>curl 是用来请求web服务器的命令行工具，其名字是 client &amp; url 的结合体。Postman跟它的作用类似，但是带有GUI界面。<br><code>curl https://www.google.com/</code>：无任何参数的curl，就是调用一次 <code>GET</code> 请求。</p><ul><li><code>-d</code>：发送 <code>POST</code> 请求</li><li><code>--head</code>：发送 <code>HEAD</code> 请求</li><li><code>-o</code>：将服务器的返回保存为文件，等同于 <code>wget</code></li><li><code>-X</code>：指定HTTP请求方法，如 <code>curl -X POST ...</code></li></ul><h2 id="apt-get">apt-get</h2><ul><li>debian如何换国内源?</li></ul><pre><code>sudo sed -i -e 's/deb.debian.org/mirrors.aliyun.com/g' -e 's/security.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.listsudo apt-get update</code></pre><hr><hr><p>分割线，下面内容要整理重写</p><hr><hr><h3 id="port">port</h3><ul><li><p>Unix:<br><code>lsof</code>: 打印所有端口的占用情况<br><code>lsof -i:4000</code>: 查看占用4000端口的进程</p></li><li><p>Windows:<br><code>netstat -ano | findstr :6000</code>: 查看占用6000端口的进程<br><code>taskkill /PID 12345 /F</code>: 杀死进程12345, /F表示强制关闭</p></li></ul><h3 id="sed-stream-editor">sed: stream editor</h3><ol start="0"><li><code>sed -i</code>: 直接替换源文件</li><li><code>sed '4a newline' [file]</code>: 第4行新增</li><li><code>sed '1,5s/a/b/' [file]</code>: 1~5行的a替换为b</li><li><code>$</code>: 表示末行</li></ol><h3 id="scp-上传-下载">scp 上传/下载</h3><ol><li><code>scp [local file] root@xx.xx.xx:/root</code>: 上传到服务器</li><li><code>scp root@xx.xx.xx:/root/ [local_path]</code>: 从服务器下载到本地</li><li><code>scp -r</code>: 文件夹操作</li><li><code>scp -P 32200 ...</code>: 带端口的scp</li></ol><h3 id="disk">disk</h3><ul><li><code>df -lh</code>: 查看磁盘剩余空间</li><li><code>du -lh</code>: 查看含目录的大小</li><li><code>rm -f *</code>: 删除目录下所有文件</li><li><code>l --color</code>: 彩色格式显示</li><li><code>ll</code>: 显示详细信息, 如最后修改时间</li><li><code>ls | wc -l</code>: 统计当前文件数, wc表示<code>word count</code>, <code>-l</code>是行数</li></ul><h3 id="nohup">nohup</h3><p>看这篇cnblog就够了: <a href="https://www.cnblogs.com/yunwangjun-python-520/p/10713564.html">nohup和&amp;后台运行</a></p><h3 id="compression">compression</h3><ul><li>zip</li></ul><ol><li><code>unar xx.zip</code>: 可以自动解码中文</li><li><code>vim xx.zip</code>: 查看zip压缩文件结构</li></ol><ul><li>tar</li></ul><pre><code class="language-shell"># .gz ------------------tar -czf x.gz [file]tar -xzvf x.gz# .bz2 ------------------tar -cjf x.bz2 [file]tar -xjvf x.bz2# .rar ------------------rar a x.rar [file]unrar e x.rar# .zip ------------------zip x.zip [file]unzip x.zip</code></pre><h3 id="shell脚本">shell脚本</h3><ul><li>如何写一个自己的脚本?</li></ul><ol><li><code>xxx.sh</code>: 如/luhao/bin/demo.sh</li><li><code>ln -s /luhao/bin/demo.sh /usr/bin/demo</code>: 加入环境变量, 可以直接demo访问</li></ol><ul><li>自定义start, end, restart</li></ul><pre><code class="language-shell">function start() {}case "$1" in    start)start;;    *)esac</code></pre><h3 id="ps-kill-pkill-进程相关">ps, kill, pkill 进程相关</h3><ul><li><code>ps -e</code>: 所有进程</li><li><code>ps -u</code>: 按用户打印进程</li><li><code>ps -x</code>: 没有终端的进程, 后台python应用需要！</li><li><code>kill -9 [pid]</code>: 杀死对应pid的进程</li><li><code>pkill -f [pattern]</code>: 杀死制定名称的进程</li></ul><h3 id="挂载云硬盘">挂载云硬盘</h3><ol><li><code>fdisk -l</code>: 查看新磁盘名称, 如<code>/dev/vdb</code></li><li><code>mount -t ext4 /dev/vdb /data</code>: 将<code>/dev/vdb</code>挂载到<code>/data</code>目录</li><li><code>df -lh</code>: 查看对应硬盘</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《直击本质》书摘</title>
      <link href="/posts/3819NVV/"/>
      <url>/posts/3819NVV/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li><a href="(https://weread.qq.com/web/reader/78f32cc071d7b80f78f0c1fkc81322c012c81e728d9d180)">《直击本质：洞察事物底层逻辑的思考方法》</a>，专注于“思考方法”的书</li><li>本文旨在记录书中有共鸣、有感触的语句</li></ul></div><h2 id="理解事物本质">理解事物本质</h2><p>思考事物的根本属性，是学一样东西、论述一个原理、解决一个问题、判断一个趋势的基础；<br>当你做到以下中的任何一件，你就理解了事物的本质：</p><ul><li><strong>给出清晰的定义</strong><ul><li>“商品”是用来交换的劳动产品;</li></ul></li><li><strong>做出简单、准确的类比</strong><ul><li>“谈判”就是“找交集”</li><li>切忌用一件晦涩的事物去解释另一件事物，容易将简单的问题复杂化；</li></ul></li></ul><h2 id="升维思考">升维思考</h2><ul><li><p>跳出眼前问题的限制与常规解法，通过层级、时间、视角、边界、位置、结构的变换，重新思考问题及其解决之道的思维方式</p></li><li><p>爱因斯坦：“我们不能用制造问题时的同一水平思维来解决问题。”</p></li></ul><h3 id="1-层级思考法">1. 层级思考法</h3><ul><li><p>上三层：</p><ul><li><strong>愿景层</strong>：人生使命，比如灭霸为了维护宇宙平衡；</li><li><strong>身份层</strong>：我是谁，我想成为谁；</li><li><strong>价值观层</strong>：好坏对错之分；</li></ul></li><li><p>下三层：</p><ul><li><strong>能力层</strong>：技能、状态、策略；</li><li><strong>行为层</strong>：具体的行动，每天做了什么？</li><li><strong>环境层</strong>：学校、职场、家庭的环境影响</li></ul></li><li><p>上层对下层拥有指导作用。当你懒得背单词（行为层），想象你想考上怎样的大学（身份层），背单词就有了驱动力，正是这个道理；</p></li><li><p>面对下层的现象，从上层介入思考会更直击本质。这也是为什么通过一个人的交友圈子（环境层）、言语交谈（行为层）和处事策略（能力层），你基本能推断出其三观与身份特征。</p></li><li><p>如果我们只在下层做出改变，而上层的意识没有变化，下层的改变常常是难以持久的。</p></li></ul><h3 id="2-拉长时间轴">2. 拉长时间轴</h3><ul><li>消除痛苦与烦恼。站在更远的时间线外看待当下，你会觉得，一切的痛苦都会随时间烟消云散。</li></ul><h3 id="3-上帝视角">3. 上帝视角</h3><ul><li><p>为什么你能教别人做事，却过不好自己的生活？居高临下，跳出剧本，才能拥有上帝视角（这我想起了罗永浩的"大局观"）</p><ul><li>上帝视角让我们摆脱自我情绪和感受的束缚；</li><li>上帝视角利于拥有全局观、大局观；</li></ul></li><li><p>普鲁斯特：“真正的发现之旅不在于发现新风景，而在于获得新视角。”</p></li></ul><h3 id="4-第三选择">4. 第三选择</h3><ul><li><p>我们经常陷入非黑即白、非此即彼的二选一思维模式，即“点状思维”。以至于条件反射般地将事物一分为二或两极对立：男人与女人，原告与被告、资本家与工人等等…</p></li><li><p>只有机器人才会只拥有0和1两种选择，试着寻找“第三选择”</p></li></ul><h3 id="5-无边界思考">5. 无边界思考</h3><ul><li><p>哲学家卡斯将人类所有活动比作两类游戏：</p><ul><li><strong>有限游戏</strong>：制定一系列机制与规则（如政治、法律），以取胜为目的（如战争、官司）；</li><li><strong>无限游戏</strong>：没有任何规则，以延续为目的，拥有无限可能与结局（如文化、艺术）；</li></ul></li><li><p>我们总是习惯性给自己限定框架，进行“有限游戏”。如“我只是大专毕业，怎么找得到好工作”；如“我是女生，我一定会受到歧视”；一切身份限制、性别限制、输赢限制等等，都在无形中束缚了我们的发展。</p></li><li><p>所谓无边界思考，即打破人生得到种种限制。关键包括三点：消除时空边界、消除角色边界、修改规则</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VPN搭建一条龙</title>
      <link href="/posts/2R7AP5Z/"/>
      <url>/posts/2R7AP5Z/</url>
      
        <content type="html"><![CDATA[<p><em>Windows/Mac/IOS/Android通用的VPN搭建教程，收费的</em></p><hr><h3 id="1-Shadowrocket安装">1. Shadowrocket安装</h3><ul><li>美区<em>App Store</em>利用 <font color="#ef6d3b"><strong>$2.99</strong></font> 购买 shadowrocket app</li></ul><p><a href="https://shadowsockshelp.github.io/Shadowsocks/apple-id.html"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 注册美区 Apple ID 帐号的终极指南</a></p><ul><li>美区app如何充值？移步万能的淘宝，搜索AppStore美区礼品卡，买$3的就行</li></ul><h3 id="2-shadowsocket配置">2. shadowsocket配置</h3><ul><li>认准这个网站: <a href="https://v2ww.com/#/dashboard"><strong><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> v2ww.com</strong></a></li></ul><p>里面有详细的Shadowrocket配置教程，和梯子价格清单，<span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>建议购买月<font color="#ef6d3b"><strong>￥9.9</strong></font> 的10GB套餐</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>游戏记录：ARK方舟生存进化</title>
      <link href="/posts/160HQCD/"/>
      <url>/posts/160HQCD/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><ul><li>方舟:生存进化是一款开放世界游戏；</li><li><a href="http://www.teandy.com/">方舟听宇网</a></li><li><a href="https://ark.fandom.com/wiki/ARK_Survival_Evolved_Wiki">方舟资料网站（英文）</a></li></ul></div><hr><h2 id="说几句">说几句</h2><p>这个游戏晕死我了，两个月来玩了200小时，主要是孤岛和焦土DLC。<br>基本玩两小时就恶心发晕，我就是个菜鸡。<br>玩了100小时才知道这游戏有主线和BOSS，不过感觉没啥意思。<br>觉得最大乐趣是探图、建家、抓恐龙，并乐此不疲，像是虚拟世界的一个家园，一片净土吧…</p><h2 id="DLC介绍">DLC介绍</h2><ul><li><p>游戏包含付费DLC和免费DLC, 按照时间顺序:</p></li><li><p>付费DLC</p><ul><li><strong>孤岛（The Island）★</strong></li><li>焦土（Scorched Earth）</li><li>畸变（Aberration）</li><li>灭绝（Extinction）</li><li>创世纪一二（Genesis）</li></ul></li><li><p>免费DLC</p><ul><li>中心岛（The Center）</li><li><strong>仙境（Ragnarok）★</strong></li><li>瓦尔盖罗（Valguero）</li><li>水晶岛（Crystal Isies）</li><li>迷失岛（Lost Island）</li></ul></li></ul><ul><li>本体+全dlc安装，硬盘空间 <code>400G</code></li></ul><h2 id="闪退白框修复">闪退白框修复</h2><p><a href="https://www.bilibili.com/video/BV1NK4y147dD/?vd_source=db26a19e4b4372574c8ebde86f9333bd">【方舟问题】解决方舟所有白框问题。网络问题，驱动问题，地图问题</a></p><p>方舟这个破游戏经常会各种UE的Crash，本人遇到最多的是 <code>NetConnection</code> 的闪退，俗称 4096。<br>搜寻网上各种<s>外行和玄学</s>的解决方案，没有一个百分百有效的。<br>总结如下：</p><ul><li>使用UU加速器（没用）</li><li>插拔路由器（没试过）</li><li>清空所有浏览器缓存（没用）</li></ul><h2 id="修改本机配置">修改本机配置</h2><p><code>...\steam\steamapps\common\ARK\ShooterGame\Saved\Config\WindowsNoEditor</code></p><p>如何修改恐龙等级、刷新规则?</p><ul><li><code>GameUserSettings.ini</code>: 修改恐龙等级、刷新规则等</li></ul><p>可以订阅这个调等级的MOD:</p><ul><li><a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2182894352">Custom Dino Levels</a></li><li><a href="https://steamcommunity.com/workshop/filedetails/discussion/2182894352/2794998850882765005/">配置文档</a><br>其中官方设置的难度表示一个level的等级间隔（如5表示5级）, <code>MinLevel=30</code> 表示最小等级限制为 <code>难度 x MinLvel</code></li></ul><pre><code># GameUserSettings.ini[CustomLevelDistrib]MinLevel=15.000000MaxLevel=30.000000WantsEqualLevels=True# 刷新概率TinyWeight=1.000000 # 5-25LowWeight=0.3500000 # 30-60MediumWeight=0.250000 # 65-100HighWeight=0.250000 # 105-150</code></pre><p>重置地图请删除:</p><ul><li><code>ARK\ShooterGame\Saved\LocalProfiles</code></li></ul><h2 id="方舟私服">方舟私服</h2><p>如果在本机玩，方舟就是个单机游戏，想要和别的玩家一起玩，就得找服务器。（推荐去<a href="http://www.teandy.com/">听宇网</a>找）</p><p>一般服务器的介绍是 <strong>“PVE15通 采3驯10…”</strong></p><ul><li><p>分<code>PVE</code>/<code>PVP</code>两种服务器</p></li><li><p><code>15通</code>: 表示共有15个地图可以互通</p></li><li><p>采n驯m: 表示游戏加速的倍率</p></li></ul><h2 id="实用MOD">实用MOD</h2><table><thead><tr><th style="text-align:center">MODs</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Awesome SpyGlass</strong></td><td style="text-align:left">A+镜，观察恐龙的等级、晕眩度、加点等</td></tr><tr><td style="text-align:center"><strong>Ultra Stacks</strong></td><td style="text-align:left">可以堆叠物品，节省背包的容量！</td></tr><tr><td style="text-align:center"><strong>Automatic Death Recovery</strong></td><td style="text-align:left">死亡物品不掉路！</td></tr><tr><td style="text-align:center"><strong>Pet Finder</strong></td><td style="text-align:left">恐龙丢了用这个找！</td></tr><tr><td style="text-align:center"><strong>Kraken’s Better Dinos</strong></td><td style="text-align:left">修改刷新恐龙的等级、比例</td></tr><tr><td style="text-align:center"><strong>Upgrade Station</strong></td><td style="text-align:left">可以升级鞍具、工具的工作台！</td></tr><tr><td style="text-align:center"><strong>Baby Premium Care</strong></td><td style="text-align:left">100%留痕药、飞龙奶等！</td></tr></tbody></table><h2 id="游戏资源推荐">游戏资源推荐</h2><ul><li><a href="https://www.bilibili.com/video/BV1KK4y1Y7rL?spm_id_from=333.337.search-card.all.click">B站 老司机hot《方舟生存进化》</a></li></ul><h2 id="游戏配置（备忘）">游戏配置（备忘）</h2><p><img src="/images/ark_setting.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript概览</title>
      <link href="/posts/286HTVQ/"/>
      <url>/posts/286HTVQ/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">Note</p><ul><li>在此之前，先看看什么是<strong>JavaScript</strong>?<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Introduction">JavaScript 中文介绍</a> |<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript">What is JavaScript?</a></li><li><strong>TypeScript</strong>其实就是<code>Typed JavaScript at Any Scale.</code></li></ul></div><h3 id="ts基本特性">ts基本特性</h3><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">解释</th><th style="text-align:left">Coding</th></tr></thead><tbody><tr><td style="text-align:left"><font color="#ef6d3b"><strong>Staticlly Typed</strong></font></td><td style="text-align:left">静态类型</td><td style="text-align:left"><code>let foo = 1; foo.split(' ');</code> =&gt; 编译报错</td></tr><tr><td style="text-align:left"><font color="#ef6d3b"><strong>Weakly Typed</strong></font></td><td style="text-align:left">允许隐式类型转化</td><td style="text-align:left"><code>console.log(1 + '1');</code> =&gt; 打印11</td></tr><tr><td style="text-align:left"><font color="#ef6d3b"><strong>Type Annotations</strong></font></td><td style="text-align:left">允许类型注释</td><td style="text-align:left"><code>let foo: string = '1';</code></td></tr></tbody></table><h3 id="import-export">import, export</h3><ul><li><a href="https://blog.atomist.com/typescript-imports/">Import statements in TypeScript: which syntax to use</a></li></ul><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>import * as path from 'path</code></td><td style="text-align:left">commonjs模块</td></tr><tr><td style="text-align:left"><code>import fs = require('fs')</code></td><td style="text-align:left">commonjs模块, export=xx</td></tr><tr><td style="text-align:left"><code>const xx = require('xx)</code></td><td style="text-align:left">无类型声明</td></tr></tbody></table><h3 id="var、let、const">var、let、const</h3><ul><li><a href="https://www.tutorialsteacher.com/typescript/typescript-variable">TypeScript - Variable</a></li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">使用场景</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#ef6d3b"><strong>var</strong></font></td><td style="text-align:center">全局作用域</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><strong>let</strong></font></td><td style="text-align:center">块作用域</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><strong>const</strong></font></td><td style="text-align:center">块作用域、只读</td></tr></tbody></table><h3 id="function">function</h3><ul><li>下面是一个求和函数的示例：</li></ul><pre><code class="language-ts">function add(a: number, b: number): number {  return a + b;}</code></pre><h3 id="class">class</h3><ul><li>下面是一个类声明的示例：</li></ul><pre><code class="language-ts">class Point {  // 成员变量, 可用readonly, 不可用const  x: number;  y: number;  // 构造函数  constructor(x = 0, y = 0) {    this.x = x;    this.y = y;  }  // 成员方法  getScale(): number {    return this.x + this.y;  }}// 实例化一个类var point = new Point(1, 2)</code></pre><h3 id="参考">参考</h3><ul><li><a href="https://www.typescriptlang.org/">TypeScript官网</a></li><li><a href="https://ts.xcatliu.com/">一个中文的TypeScript入门教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Python】优雅输出</title>
      <link href="/posts/1MJH73F/"/>
      <url>/posts/1MJH73F/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">前提</p><p><code>Linux</code>命令下, 见识了如<code>gcc</code>, <code>apt</code>, <code>pip</code>之流的优雅输出；  <br>这篇博客想仿照之，借Python实现一些优美的输出与交互；</p></div><h2 id="何为优雅">何为优雅?</h2><p>鄙人低俗, 仅想从样式与外在谈论优雅<br>清晰的输出、高亮的样式… 这些就是开源软件的优雅!</p><p><strong>1. pip</strong><br><img src="/images/pip.png" alt=""></p><p><strong>2. oh-my-zsh</strong><br><img src="/images/zsh.png" alt=""></p><p><strong>3. VScode Extension</strong></p><p><strong>4. ipython</strong><br><img src="/images/ipython.png" alt=""></p><hr><h3 id="何为优雅-2">何为优雅?</h3><ul><li><p>彩色文字区分<br>如<font color="#1AAD19"><strong>SUCCEED</strong></font>，<font color="#FF1E10"><strong>ERROR</strong></font>，都应该有专门的色彩，起到警示和强调的作用;</p></li><li><p>进度条<br>对于耗时较长的程序，应该打印一个<font color="#1A9BFF"><strong>进度条</strong></font>，让用户对完成进度有一个直观的概念；</p></li><li><p>条例清晰的LOG<br>每一个指令，都该包含指引(<code>-h</code>)、运行中和运行结果的Log提示；</p></li></ul><hr><h2 id="二、ANSI实现丰富的终端样式">二、ANSI实现丰富的终端样式</h2><ul><li><a href="https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html">ANSI escape code</a></li></ul><p>ANSI是一种能想终端打印彩色输出的标准编码，你可以理解为<strong>富文本</strong>!</p><p>这是一段python示例代码，我们需要关注<code>0, 30, 42</code>这三个数值:</p><ul><li><font color="#FF1E10"><strong><code>print '\033[0;30;42m' + '...' + '\033[0m'</code></strong></font></li></ul><table><thead><tr><th style="text-align:center">内容</th><th style="text-align:center">图示</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#ef6d3b"><strong>Style</strong></font></td><td style="text-align:center">0</td><td style="text-align:center">字体样式</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><strong>Bgcolor</strong></font></td><td style="text-align:center">30</td><td style="text-align:center">背景色</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><strong>Color</strong></font></td><td style="text-align:center">42</td><td style="text-align:center">字色</td></tr></tbody></table><ul><li>下图罗列了一些字色和背景色：</li></ul><p><img src="/images/ANSI.png" alt=""></p><hr><h3 id="1-Style">1. Style</h3><p><font color="#ef6d3b"><strong>下面是常用的字体样式</strong></font></p><table><thead><tr><th style="text-align:center">作用</th><th style="text-align:center">编码</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">Normal</td><td style="text-align:center"><code>\033[0m</code></td><td style="text-align:center">Hello World</td></tr><tr><td style="text-align:center">Bold</td><td style="text-align:center"><code>\033[1m</code></td><td style="text-align:center"><strong>Hello World</strong></td></tr><tr><td style="text-align:center">Underlined</td><td style="text-align:center"><code>\033[4m</code></td><td style="text-align:center"><u>Hello World</u></td></tr><tr><td style="text-align:center">Changing</td><td style="text-align:center"><code>\033[5m</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Delete</td><td style="text-align:center"><code>\033[9m</code></td><td style="text-align:center"><s>Hello World</s></td></tr></tbody></table><hr><h3 id="2-Color">2. Color</h3><div class="admonition todo"><p class="admonition-title">todo</p><p>下面汇总一些常用颜色</p></div><table><thead><tr><th style="text-align:center">颜色</th><th style="text-align:center">编码</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">black</td><td style="text-align:center"><code>\033[30m</code></td><td style="text-align:center">Hello World</td></tr><tr><td style="text-align:center">red</td><td style="text-align:center"><code>\033[31m</code></td><td style="text-align:center"><font color="#FF0000"><strong>Hello World</strong></font></td></tr><tr><td style="text-align:center">green</td><td style="text-align:center"><code>\033[32m</code></td><td style="text-align:center"><font color="#1AAD19"><strong>Hello World</strong></font></td></tr><tr><td style="text-align:center">yellow</td><td style="text-align:center"><code>\033[33m</code></td><td style="text-align:center"><font color="#f3bb35"><strong>Hello World</strong></font></td></tr><tr><td style="text-align:center">blue</td><td style="text-align:center"><code>\033[34m</code></td><td style="text-align:center"><font color="#1A9BFF"><strong>Hello World</strong></font></td></tr><tr><td style="text-align:center">white</td><td style="text-align:center"><code>\033[37m</code></td><td style="text-align:center"><font color="#FFFFFF"><strong>Hello World</strong></font></td></tr></tbody></table><hr><h3 id="3-Cursor">3. Cursor</h3><p><font color="#ef6d3b"><strong>如何控制箭头（终端的闪烁符）移动？</strong></font></p><ul><li>下面<code>{n}</code>中表示移动的单位数</li></ul><table><thead><tr><th style="text-align:left">作用</th><th style="text-align:left">编码</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">Up</td><td style="text-align:left"><code>\033[{n}A</code></td><td style="text-align:left">上移箭头</td></tr><tr><td style="text-align:left">Down</td><td style="text-align:left"><code>\033[{n}B</code></td><td style="text-align:left">下移箭头</td></tr><tr><td style="text-align:left">Right</td><td style="text-align:left"><code>\033[{n}C</code></td><td style="text-align:left">右移箭头</td></tr><tr><td style="text-align:left">Left</td><td style="text-align:left"><code>\033[{n}D</code></td><td style="text-align:left">左移箭头</td></tr><tr><td style="text-align:left">Next Line</td><td style="text-align:left"><code>\033[{n}E</code></td><td style="text-align:left">移到下一行</td></tr><tr><td style="text-align:left">Prev Line</td><td style="text-align:left"><code>\033[{n}F</code></td><td style="text-align:left">移到上一行</td></tr><tr><td style="text-align:left">Set Column</td><td style="text-align:left"><code>\033[{n}G</code></td><td style="text-align:left">第n列</td></tr><tr><td style="text-align:left">Set Position</td><td style="text-align:left"><code>\033[{n};{m}H</code></td><td style="text-align:left">第n行m列</td></tr><tr><td style="text-align:left">Clear Screen</td><td style="text-align:left"><code>\033[{n}J</code></td><td style="text-align:left">清屏</td></tr><tr><td style="text-align:left">Clear Line</td><td style="text-align:left"><code>\033[{n}K</code></td><td style="text-align:left">清行</td></tr></tbody></table><ul><li><p>对于清屏和清行:</p><ul><li><code>J = 0</code>: 清除光标到末尾（行位）</li><li><code>J = 1</code>: 清除光标到开头（行首）</li><li><code>J = 2</code>: 清除整个屏幕（整行）</li></ul></li><li><p><font color="#ef6d3b"><strong>我们可以借此实现一个百分比的进度更新：</strong></font></p></li></ul><pre><code class="language-python">for i in range(0, 100): # 10秒跑完    time.sleep(0.1)    sys.stdout.write(u"\u001b[100D" + str(i + 1) + "%")    sys.stdout.flush()</code></pre><p><img src="/images/Loading.gif" alt=""></p><ul><li><font color="#ef6d3b"><strong>下面模拟一个实时滚动的进度条，且只停留在最底栏</strong></font></li></ul><pre><code class="language-python">n = 10for i in range(n):    sys.stdout.write(u"\033[-1;0H")    sys.stdout.write(u'\033[2K')    sys.stdout.write(u'\033[100D')    print i    print 'Processing: [' + '#' * i + '.' * (n - 1 - i) + ']' + ' %d%%' % (i+1),    sleep(1)</code></pre><p><img src="/images/process.gif" alt=""></p><hr><h2 id="参考">参考</h2><blockquote><ul><li><a href="https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html">ANSI escape code</a></li><li><a href="https://stackoverflow.com/questions/287871/how-to-print-colored-text-to-the-terminal">How to print colored text to the terminal</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】性能分析</title>
      <link href="/posts/2NFFW5M/"/>
      <url>/posts/2NFFW5M/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">NOTE</p><p>推荐最快的Profile方法:<br><code>python -m cProfile -o tmp.prof xxx.py</code><br><code>snakeviz tmp.prof</code></p></div><h2 id="Profiler工具原理">Profiler工具原理</h2><p>性能分析的原理是什么？有哪些常用的profile方法呢？</p><hr><p><strong>1. Instrumentation （插装）</strong></p><p>这应该是最容易理解的方式，看下面代码</p><pre><code class="language-python">import timet1 = time.time()# do somethingt2 = time.time()cost_time = t2 - t1 # s</code></pre><ul><li><p>插装的本质就是：统计运行时间或次数</p></li><li><p>常见方法：</p><ul><li>1.首尾手动记录时间/次数…</li><li>2.profile工具自动插入源码；</li><li>3.profile工具修改汇编码/中间码；</li></ul></li></ul><div class="admonition warning"><p class="admonition-title">海森堡Bug</p><p>由于修改了源码，插装有概率会使程序发生不一样的结果，尤其是多进程的情况下；</p></div><hr><p><strong>2. Sampling （采样）</strong></p><p>每隔一段时间中断进程，获取当前堆栈信息，并从统计学上估计每段代码的运行时间；</p><ul><li><p><strong>Visual Studio Profiler</strong> 就是基于采样实现</p></li><li><p>几乎大部分Profiler都是采样实现，因为它有如下几个优点：</p><ul><li>1.不需要修改代码，不需要重新编译；</li><li>2.可以动态修改中断的interval，控制采样精度和开销的平衡；</li><li>3.对程序的性能影响小，结果可靠；</li></ul></li></ul><h2 id="Python-Profiler">Python Profiler</h2><p>下面介绍几个常用的python profile库：</p><p><strong>[1. cProfile]</strong>(<a href="https://docs.python.org/2.7/library/profile.html">https://docs.python.org/2.7/library/profile.html</a>)</p><ul><li>这是一段官方文档示例</li></ul><pre><code class="language-python">import cProfile, pstats, StringIOpr = cProfile.Profile()pr.enable()# ... do something ...pr.disable()s = StringIO.StringIO()sortby = 'cumulative'ps = pstats.Stats(pr, stream=s).sort_stats(sortby)ps.print_stats()print s.getvalue()</code></pre><ul><li>下面是cProfile的结果，很清晰：<ul><li><font color="#FF1E10"><strong>totime</strong></font>：函数本身花费时间</li><li><font color="#1A9BFF"><strong>cumtime</strong></font>：函数累计花费时间（包含子函数递归）</li></ul></li></ul><p><img src="/images/cprofile.png" alt=""></p><hr><p><strong>[2. snakeviz]</strong>(<a href="https://jiffyclub.github.io/snakeviz/">https://jiffyclub.github.io/snakeviz/</a>)<br>snakeviz其实是解析了cProfile的结果，做了个网页端的可视化界面；</p><p><img src="/images/snakeviz.png" alt=""></p><ul><li><strong>snakeviz使用步骤：</strong></li></ul><ol><li><p>先使用cProfile生成prof文件：<br><code>python -m cProfile -o res.prof demo.py</code></p></li><li><p>再解析prof生成网页：<br><code>snakeviz res.prof</code></p></li><li><p>得到如上精美的profiler火焰图；</p></li></ol><h2 id="Profile注意点">Profile注意点</h2><p><strong>1. 多进程</strong><br>不要把cProfile放在父进程，不然profile结果只有<code>acquire</code>；<br>这是因为父进程只起了调度和fork的作用，要在子进程中 profile；<br><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://stackoverflow.com/questions/57617496/90-of-the-time-is-spent-on-method-acquire-of-thread-lock-objects">Stackoverflow: 90% of the time is spent on method ‘acquire’ of ‘thread.lock’ objects</a></p><h2 id="参考资料">参考资料</h2><ul><li><a href="https://www.cnblogs.com/zhao-zongsheng/p/13067733.html">CPU性能分析工具原理</a></li><li><a href="https://stackoverflow.com/questions/582336/how-can-you-profile-a-python-script">How can you profile a Python script?</a></li><li><a href="https://dirtysalt.github.io/html/on-python-profiling.html">Python程序性能分析</a></li><li><a href="https://blog.xizhibei.me/2021/01/10/poor-mans-profiler/">穷人的程序性能分析器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】多进程multiprocess</title>
      <link href="/posts/2A7ENQS/"/>
      <url>/posts/2A7ENQS/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>多进程（并发）是现代计算机的基本组成之一；介绍了进程、线程、协程是什么，以及相互关系；</p></div><hr><h2 id="1-一篇CSDN博客">1. 一篇CSDN博客</h2><p><img src="/images/csdn_multiprocess.png" alt=""></p><p>这是我大学操作系统期间写的<a href="https://blog.csdn.net/luhao19980909/article/details/89403233">一篇CSDN博客</a>，看到有3w+访问和700+的收藏，这是我意想不到的；<br>回头看这篇文章，几乎没有专业词汇，而是用类比的方式解释了进程相关的基础知识；<br>摘取片段如下：</p><p>=====================================================<br><code>单CPU</code>：一台单核处理器计算机 =  一个车间；<br><code>多CPU</code>：一台多核处理器计算机 =  一座工厂；</p><p><code>进程</code>：一个车间 = 一个进程； （即一个运行的程序）<br><code>多进程</code>：一座工厂可以同时运行多个车间；<br><code>CPU和进程</code>：<strong>单CPU只能同时运行单个进程，多CPU可以同时运行多个进程</strong>。</p><p><code>线程</code>：车间内一个工人 = 一个线程；<br><code>进程与线程关系</code>：<strong>一个进程可以包括多个线程</strong>。</p><p>=====================================================</p><h3 id="什么是进程-Process">什么是进程 (Process)</h3><p><font color="#ef6d3b"><strong>A process is a program that is running on your computer</strong></font></p><ul><li>单核机器为什么给人<em>可以同时处理一堆程序</em> 的错觉？似乎和多核差不多？</li></ul><p>如下图，这些任务其实是依次执行，这叫<font color="#ef6d3b"><strong>并发 (concurrency)</strong></font>；<br><img src="/images/single-cpu.png" alt=""></p><p>如下图，对于多CPU机器，很多任务可以同时执行，这叫<font color="#ef6d3b"><strong>并行 (parallelism)</strong></font>；<br><img src="/images/multi-cpu.png" alt=""></p><hr><h3 id="进程间通信-Process-Communication">进程间通信 (Process Communication)</h3><p>进程间是互相独立，不共享任何数据的，那么跨进程如何交互呢？</p><ul><li><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.tutorialspoint.com/what-is-interprocess-communication">What is Interprocess Communication?</a></li></ul><div class="admonition todo"><p class="admonition-title">进程通信的例子</p><p>linux grep、windows任务管理器...</p></div><hr><h3 id="什么是线程-thread">什么是线程 (<a href="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/4_Threads.html#:~:text=A%20thread%20is%20a%20basic,out%20at%20any%20given%20time.">thread</a>)</h3><ul><li><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread">What is the difference between a process and a thread?</a></li></ul><!-- 最直接的区别就是：<font color="#ef6d3b">**进程间不共享内存，但是线程是共享内存的！**</font> --><ul><li>先问一个问题：<font color="#ef6d3b">为什么需要线程，只靠进程不够使用吗？</font></li></ul><div class="admonition warning"><p class="admonition-title">假如OS中只有进程...</p><p>处理input的进程，每当用户敲击键盘，系统就要给出相应处理；想象当你以飞快的速度敲击作输入，而进程又处理不过来呢，电脑是不是就巨卡无比？</p></div><ul><li><p>多线程的意义：<strong>某个任务会阻塞，但又不希望影响到别的任务进行下去；</strong></p></li><li><p>如图所示：</p><ul><li><ol><li>线程存在于进程内，且多线程共享进程内存；</li></ol></li><li><ol start="2"><li>多线程间有自己的寄存器和堆栈，互不影响；<br><img src="/images/threads.png" alt=""></li></ol></li></ul></li><li><p>下图是windows的任务管理器，可以清楚得看到<font color="#FF1E10"><strong>进程</strong></font>与<font color="#1AAD19"><strong>线程</strong></font>之间的从属关系！</p></li></ul><p><img src="/images/task_manager.png" alt=""></p><hr><h3 id="什么是协程-coroutinue">什么是协程 (<a href="https://stackoverflow.com/questions/553704/what-is-a-coroutine">coroutinue</a>)</h3><ul><li>通俗讲，协程是对线程的一种更小粒度的划分 （这里就不多介绍了）</li></ul><div class="admonition note"><p class="admonition-title">扩展阅读</p><p><a href="https://www.csl.mtu.edu/cs4411.ck/www/NOTES/non-local-goto/coroutine.html">借助 C setjmp.h 实现简单的协程</a></p></div><hr><h2 id="2-Python">2. Python?</h2><p>写到这里突然扪心自问，这与python有何关系<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>？<br>本来是使用Python2的<code>multiprocessing</code>和<code>subprocess</code>踩了坑，想写篇文章记录下；<br>但随着白天查阅资料，大多问题已然解决；<span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>等以后有缘再来补上吧</p><hr><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/luhao19980909/article/details/89403233">进程和线程的深入理解</a></li><li><a href="https://www.tutorialspoint.com/what-is-interprocess-communication">What is Interprocess Communication?</a></li><li><a href="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/4_Threads.html">Threads</a></li><li><a href="https://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread">What is the difference between a process and a thread?</a></li><li><a href="https://stackoverflow.com/questions/553704/what-is-a-coroutine">What is a coroutine?</a></li><li><a href="https://www.csl.mtu.edu/cs4411.ck/www/NOTES/non-local-goto/coroutine.html">Building Coroutines</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源汇总帖（效率、专业知识）</title>
      <link href="/posts/FYK74B/"/>
      <url>/posts/FYK74B/</url>
      
        <content type="html"><![CDATA[<h2 id="效率工具">效率工具</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.listary.com/">Listary</a></td><td style="text-align:left">全局文件搜索，类似于everything</td></tr><tr><td style="text-align:left"><a href="https://www.snipaste.com/">Snipaste</a></td><td style="text-align:left">截图神器，支持桌面悬浮、历史记录</td></tr><tr><td style="text-align:left"><a href="https://www.gpsoft.com.au/">Directory Opus</a></td><td style="text-align:left">Windows资源管理器 神器!</td></tr><tr><td style="text-align:left"><a href="https://www.scootersoftware.com/">Beyond Compare</a></td><td style="text-align:left">代码比对神器，看Diff</td></tr><tr><td style="text-align:left"><a href="https://github.com/zhongyang219/TrafficMonitor">Traffic Monitor</a></td><td style="text-align:left">CPU、内存监视器</td></tr></tbody></table><h2 id="网页工具">网页工具</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://jsoncrack.com/editor">jsoncrack</a></td><td style="text-align:left">json在线可视化</td></tr><tr><td style="text-align:left"><a href="https://godbolt.org/">godbolt</a></td><td style="text-align:left">在线看python、cpp汇编</td></tr><tr><td style="text-align:left"><a href="https://www.speedscope.app/">speedscope</a></td><td style="text-align:left">在线生成火焰图</td></tr><tr><td style="text-align:left"><a href="https://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html">m3u8-downloader</a></td><td style="text-align:left">网页m3u8视频下载</td></tr></tbody></table><h2 id="专业书籍">专业书籍</h2><ul><li><p><a href="https://raw.githubusercontent.com/TIM168/technical_books/master/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD%E7%9D%80.pdf">《汇编语言》（王爽）</a><br>交叉：计算机系统架构 + 汇编 + Unix操作系统</p></li><li><p><a href="https://dokumen.tips/documents/data-abstraction-problem-solving-with-c-walls-and-mirrors-6th-edition.html">《Data Abstraction and Problem Solving With C++》</a><br>交叉：算法/数据结构 + C++11语言特性 + 设计模式与思想</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Batch脚本</title>
      <link href="/posts/2R1N3XK/"/>
      <url>/posts/2R1N3XK/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>Batch(批处理)是 <em>Microsoft</em> 提供的一门基于cmd.exe解释器的脚本语言；客观讲很不好用，但是windows下开发尝尝难以避免；</p></div><hr><h2 id="Batch常用语法">Batch常用语法</h2><p><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://en.wikibooks.org/wiki/Windows_Batch_Scripting"><font color="#ef6d3b"><strong>传送门: Windows Batch Scripting</strong></font></a></p><hr><h3 id="1-基本指令">1. 基本指令</h3><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">作用</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#FF1E10"><strong>echo</strong></font></td><td style="text-align:center">输出字符</td><td style="text-align:left"><font color="#1AAD19"><strong>echo hello world</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>rem</strong></font></td><td style="text-align:center">注释</td><td style="text-align:left"><font color="#1AAD19"><strong>rem 这是一条注释</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>pause</strong></font></td><td style="text-align:center">暂停命令</td><td style="text-align:left"><font color="#1AAD19"><strong>pause</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>call</strong></font></td><td style="text-align:center">调用指定bat</td><td style="text-align:left"><font color="#1AAD19"><strong>call demo.bat</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>start</strong></font></td><td style="text-align:center">调用exe</td><td style="text-align:left"><font color="#1AAD19"><strong>start demo.exe</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>goto</strong></font></td><td style="text-align:center">跳转到:xx</td><td style="text-align:left"><font color="#1AAD19"><strong>goto 1    :1  call demo.bat</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>set</strong></font></td><td style="text-align:center">设置变量</td><td style="text-align:left"><font color="#1AAD19"><strong>set path=C:\</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>@</strong></font></td><td style="text-align:center">屏蔽回显</td><td style="text-align:left"><font color="#1AAD19"><strong>@echo off</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>&gt;</strong></font></td><td style="text-align:center">重定向</td><td style="text-align:left"><font color="#1AAD19"><strong>echo test &gt; a.txt</strong></font></td></tr><tr><td style="text-align:center"><font color="#FF1E10"><strong>|</strong></font></td><td style="text-align:center">管道，前面的输出重定向到后面的命令</td><td style="text-align:left"><font color="#1AAD19"><strong>echo /Y | start demo.exe</strong></font></td></tr></tbody></table><hr><h3 id="2-高级语法">2. 高级语法</h3><h4 id="1-判断某个路径是否存在">1. 判断某个路径是否存在</h4><p><code>if exist C:\Python27\python.exe ( ... )</code></p><h4 id="2-寻找python的sys-path路径">2. 寻找python的sys path路径</h4><p><code>for /f %%p in ('where python') do(</code><br><code>set PY=%%p</code><br><code>exit</code><br><code>)</code></p><h4 id="3-关闭batch指令的打印（回显）">3. 关闭batch指令的打印（回显）</h4><p><code>@echo off</code></p><h4 id="4-利用管道回到命令行的输入请求">4. 利用管道回到命令行的输入请求</h4><p>可以将/Y作为输出传给后面的指令<br><code>echo /Y | xxxxx</code></p><hr><h3 id="3-建议">3. 建议</h3><p><font color="#ef6d3b"><strong>Windows Batch不是很好写，建议用Python脚本或Linux Shell…</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regex：正则表达式</title>
      <link href="/posts/3SAT4K7/"/>
      <url>/posts/3SAT4K7/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">NOTE</p><p><strong>regex：regular expressions</strong></p><p>本文介绍了正则表达式的基本常用语法</p><p>这篇文章有一些进阶regex应用 <a href="/posts/6X02Y7/">【vscode插件】function decoration</a></p></div><h2 id="Good-Resources">Good Resources</h2><ul><li><p><font color="#1A9BFF"><strong>下面是一些介绍Regex的网站</strong></font>：<br>这些内容很优秀，我写博客仅仅是为了自我记录、及筛选对自己有用的部分；</p><ul><li><a href="https://github.com/ziishaned/learn-regex">learn-regex (github)</a></li><li><a href="https://regexr.com/">Regex Online test</a></li><li><a href="https://regexone.com/">RegexOne</a></li><li><a href="https://regexlearn.com/">RegexLearn</a></li></ul></li><li><p>Regex在线调试:<br><a href="https://regex101.com/"><strong>regex101</strong></a></p></li><li><p>推荐一个在线Regex做题的网站，难度很高!<br><a href="https://alf.nu/RegexGolf"><strong>https://alf.nu/RegexGolf</strong></a></p></li><li><p>这是一个在线regex测试的网站：<br><a href="https://tool.oschina.net/regex/"><strong>https://tool.oschina.net/regex/</strong></a></p></li></ul><h2 id="Regex-Grammar">Regex Grammar</h2><h3 id="1-完全匹配">1.完全匹配</h3><p>1.区分大小写、空格等，严格匹配每个字母的顺序；<br>2.实际用<code>(xyz)</code>表示完全匹配；</p><ul><li><font color="#ef6d3b"><strong>(The)</strong></font> =&gt; <font color="#ef6d3b"><strong>The</strong></font> fat cat sat on the mat.</li></ul><h3 id="2-基本字符">2.基本字符</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">用法</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配换行符外的任意字符</td><td style="text-align:center"><font color="#ef6d3b"><strong>.ar</strong></font> =&gt; The <font color="#ef6d3b"><strong>car</strong></font> <font color="#ef6d3b"><strong>par</strong></font>ked in the <font color="#ef6d3b"><strong>gar</strong></font>age.</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:center">匹配[]内的任意字符</td><td style="text-align:center"><font color="#ef6d3b"><strong>[Tt]he</strong></font> =&gt; <font color="#ef6d3b"><strong>The</strong></font> car parked in <font color="#ef6d3b"><strong>the</strong></font> garage.</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">反义符</td><td style="text-align:center"><font color="#ef6d3b"><strong>[^c]ar</strong></font> =&gt; The car <font color="#ef6d3b"><strong>park</strong></font>ed in the <font color="#ef6d3b"><strong>gar</strong></font>age.</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配$\geq0$个字符</td><td style="text-align:center"><font color="#ef6d3b"><strong>[a-z]</strong>*</font> =&gt; T<font color="#ef6d3b"><strong>he car parked in the garage</strong></font> #21.</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配$\geq1$个字符</td><td style="text-align:center"><font color="#ef6d3b"><strong>c.+t</strong></font> =&gt; The fat <font color="#ef6d3b"><strong>cat sat on the mat</strong></font>.</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">?之前的为可选</td><td style="text-align:center"><font color="#ef6d3b"><strong>[T]?he</strong></font> =&gt; <font color="#ef6d3b"><strong>The</strong></font> car is parked in t<font color="#ef6d3b"><strong>he</strong></font> garage.</td></tr><tr><td style="text-align:center">{n, m}</td><td style="text-align:center">匹配$n\leq k\leq m$的重复次数</td><td style="text-align:center"><font color="#ef6d3b"><strong>[0-9]{3}</strong></font> =&gt; The number was 9.<font color="#ef6d3b"><strong>999</strong></font>7 but we rounded it off to <font color="#ef6d3b"><strong>10</strong></font>.0.</td></tr><tr><td style="text-align:center">(xyz)</td><td style="text-align:center">完全匹配</td><td style="text-align:center"><font color="#ef6d3b"><strong>the</strong></font> =&gt; The fat cat sat on <font color="#ef6d3b"><strong>the</strong></font> mat.</td></tr><tr><td style="text-align:center">A|B</td><td style="text-align:center">匹配A或B字符</td><td style="text-align:center"><font color="#ef6d3b"><strong>(c|g|p)ar</strong></font> =&gt; The <font color="#ef6d3b"><strong>car</strong></font> is <font color="#ef6d3b"><strong>par</strong></font>ked in the <font color="#ef6d3b"><strong>gar</strong></font>age.</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">转义，表示<code>[]().?</code>等</td><td style="text-align:center"><font color="#ef6d3b"><strong>\.</strong></font> =&gt; a<font color="#ef6d3b"><strong>.</strong></font>b</td></tr></tbody></table><h3 id="3-特殊匹配">3.特殊匹配</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">用法</th><th style="text-align:center">等同于</th></tr></thead><tbody><tr><td style="text-align:center">\w</td><td style="text-align:center">所有数字or字母</td><td style="text-align:center">[a-zA-Z0-9_]</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">所有非数字or字母</td><td style="text-align:center">[^\w]</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">所有数字</td><td style="text-align:center">[0-9]</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">所有非数字</td><td style="text-align:center">[^\d]</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">所有空白字符</td><td style="text-align:center">[\t\n\f\r\p{Z}]</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">所有非空白字符</td><td style="text-align:center">[^\s]</td></tr></tbody></table><h2 id="Regex进阶">Regex进阶</h2><h3 id="g-m-i-Flags"><code>/g /m /i</code>: Flags</h3><table><thead><tr><th style="text-align:center">Flag</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td style="text-align:center">Case insensitive: 忽略大小写</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">Global Search:全局匹配</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">Multiline: 匹配多行</td></tr></tbody></table><h3 id="lazy-matching"><code>?</code>: lazy matching</h3><p>默认的正则会匹配尽可能多满足条件的字符 (greedy matching)<br>通过使用<code>?</code>, 可以在第一次匹配到的时候即停止 (lazy matching)</p><table><thead><tr><th style="text-align:center">MODE</th><th style="text-align:center">grammar</th><th style="text-align:center">result</th></tr></thead><tbody><tr><td style="text-align:center">normal</td><td style="text-align:center"><code>/(.*at)/</code></td><td style="text-align:center"><code>The fat cat sat on the mat</code></td></tr><tr><td style="text-align:center">lazy</td><td style="text-align:center"><code>/(.*?at)/</code></td><td style="text-align:center"><code>The fat</code> cat sat on the mat</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Depth testing</title>
      <link href="/posts/2M66594/"/>
      <url>/posts/2M66594/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>深度测试，决定了投影空间下的物体是否被遮挡，即是否需要绘制；一些关键的技术，离不开精确的深度测试结果；</p></div><hr><h3 id="Depth-test-and-Depth-buffer">Depth-test and Depth-buffer</h3><ul><li><p>先阅读这篇文章：<br><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.luhao.wiki/posts/2AR5BC4/">Occlusion: 可见性与剔除</a></p></li><li><p><font color="#ef6d3b"><strong>depth buffer</strong></font> (z-buffer)</p></li></ul><p>depth-buffer存储着每个pixel的深度信息（可以理解为一个0-1范围的float值）；<br>而depth-test就是<font color="#ef6d3b"><strong>写深度（write   depth-buffer）</strong></font>的过程</p><p><img src="/images/zbuffer.png" alt=""></p><div class="admonition warning"><p class="admonition-title">depth-test是在pixel shader后进行</p><p>为什么是这样的次序？如果在pixel shader之前做深度测试，有什么后果呢？</p></div><hr><h2 id="OpenGL-Code">OpenGL Code</h2><h4 id="glEnable">glEnable</h4><p>OpenGL是默认关闭深度测试的，因此需要手动开启它；<br>这句标志着，depth-buffer是可写的，且会在每一帧不断写入它；<br><code>glEnable(GL_DEPTH_TEST); </code></p><h4 id="glClear">glClear</h4><p>每一帧绘制完，需要手动清空这一帧的color-buffer和depth-buffer；<br>不然会残留上一帧的深度数据，导致显示Bug；<br><code>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  </code></p><h4 id="glDepthMask">glDepthMask</h4><p>当某一帧不想写深度了怎么办？<br>它用来标记depth-buffer是只读，还是可写；<br><code>glDepthMask(GL_FALSE);  </code></p><h4 id="glDepthFunc">glDepthFunc</h4><p>深度测试，会将每个pixel新的深度信息，与旧的比较，<font color="#ef6d3b">如果满足条件则通过（写入并覆盖旧值）</font>；<br>下面一些参数是不同的通过规则：</p><table><thead><tr><th style="text-align:center">Function</th><th style="text-align:center">Desc</th></tr></thead><tbody><tr><td style="text-align:center">GF_ALWAYS</td><td style="text-align:center">永不通过，后画的在前面，与远近无关</td></tr><tr><td style="text-align:center">GL_NEVER</td><td style="text-align:center">与上面相反</td></tr><tr><td style="text-align:center">GL_LESS</td><td style="text-align:center"><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 小值通过</td></tr><tr><td style="text-align:center">GL_EQUAL</td><td style="text-align:center">等于的通过</td></tr><tr><td style="text-align:center">GL_GREATER</td><td style="text-align:center">大于的通过，远的反倒画在前面</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><hr><h2 id="Depth-precision">Depth precision</h2><ul><li>z-value，也就是深度值，是怎么计算的呢？</li></ul><h3 id="线性方案：">线性方案：</h3><p><font color="#0288D1"><strong>$$Z = \frac {z - near} {far - near}， Z \in [0, 1]$$</strong></font></p><ul><li>缺点：<br>近处和远处的depth，拥有一样的精度；<br>是不是很浪费？游戏中我们更关注靠近相机的物体！</li></ul><h3 id="非线性方案：">非线性方案：</h3><p>不如把$z$取个倒数，这样是不是近处的精度就更大了呢？</p><p><font color="#0288D1"><strong>$$Z = \frac {1 / z - 1 / near} {1 / far - 1 / near}， Z \in [0, 1]$$</strong></font></p><p><img src="/images/depthvalue.png" alt=""></p><hr><h2 id="Debug输出z-buffer">Debug输出z-buffer</h2><div class="admonition todo"><p class="admonition-title">TODO</p><ol><li>调试输出，需要转化到NDC空间，感受下z-buffer的变化</li><li>多截图，多说明</li></ol></div><hr><h2 id="Z-fighting">Z-fighting</h2><p>这是一个常见的artifact：当两个三角面离得足够近（coplane）时，做深度测试时由于精度问题，导致两个三角面的计算结果总是反复横跳的，表现上是奇怪的锯齿花纹：</p><p><img src="/images/zfighting.png" alt=""></p><hr><h3 id="解决方案">解决方案</h3><ul><li><p>避免物体摆放过近；</p></li><li><p>增大近裁面的值，相当于提高了整体的z精度；</p></li><li><p>提高z-buffer的精度，比如从24bit -&gt; 32bit，但是带宽消耗也变大了；</p></li></ul><hr><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://learnopengl.com/Advanced-OpenGL/Depth-testing">Depth-testing</a></li><li><a href="https://blog.devgenius.io/computer-graphics-depth-buffer-test-5c29807cf475">Depth Buffer and Z-fighting</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Model and Mesh</title>
      <link href="/posts/2WF6HFQ/"/>
      <url>/posts/2WF6HFQ/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>实际的游戏开发中，（模型）美术会制作<code>fbx</code>,<code>max</code>等资源给程序使用;因此我们要讨论如何导入，以及如何渲染这些3D模型</p></div><hr><h2 id="3D-Formats">3D Formats</h2><p>美术使用的3D软件很多，如Blender、3DMax、Maya等等；<br>不同软件有自己的3D模型格式（虽然大都提供了互相导入导出），所以了解这些常见的格式很关键；</p><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">FBX</td><td style="text-align:center">含动画、材质、骨骼等</td></tr><tr><td style="text-align:center">glTF</td><td style="text-align:center">含动画、材质、骨骼等几乎所有信息</td></tr><tr><td style="text-align:center">OBJ</td><td style="text-align:center">仅模型和材质信息</td></tr></tbody></table><hr><h3 id="FBX">FBX</h3><p><font color="#ef6d3b"><strong>.FBX</strong></font> 是<em>MotionBuilder</em>使用的格式，它是一个动画制作平台；</p><ul><li>FBX支持动画、材质、贴图、骨骼、灯光、摄像机等信息；</li><li>FBX支持法线和贴图坐标，可以写入贴图路径；</li><li><a href="https://en.wikipedia.org/wiki/FBX">Wikipedia: FBX</a></li></ul><hr><h3 id="glTF">glTF</h3><p><font color="#ef6d3b"><strong>.gltf</strong></font> 是OpenGL和Vulkan背后的3D图形标准组织Khronos所定义，它具有最标准与精简的格式，可谓<strong>3D模型的JPG</strong>；</p><ul><li>gltf支持动画、材质、场景、摄像机等几乎所有，甚至可以包含shader程序；</li><li>gltf采用json的格式，因此可读性和兼容性很高；</li><li>gltf可以编译成二进制：bgltf；</li><li><a href="https://en.wikipedia.org/wiki/GlTF">wikipedia: GLTF</a></li></ul><hr><h3 id="OBJ">OBJ</h3><p><font color="#ef6d3b"><strong>.obj</strong></font> 是<em>Wavefront</em>公司推出的跨平台3D模型格式；</p><ul><li>OBJ是纯3D模型，不包含动画（区别FBX）、贴图路径、材质等信息；</li><li>OBJ支持法线和贴图坐标，但需要手动制认贴图；</li><li><a href="https://en.wikipedia.org/wiki/Wavefront_.obj_file">Wikipedia: Wavefront.obj</a></li></ul><p>这是一篇介绍OBJ的好文章: <span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-7-model-loading/">Tutorial 7 : Model loading</a></p><ul><li><font color="#ef6d3b"><strong>OBJ格式分析</strong></font></li></ul><p>这是一个简单的Cube的obj文件:</p><pre><code class="language-python"># Desc xxx 这里都是注释mtllib cube.mtl # mathlib或usemtl记录了使用的材质# v是vertexv 1.000000 -1.000000 -1.000000v 1.000000 -1.000000 1.000000...# vt是texture uvvt 0.748573 0.750412vt 0.749279 0.501284...# vn是normalvn 0.000000 0.000000 -1.000000vn -1.000000 -0.000000 -0.000000...# f是face, 描述每个三角面的v/vt/vns offf 5/1/1 1/2/1 4/3/1f 5/1/1 4/3/1 8/4/1</code></pre><p><font color="#ef6d3b"><strong>f（face）怎么理解</strong></font></p><ul><li>假设对于某一行：<code>f 8/11/7 7/12/7 6/10/7</code>：<ul><li><code>8/11/7</code>是三角面的第一个点；</li><li><code>7/12/7</code>是三角面的第二个点；</li><li><code>6/10/7</code>是三角面的第三个点；</li></ul></li><li>对于每个三角面：<ul><li><code>8</code>是指第8个vertex，找对应的<code>v</code>；</li><li><code>11</code>是指第11个vertex texture uv，找对应的<code>vt</code>；</li><li><code>7</code>是指第7个vertex normal，找对应的<code>vn</code>；</li></ul></li><li>以上利用了索引（indices）的思想，本质是用时间换空间，节省了内存！</li></ul><div class="admonition warning"><p class="admonition-title">动手尝试</p><p>这么看下来，是不是自己也可以写一个<code>obj</code>的解析器了呢？</p></div><hr><h2 id="Mesh">Mesh</h2><ul><li><strong>既然Model是由很多Mesh组成</strong>，那么什么是Mesh？</li></ul><p><font color="#ef6d3b">A mesh is a collection of vertices, edges and faces that define the shape of a 3D object.</font><br>mesh是一些顶点、边、面的组合，它们定义了一个3D物体的形状.</p><ul><li><strong>我们通常用triangle mesh来代表物体</strong>，为什么？</li></ul><p><font color="#ef6d3b">几乎任何图形都可以用多个三角形表示</font>，比如一个圆，可以是无数个三角形模拟而成；<br>所以三角面越多越复杂，往往意味着模型的面数越高、精度越高；（如下图）</p><p><img src="/images/triagnle_rabbit.png" alt=""></p><hr><h2 id="Assimp">Assimp</h2><ul><li><a href="http://assimp.org/">Open Asset Import Library</a>: 一款支持多种模型格式导入与加载的标准库</li></ul><p>下图是Assimp中一个model的架构：</p><p><img src="/images/assimp.png" alt=""></p><hr><h3 id="font-color-ef6d3b-Scene-font"><font color="#ef6d3b"><strong>Scene</strong></font></h3><p>scene包含一个RootNode指针，以及所有的Mesh和Material对象；</p><h3 id="font-color-ef6d3b-RootNode-font"><font color="#ef6d3b"><strong>RootNode</strong></font></h3><p>RootNode对象中的Children[]中，递归包含了所有Model的指针；<br>它还包含了所有的Mesh对象；</p><h3 id="font-color-ef6d3b-Mesh-font"><font color="#ef6d3b"><strong>Mesh</strong></font></h3><p>什么是Mesh？它包含了所有Rendering需要的信息：<font color="#1A9BFF"><strong>vertex（顶点）, normal（法线）, texture（贴图）, materials（材质）等…</strong></font></p><hr><h3 id="问题汇总">问题汇总</h3><ul><li><a href="http://www.4k8k.xyz/article/qq_36383623/85303483">“由于找不到assimp-vc140-mt.dll，无法继续执行代码。重新安装程序可能会解决此问题。”</a></li></ul><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats">3D graphics file formats</a></li><li><a href="https://www.quora.com/What-is-a-mesh-in-OpenGL">What is a mesh</a></li><li><a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-7-model-loading/">Tutorial 7 : Model loading</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graphics </tag>
            
            <tag> Python </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客写作规范</title>
      <link href="/posts/docs/"/>
      <url>/posts/docs/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">导读</p><ul><li>使用<code>push</code>指令代替hexo，一键生成、发布、更新config</li><li><font color="#ef6d3b"><strong>todo:</strong></font> 常用文章自己指定 <code>abbrlink</code></li><li><font color="#ef6d3b"><strong>todo:</strong></font> 较长文章开头写 思维导图 大纲</li></ul><!-- * hexo clean: 清除本地 cache* hexo g: 本地 generate（生成路径是`./public`）* hexo s: 本地 server* hexo d: 发布到 github.io* update_config.py: 更新文章数和发布日期 --></div><div class="markmap-container" style="height:350px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;为什么写博客&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2],&quot;f&quot;:true},&quot;v&quot;:&quot;5x reasons&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,3],&quot;f&quot;:true},&quot;v&quot;:&quot;优秀博客汇总&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;<a href=\&quot;#博客特性\&quot;>博客特性</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5],&quot;f&quot;:true},&quot;v&quot;:&quot;Config&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6],&quot;f&quot;:true},&quot;v&quot;:&quot;todo：标记未完成&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7],&quot;f&quot;:true},&quot;v&quot;:&quot;top：置顶&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;thumbnail：缩略图&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;password：加密&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;abbrlink：指定链接&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11],&quot;f&quot;:true},&quot;v&quot;:&quot;Description&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12],&quot;f&quot;:true},&quot;v&quot;:&quot;Heading&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13],&quot;f&quot;:true},&quot;v&quot;:&quot;Latex&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14],&quot;f&quot;:true},&quot;v&quot;:&quot;Code&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;Emoji&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;警示框&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#警示框\&quot;>Admonition</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;<a href=\&quot;#链接\&quot;>链接</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;图片&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[19,20],&quot;f&quot;:true},&quot;v&quot;:&quot;文章锚点&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;媒体资源&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[21,22],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#图表\&quot;>iframe 图表</a>&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[22,23],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#视频\&quot;>视频</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;<a href=\&quot;#更新日志-🎉\&quot;>更新日志</a>&quot;}],&quot;p&quot;:{}}"></svg></div><h2 id="为什么写博客">为什么写博客</h2><ul><li>📄 随时查阅的手册</li><li>✏️ 锻炼写文档的能力</li><li>💪 收获感，满足感，正向推动学习的坚持</li><li>💡 反复の增、删、该，是一个逐渐 “加深理解” 的过程</li><li>🎉 博客网页的不断打磨，是一个满足 “强迫症” 的过程</li></ul><p>虽然 <em>www.luhao.wiki</em> 公开了ip，但这是一个完全 “面向自己” 的博客</p><blockquote><p>汇总一些优秀的个人博客:</p><ul><li><a href="https://learn.lianglianglee.com/">lianglianglee 👍</a></li><li><a href="https://coolshell.cn/">酷壳 - CoolShell</a></li><li><a href="https://bot-man-jl.github.io/">BOT Man (Tecent)</a></li><li><a href="https://blog.codingnow.com/">云风的 Blog</a></li></ul></blockquote><h2 id="博客特性">博客特性</h2><ul><li><p><strong>Config</strong></p><ul><li><code>todo: true</code>: 标记未完成, 文章首页显示 📌TODO</li><li><code>top: xxx</code>: 置顶的序号, 文章首页显示 ⭐置顶</li><li><code>thumbnail: /images/xxx.png</code>: 首页的文章icon, 使用 <code>100x100</code> 的像素</li><li><code>password: xxx</code>: 加密, 但愿不会被破解</li></ul></li><li><p><strong>Description</strong></p><ul><li><code>描述xxx&lt;!-- more --&gt;</code>: 对应封面描述</li><li>当文章标题不够清晰时, 请在 “箭头处” 添加额外文字</li><li><img src="/images/whatsmore.png" alt=""></li></ul></li><li><p><strong>Heading</strong></p><ul><li>文章内标题以 <code>##</code> 开始, 样式会标注为棕红色</li><li>更低级的标题以 <code>###</code>, <code>****</code> 等开始</li></ul></li><li><p><strong>Latex</strong></p><ul><li>latex失效看后面的问题汇总</li><li>$sin \alpha + sin \beta = 2 sin \frac{\alpha + \beta}{2} cos \frac{\alpha + \beta}{2}$</li></ul></li><li><p><strong>Code</strong></p><ul><li>要标注代码的语言, 才能正确开启高亮</li></ul></li><li><p><strong>Emoji</strong></p><ul><li>表情仅用作<strong>视觉区分 or 强调</strong>，不要滥用</li><li>✔  ❌ 🔥  ⭐  🎉  💡</li></ul></li></ul><h2 id="警示框">警示框</h2><p><a href="https://squidfunk.github.io/mkdocs-material/reference/admonitions/">Admonition</a> 是一种基于html的警示样式, 规定语法如下:</p><pre><code>!!! NOTE/ERROR/TODO/WARNING title    paragraph ...</code></pre><div class="admonition note"><p class="admonition-title"> Admonition示例</p><ul><li>This is a demo for admonition.</li></ul></div><h2 id="链接">链接</h2><p>基本的链接格式是： <code>![text](link)</code>，其中两个部分要严格按照规范：</p><ul><li><p><strong>图片</strong><br>所有<code>png</code>、<code>gif</code>资源都放在 <code>./themes/pure/source/images/</code> 目录下，因此链接的格式为 <font color="#ef6d3b"><strong><code>![](/images/***.png)</code></strong></font></p></li><li><p><strong>文章锚点</strong><br>所有markdown h1, h2, h3都会插入html锚点，链接格式为 <font color="#ef6d3b"><strong><code>[text](#html-id)</code></strong></font>，注意最好填入 “html源码中的id值”，因为html源码会把空格、特殊字符等作一个替换</p></li></ul><h2 id="图表">图表</h2><ul><li>其实是内嵌html文件, 示例如下:</li></ul><pre><code class="language-html">&lt;iframesrc="https://luhao.wiki/html/render.html" 替换这里的htmlheight=500 width=100% 修改高度即可frameborder=0scrolling=yes&gt; 支持滚动条&lt;/iframe&gt;</code></pre><h2 id="视频">视频</h2><ul><li>利用html语法内嵌视频 (资源来源于w3school)</li></ul><p><video width="500" controls=""><source src="https://www.w3schools.com/html/mov_bbb.mp4" type="video/mp4">你的浏览器不支持HTML5视频</video></p><pre><code class="language-html">&lt;video width="400" controls&gt;&lt;source src="https://www.w3schools.com/html/mov_bbb.mp4" type="video/mp4"&gt;你的浏览器不支持HTML5视频&lt;/video&gt;</code></pre><h2 id="更新日志-🎉">更新日志 🎉</h2><h3 id="备注-html报错">备注: html报错</h3><ul><li><code>Uncaught ReferenceError: $ is not defined?</code></li><li>确认 <code>*.ejs</code> 中填写的路径不要是绝对路径<ul><li>错误: <code>/images/a.png</code></li><li>正确: <code>images/a.png</code></li></ul></li></ul><h3 id="3月-首页文章新增-thumbnail-缩略图">3月, 首页文章新增 thumbnail 缩略图</h3><ul><li>修改 <code>themes/pure/layout/_partial/post/title.ejs</code>，根据<code>post</code>对应属性来添加html样式</li><li>所有缩略图在 <a href="https://icons8.com/icons">icons8</a> 网站使用 100x100 的png图标</li></ul><h3 id="4月7日-修复Latex失效问题">4月7日, 修复Latex失效问题</h3><ul><li>确保安装的包是 <code>hexo-renderer-mathjax</code></li><li>需要将<code>node_modules/hexo-renderer-mathjax/mathjax.html</code>中的script替换为:</li><li><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"&gt;&lt;/script&gt;</code></li></ul><h3 id="4月30日-优化代码高亮样式">4月30日, 优化代码高亮样式</h3><p>弃用 hexo原生的 <code>highlight.js</code>, 转投 <a href="https://github.com/googlearchive/code-prettify">google/code-prettify</a> 的怀抱, 目前功能如下:</p><ul><li>支持所有主流语言（带自动识别）</li><li>支持行号</li><li>字体编程友好 <code>Consolas</code></li><li>准备将 <code>inline-code</code> 仍然沿用之前的 橙色加外边框 <code>todo</code></li></ul><p>参考：<a href="http://masikkk.com/article/hexo-12-google-code-prettify/">Hexo 接入google高亮的教程</a></p><h3 id="5月5日-集成hexo指令到-push">5月5日, 集成hexo指令到 <code>push</code></h3><ul><li>命令为 <code>. push</code>, 点号表示在当前路径运行 push</li><li>考虑添加 git 提交次数, <code>git rev-list --all --count</code></li></ul><h3 id="6月4日，新增html-红色下划线样式">6月4日，新增html 红色下划线样式</h3><p>效果预览：<u class="error"><code>int *p = *a</code></u><br>借助html代码实现：</p><pre><code class="language-html">&lt;u class="error"&gt;text&lt;/u&gt;</code></pre><h3 id="6月11日，主页左侧新增分类栏">6月11日，主页左侧新增分类栏</h3><ul><li><p>实现方式为在 <code>header.ejs</code> 中遍历添加 <code>site.categories</code> 中的元素。<br>同时关闭了 “所有分类” 的按钮入口。</p></li><li><p>通过 <code>_config.yml</code> 的 <code>enable_left_categories</code> 字段控制开关</p></li></ul><h3 id="6月13日，上传图片脚本">6月13日，上传图片脚本</h3><ul><li><p>windows下通过一个 <code>push.bat</code>（放到环境目录）实现png上传到对应hexo目录</p></li><li><p>同时将 <code>id_rsa.pub</code> 拷贝到 <code>~/.ssh/authroized_keys</code> 下以避免密码输入</p></li></ul><pre><code class="language-bat">scp %1.png root@1.15.115.4:/root/hexo-workspace/themes/pure/source/images/%1.png</code></pre><h3 id="hexo-blog-encrypt-加密文本">hexo-blog-encrypt 加密文本</h3><p>此加密插件会在首页的缩略文字加上 “Here's something encrypted, password is required to continue reading.” 的文字，需要修改如下代码去除：</p><ul><li><code>node_modules/hexo-blog-encrypt/index.js</code></li><li>将 <code>data.excerpt = data.more = config.abstract;</code> 修改为 <code>data.more = config.abstract;</code></li></ul><h3 id="2023-6-18-迁移到新服务器">2023.6.18 迁移到新服务器</h3><ul><li><p>必要组件</p><ul><li>zsh ： <a href="/posts/2N8EPP4/">【Shell】oh-my-zsh</a></li><li>Node.js：  <a href="/posts/1T7TWH8/">Node.js</a></li><li>hexo：  <a href="/posts/16FHVSZ/">Hexo：轻量的博客框架</a></li></ul></li><li><p>迁移服务</p><ul><li>hexo 个人日志 ✔</li><li>apache 文件服务器 ✔</li><li>crontab ✔</li></ul></li><li><p>迁移ssh私钥和公钥</p><ul><li>直接拷贝 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 到新机器的对应目录下</li><li><code>ssh-add id_rsa</code></li><li>如果遇到报错，执行 <code>chmod 400 ~/.ssh/id_rsa</code></li></ul></li></ul><h3 id="支持思维导图-hexo-markmap">支持思维导图 hexo-markmap</h3><ul><li><a href="https://github.com/MaxChang3/hexo-markmap">Github: hexo-markmap</a></li><li><code>npm install hexo-markmap --save</code></li><li>通过缩进控制归属层级，示例如下</li></ul><pre><code class="language-markdown">{% markmap 300px %}# Testa## test1## test2# Testb## test1## test2{% endmarkmap %}</code></pre><ul><li>修复源码 <code>hexo-markmap/lib/template.js</code> 中自定义css的bug一处，配置的css路径为 <code>/html/markmap.css@0.2.7</code>，主要是修改了字体样式</li></ul><p>有空尝试另一种 <code>minimap</code>：<a href="https://hunterx.xyz/use-mindmap-in-hexo.html">https://hunterx.xyz/use-mindmap-in-hexo.html</a></p><h3 id="分类页切为首页样式">分类页切为首页样式</h3><ul><li>修改 <code>category.ejs</code>，将生成html的代码直接替换为 <code>index.ejs</code> 同款；</li><li><a href="https://github.com/593413198/hexo-workspace/commit/0ebb9bb576085e22bf26b0c750ef04686a969236">git commit</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lighting</title>
      <link href="/posts/S7WXS5/"/>
      <url>/posts/S7WXS5/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>lighting主要分为：平行光、点光、聚光灯；本文介绍了每种lighting的原理与实现细节；</p></div><hr><h2 id="Directional-Light">Directional Light</h2><ul><li><font color="#ef6d3b"><strong>平行光：</strong></font>（如太阳光）<ul><li>影响范围无限大</li><li>所有点强度一样，只受方向影响</li></ul></li></ul><p><img src="/images/directionallight.png" alt=""></p><ul><li>定义如下：</li></ul><pre><code class="language-c">struct DirectionalLight {    vec3 direction;      vec3 ambient;    vec3 diffuse;    vec3 specular;};void main(){  vec3 lightDir = normalize(-light.direction);  [...]}</code></pre><hr><h2 id="Point-Light">Point Light</h2><ul><li><font color="#ef6d3b"><strong>点光：</strong></font> （如电灯泡）<ul><li>影响范围是个球体</li><li>强度随距离衰减</li></ul></li></ul><p><img src="/images/pointlight.png" alt=""></p><h3 id="font-color-ef6d3b-Attenuation-font"><font color="#ef6d3b"><strong>Attenuation</strong></font></h3><p>怎么衡量这种衰减呢？</p><ul><li><font color="#ef6d3b"><strong>linear equation</strong></font></li></ul><p>强度随距离线性衰减，表现效果比较差！<br>$F{att} = 1.0 - dist / range$</p><ul><li><font color="#ef6d3b"><strong>quadiratic</strong></font></li></ul><p>强度随距离二次衰减，效果贴近现实！</p><p>$F{att} = \frac{1.0}{K{c} + K{l}*d + K{q} * d^2}$</p><p><a href="https://wiki.ogre3d.org/tiki-index.php?page=-Point+Light+Attenuation">Ogre3D’s Wiki</a>, 给了一些取值的参考;</p><hr><h2 id="Spot-Light">Spot Light</h2><ul><li><font color="#ef6d3b"><strong>聚光灯：</strong></font> (如手电筒)<ul><li>影响范围是个圆锥</li><li>强度随距离和半径衰减</li></ul></li></ul><p><img src="/images/spotlight.png" alt=""></p><div class="admonition todo"><p class="admonition-title">都是</p><ol><li>基于OpenGL撸一遍代码；</li><li>尝试抓帧看一看；</li><li>引擎层，尝试构建一个Lighting的forward管线；</li></ol></div><hr><h2 id="参考资料">参考资料</h2>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Colors and Materials</title>
      <link href="/posts/SZGATA/"/>
      <url>/posts/SZGATA/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>自然界的颜色可以看做是由<strong>Ambient, Diffuse, Specular</strong>三种组成；不同的材质（Materials），决定了颜色的不同显示性质；</p></div><hr><h2 id="Colors">Colors</h2><ul><li><strong>物体的颜色是如何产生的？</strong></li></ul><p>观察下图: 太阳光包含所有可见色（7种），当照射在物体上时（如红色），<strong>只能反射大部分的红光</strong>，如下图所示:</p><p><img src="/images/colors.png" alt=""></p><hr><ul><li><strong>用公式表示简单的反射颜色:</strong></li></ul><p>$reflectColor = lightColor * ObjectColor$</p><ul><li><strong>RGB颜色表示:</strong></li></ul><p>$red = (1, 0, 0)$<br>$green = (0, 1, 0)$<br>$blue = (0, 0, 1)$</p><p>$black = (0, 0, 0)$<br>$white = (1, 1, 1)$</p><div class="admonition warning"><p class="admonition-title">为什么黑色是0, 白色是1?</p><ol><li><strong>从能量看</strong>：黑色能量最低，白色能量最高</li><li><strong>从反射公式看</strong>：黑色不反射任何颜色(0)，白色会反射任何颜色(1)</li></ol></div><hr><h2 id="Phong-lighting-model">Phong lighting model</h2><p>了解了Colors原理，我们学习如何表示现实中的lighting;</p><ul><li>三个组成: <font color="#ef6d3b"><strong>ambient + diffuse + specular</strong></font></li></ul><p><img src="/images/Phong.png" alt=""></p><h3 id="Ambient"><em>Ambient</em></h3><p><strong>环境光: 各种复杂光源反射的颜色，通常表现在较暗的环境下;</strong></p><ul><li>通常会取一个环境光强度(ambientStrength)，乘以光照强度，以计算ambient:</li></ul><p><font color="#ef6d3b"><strong>$color = ambientStrenth * lightColor * ObjectColor$</strong></font></p><h3 id="Diffuse"><em>Diffuse</em></h3><p><strong>漫反射光：直接光照反射的颜色，受光照角度的直接影响；</strong></p><ul><li><p>既然考虑角度，所以引入<font color="#1A9BFF"><strong>normal(法线)</strong></font>的概念：<strong>垂直于顶点所在平面的向量</strong></p></li><li><p>当光垂直入射平面，反射最强，平行入射则最弱；</p></li></ul><p><font color="#ef6d3b"><strong>$color = max(dot(normal, lightDir), 0.0) * lightColor * ObjectColor$</strong></font></p><div class="admonition warning"><p class="admonition-title">怎么算顶点法线?</p><p>todo</p></div><h3 id="Specular"><em>Specular</em></h3><p><strong>高光：光泽表面反射的颜色，</strong></p><p>如下图所示，当视角与光的反射角度越来越小时，我们看到的高光也会越来越强烈 （假设这是一面镜子）；<br>显然：高光强度是受 光入射角 + 面法线 + 视角 共同影响的；</p><p><img src="/images/specular.png" alt=""></p><p>与Diffuse的计算有一点区别，我们使用pow来让越接近反射光线的区域，反射强度越大；</p><p><font color="#ef6d3b"><strong>$color = pow(max(dot(reflectDir, viewDir), 0.0), 32) * lightColor * ObjectColor$</strong></font></p><div class="admonition todo"><p class="admonition-title">32的系数是什么？</p><p>用作pow的系数越大，表示高光影响的范围越小，高光强度也越大；下图可以看到不同系数的效果；</p></div><p><img src="/images/specular_pow.png" alt=""></p><hr><ul><li>最后如何叠加三种颜色呢？<br><font color="#ef6d3b"><strong>$color = ambient + diffuse + specular$</strong></font></li></ul><hr><h2 id="Materials">Materials</h2><ul><li>什么是材质？<br>自然界中，不同物体对光照的反应不同；<br>木头和水泥不会对光产生很强的反射，他们几乎没有高光；但水晶和镜子就会显得闪闪发光…<br>它们本质是各种反射属性和数值的组合，我们将它定义为<font color="#ef6d3b"><strong>Materials(材质)</strong></font></li></ul><pre><code class="language-c">#version 330 corestruct Material {    vec3 ambient;    vec3 diffuse;    vec3 specular;    float shininess; // pow的指数, 衡量高光区域}; uniform Material material;</code></pre><ul><li>对应的，我们也可以维护灯光的简单属性:</li></ul><pre><code class="language-c">struct Light {    vec3 position;      vec3 ambient;    vec3 diffuse;    vec3 specular;};uniform Light light;  </code></pre><ul><li>下面看一个使用材质和灯光属性的示例：</li></ul><pre><code class="language-c">// lighting propertieslightingShader.setVec3("light.ambient", 0.2f, 0.2f, 0.2f);lightingShader.setVec3("light.diffuse", 0.5f, 0.5f, 0.5f);lightingShader.setVec3("light.specular", 1.0f, 1.0f, 1.0f);// material propertieslightingShader.setVec3("material.ambient", 1.0f, 0.5f, 0.31f);lightingShader.setVec3("material.diffuse", 1.0f, 0.5f, 0.31f);lightingShader.setVec3("material.specular", 0.5f, 0.5f, 0.5f); // specular lighting doesn't have full effect on this object's materiallightingShader.setFloat("material.shininess", 32.0f);</code></pre><p><img src="/images/lighting_demo.png" alt=""></p><hr><h2 id="Lightmap">Lightmap</h2><ul><li>想象在实际工作中，我们怎么制定一个真实物体的Materials呢？</li></ul><p>这就是美术同学的工作啦，在编辑器中<strong>指定diffuse、specular、normal等贴图</strong>，这样就赋予了它复杂而美丽的纹理；</p><h3 id="Shader-Sampler">Shader Sampler</h3><p><strong>shader提供了sampler2D，它能够读取各种格式的图片；</strong></p><pre><code class="language-c">struct Material {    sampler2D diffuse;    sampler2D specular;    float     shininess;}; in vec2 TexCoords;uniform Material material;</code></pre><ul><li>感受一下带了diffuse和specular贴图的效果：</li></ul><p><img src="/images/lightmap.png" alt=""></p><hr><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://learnopengl.com/Lighting/Colors">LearOpenGL-Colors</a></li><li><a href="https://learnopengl.com/Lighting/Basic-Lighting">LearOpenGL-Basic Lighting</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次来家的小边牧</title>
      <link href="/posts/25374YZ/"/>
      <url>/posts/25374YZ/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f7f82aef30dc843aa19391473b9896ed7f6c645c482de356d4f2486ec8b060e9">b3dc07a81f6459d120ce338ccca5504603780459e0306826441972681af56d62e5c8df8a8c8b786c064334936495b3bf83228f3b2ead8556cc3cb8048ae26847c8e914621b496b7004fe6882233afe5393b8f32076abfef2f234949bd027a34fbf09d28542fb2cc9c5f9882b568746dcc9aea531b78b578a89781affff46dd1fa58374a252f3877e2b223950d522ca7cacd9c23dee53d4b8288a5801e1c270173893a321c6d4866a1106b1f2e3d1bd31cfb33f0ef0bbd13a9a6e3efa3041006a6d1576d762df28279bb82c05381621827456933196e65ce91c8a134de12c5d48bc681e9207fa4387d1f13347d00eeb4e7190aef02c9513be1e862bb60500d43c83233e444878c99296bfe050082bd5cdf2f32703a2b57f2d5928be52b3366befa83be0205358c86a0fce6a5508a95d0617cadca5c8480cc959948670fa465a55b5f6c427a93185c1cf24271dd50957cf2e5b471f307e600f0c25322309622fa1b1c82e5afc3d54ebcd43e8a7f03e3b5176df84df132992817a53fb25162159aa8f03c78fd67b3b81f4d3595886a042e2e1a0206922bcb6b55d9b50aa83df3c5a70b3247450adbb77dbe39633af9649e89833d053d297fb8b73ee37ef9622bdff7e9b3c02c239613c0c3e0036761d286765d189d5438dcca12ba9ecca925c4fdab1d40880b9a21be5c1361c7f7975b724504e50e32909f9bec7b70c6c1d233363194069cdc2ba141128e908f6fc86a5972e30e57f0488a239f64b4e7d5d31a19f4df49d62fba002a1582c6132b6c2477ae4144a67c9fb67f678b5c690751403a12cfef8634f3e4fd581848f8315f480765fed82ed91d6d2409be289d9cc00bed14e07f70916af1c4edede9b247687347b5ce51f51a4edfb73adfd1e2adbc6ed857a2673f9186802d37db3d031e4dc3d0f7b2d34334fb86e37a07620e1d31bd5b4a2b6f94846c89be35ceb990c9c3519777b6b79b5891ae6172af4e3022497c29242e0d8bb3c43d60a15698d9920f9467d7b405ef0aa77bd8238b748756df5f948b13bd8897c0193c5b6f7d09629328daf529260519b8978c33c8575b273f692cb92fcbc5d68f7cae83734753c61e50291a4519333669048d4c5b9b178ec8c9200c00b323beabe7af5d16f7246d89e49e18349103172f558bbde40e2bb49ee930611d333dff7114201598e391867be30b19af33792be16be58f377a0dab347d6fc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Textures</title>
      <link href="/posts/1EF3PT0/"/>
      <url>/posts/1EF3PT0/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>Textures 纹理，让游戏中的物体拥有丰富的色彩表现；其本质是，如何将顶点坐标映射到uv坐标；</p></div><hr><h2 id="What-is-texture">What is texture?</h2><ul><li><p><font color="#ef6d3b"><strong>A texture is a 2D image (even 1D/3D exist) to add detail to objects;</strong></font></p></li><li><p><font color="#ef6d3b"><strong>Texture coord.</strong></font><br>纹理坐标，又称$uv$坐标，是$[0,1]$的浮点数；<br>对于下图我们尝试如下定义$uv$坐标：</p></li></ul><pre><code class="language-c">float texCoords[] = {    0.0f, 0.0f,  // lower-left corner      1.0f, 0.0f,  // lower-right corner    0.5f, 1.0f   // top-center corner};</code></pre><hr><h2 id="Texture-Wrapping">Texture Wrapping</h2><p>对于超过$(0,0)$和$(1,1)$的uv坐标，我们如何去填充呢？<br>OpenGL提供了如下几种方式：<br><img src="/images/texture_wrapping.png" alt=""></p><hr><h2 id="Texture-Filtering">Texture Filtering</h2><ul><li><font color="#ef6d3b"><strong>Determine the texture mapped uv (using the nearby pixels…)</strong></font></li></ul><p>想象CPU传来的$uv$坐标是$(0.3, 0.3)$，纹理尺寸是$64 * 64$；<br>通过计算$0.3*64$，我们得到应该采样$(19.2, 19.2)$；<br>那么问题来了，像素是一块一块采样的，$19.2$到底采哪里呢？</p><ul><li>如下两种情形必然会出现错误：<ul><li><ol><li><strong>纹理大于模型表面</strong>：多对少，错位与丢失像素；</li></ol></li><li><ol start="2"><li><strong>纹理小于模型表面</strong>：少对多，马赛克；</li></ol></li></ul></li></ul><div class="admonition note"><p class="admonition-title">note</p><p>想象一张图片，经过缩小，会看不清；经过放大，会出现马赛克；就是这个意思</p></div><p><strong>OpenGL给了如下两种基本方案:</strong></p><h3 id="1-nearest-neighbor-filtering">1. nearest-neighbor filtering</h3><ul><li>选取离周围4个pixel最近的一个；<br><img src="/images/nearest_neighbour.png" alt=""></li></ul><h3 id="2-bilinear-filtering">2. bilinear filtering</h3><ul><li><p>取周围4个pixel取均值；<br><img src="/images/linear.png" alt=""></p></li><li><p>两种filtering效果对比：<br><img src="/images/filtering.png" alt=""></p></li></ul><h3 id="3-trilinear-filtering">3. trilinear filtering</h3><ul><li>由于bilinear是在同一个Mipmap level做平滑，因此tri-filtering考虑了最接近的两层Mipmap level，并对最后结果做一次线性平滑；</li></ul><h3 id="4-anisotropic-filtering">4. <a href="https://en.wikipedia.org/wiki/Anisotropic_filtering">anisotropic filtering</a></h3><ul><li>前面是基于Texture与模型表面平行下，如果两者形成角度，就会有如下Artifacts；</li><li>4X AF表示需要多采样4倍的pixel；16X同理；</li></ul><p><strong>想象一下，当图片倾斜与平面，我们需要采样更多的点来涂满这个区域!</strong></p><p><img src="/images/anisotropic.png" alt=""></p><div class="admonition todo"><p class="admonition-title">FAQ</p><ol><li>这里要扣一下原理与Coding!</li><li>AF都用硬件做了，但可以尝试用Pixel Shader模拟下玩玩</li></ol></div><h3 id="5-Performance-★">5. Performance ★</h3><ul><li>采样的像素数越多，性能开销越大~</li></ul><table><thead><tr><th style="text-align:center">Filering</th><th style="text-align:center">Samples</th></tr></thead><tbody><tr><td style="text-align:center">nearest-neighbor</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">bilinear</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">trilinear</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">AF 4X</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">AF 16X</td><td style="text-align:center">128</td></tr></tbody></table><hr><h2 id="Mipmaps">Mipmaps</h2><p>想象三维空间成千上万的物体，如果远处的与近处拥有一样大小精度的纹理（贴图），是不是很浪费呢？（远处的成像后未必看得清楚）<br>并且，大纹理映射到小物体，更导致一些列<font color="#ef6d3b"><strong>Artifacts</strong></font>；</p><ul><li><font color="#ef6d3b"><strong>a collection of texture images where each subsequent texture is twice as small compared to the previous one.</strong></font></li></ul><p><img src="/images/mipmap.png" alt=""></p><ul><li><code>glGenerateMipmaps</code>: 帮助我们为一张Texture创建对应的Mipmap；</li></ul><hr><h2 id="Coding实现">Coding实现</h2><p><strong>Vertex data格式:</strong></p><ul><li>单单Pos和Color已经不能满足要求，我们需要扩充一个uv坐标来用于纹理采样</li></ul><p><img src="/images/texture_vertex.png" alt=""></p><pre><code class="language-c">float vertices[] = {    // positions          // colors           // texture coords     0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f,   // top right     0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   // bottom right    -0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f,   // bottom left    -0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f    // top left };</code></pre><hr><p><strong>Vertex Shader:</strong></p><ul><li>根据上面Vertex Data的格式，得出location分别是pos, color, texture：</li></ul><pre><code class="language-c">#version 330 corelayout (location = 0) in vec3 aPos;layout (location = 1) in vec3 aColor;layout (location = 2) in vec2 aTexCoord;out vec3 ourColor;out vec2 TexCoord;void main(){    gl_Position = vec4(aPos, 1.0);    ourColor = aColor;    TexCoord = aTexCoord;}</code></pre><p><strong>Pixel Shader:</strong></p><ul><li>pixel shader只需要输出颜色即可</li></ul><div class="admonition note"><p class="admonition-title">Texture Sampler</p><p>如何将texture传给GPU呢？GLSL提供了一个Sampler的东西；<strong>看ps中的sampler2D</strong></p></div><pre><code class="language-c">#version 330 coreout vec4 FragColor;in vec3 ourColor;in vec2 TexCoord;// texture sampleruniform sampler2D texture1;void main(){FragColor = texture(texture1, TexCoord);}</code></pre><hr><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://www.cnblogs.com/cxrs/archive/2009/10/18/justaprogramer.html">纹理过滤模式中的Bilinear、Trilinear以及Anistropic Filtering</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shaders</title>
      <link href="/posts/3GZKBFK/"/>
      <url>/posts/3GZKBFK/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>Shader, 理解为一种GPU Program不要尝试用中文翻译它!</p></div><hr><h2 id="Graphics-Pipeline">Graphics Pipeline</h2><ul><li><font color="#ef6d3b"><strong>The process of transforming 3D coordinates to 2D pixels</strong></font></li></ul><p>我曾尝试去理解什么是“渲染管线”？ 这其实是一个很抽象的翻译，不仿用<strong>造房子</strong>来比喻。<br>建筑工程，其实是<strong>从设计图纸到高楼大厦</strong>的过程，其中有画设计图、打地基、该楼层、装修，等等。<br>渲染管线恰恰与他相反，是一个<strong>把高楼大厦复原到图纸（即屏幕）上</strong>的过程。</p><ul><li><p>渲染管线，即从<strong>三维模型处理到最终二维的屏幕输出</strong>。</p><ul><li>从上面图片可以看一个大概的流程 （当然实际应用复杂的多！）</li></ul></li><li><p><strong>Shaders</strong>: <font color="#ef6d3b"><strong>small programs running on GPU.</strong></font></p></li><li><p>vertex and pixel shader is <strong>neccessary</strong> in OpenGL!</p></li></ul><hr><h3 id="1-Vertex-Shader">1. Vertex Shader</h3><ul><li><font color="#ef6d3b"><strong>Takes a single point and can adjust it.</strong></font></li></ul><p>这一步是为了处理顶点数据，对Vertex坐标做各种变化，然后再输出给Geometry/Pixel Shader；</p><div class="admonition todo"><p class="admonition-title">FAQ</p><p>Vertex Shader会处理颜色吗？是否存Color属性呢？</p></div><hr><h3 id="2-Geometry-Shader">2. Geometry Shader</h3><ul><li><p><font color="#ef6d3b"><strong>Takes each transformed primitive (triangle, etc) and can perform calculations on it.</strong></font></p></li><li><p>处理图元数据，输入可以是三角形等，可以输出多种三角形</p></li></ul><hr><h3 id="3-Rasterization">3. Rasterization</h3><ul><li><font color="#ef6d3b"><strong>maps the resulting primitives to the corresponding pixels on the final screen.</strong></font></li></ul><p>光栅化负责将所有Vertex坐标，映射到不同分辨率的显示屏上；<br>这里有很多研究领域，比如**采样、抗锯齿（AA）**等等；</p><hr><h3 id="4-Pixel-Shader-Fragment-Sahder">4. Pixel Shader (Fragment Sahder)</h3><ul><li><font color="#ef6d3b"><strong>Calculates the colour of a pixel on the screen based on vertex shader, textures and others (shadow, lighting…).</strong></font></li></ul><p>这是渲染管线比较重要的一步；<br>常见的<strong>贴图、光、阴影</strong>等各种着色都在这里计算；<br>因此，Nvidia又称之为<font color="#ef6d3b"><em><strong>Texture Shader</strong></em></font></p><hr><h3 id="5-Alpha-test-and-Blending">5. Alpha test and Blending</h3><ul><li><p>alpha test:</p></li><li><p>blending</p></li></ul><p><strong>透明材质、混合材质</strong>等，由于其特殊性，会在渲染管线比较靠后的位置；不然怎么表现透明呢？</p><hr><h2 id="Pratice-第一个Shader">Pratice: 第一个Shader</h2><h3 id="Vertex-data">Vertex data</h3><ul><li><font color="#ef6d3b"><strong>NDC</strong></font>: Normalized Device Coordinates.<ul><li>vertex shader的输入，就是定义在NDC坐标下.</li><li>如下我们定义一个三角形:</li></ul></li></ul><pre><code class="language-c">float vertices[] = {    -0.5f, -0.5f, 0.0f,     0.5f, -0.5f, 0.0f,     0.0f,  0.5f, 0.0f};  </code></pre><p><img src="/images/NDC.png" alt=""></p><ul><li>接下来，我们要将这些数据传给GPU，用于Vertex Shader的计算！<ul><li><font color="#ef6d3b"><strong>VBO</strong></font>：Vertex Buffer Objects，存放以上数据的GPU Memory</li><li>OpenGL有很多VBO的类型：<code>GL_ARRAY_BUFFER</code>是比较常用的;</li></ul></li></ul><pre><code class="language-c">unsigned int VBO;glGenBuffers(1, &amp;VBO);glBindBuffer(GL_ARRAY_BUFFER, VBO);</code></pre><ul><li>glBufferData: 将顶点数据真正的喂给GPU</li></ul><pre><code class="language-c">glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);</code></pre><h3 id="Vertex-Shader">Vertex Shader</h3><ul><li>后面会介绍一些简单的语法:</li></ul><pre><code class="language-c">#version 330 corelayout (location = 0) in vec3 aPos;void main(){    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);}</code></pre><h3 id="Compile-Vertex-Shader-run-time">Compile Vertex Shader (run-time)</h3><ul><li>先对char[]编译，后续会扩展开发!</li></ul><pre><code class="language-c">const char *vertexShaderSource = "#version 330 core\n"    "layout (location = 0) in vec3 aPos;\n"    "void main()\n"    "{\n"    "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"    "}\0";</code></pre><ul><li>如何编译VS?</li></ul><pre><code class="language-c">unsigned int vertexShader;vertexShader = glCreateShader(GL_VERTEX_SHADER);glShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL);glCompileShader(vertexShader);</code></pre><h3 id="Pixel-Shader">Pixel Shader</h3><ul><li>同理，ps更关心的是color，vs则关心位置</li></ul><pre><code class="language-c">const char *fragmentShaderSource = "#version 330 core\n""out vec4 FragColor;\n""void main()\n""{\n""   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n""}\n\0";unsigned int fragmentShader;fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);glShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, NULL);glCompileShader(fragmentShader);</code></pre><h3 id="Link-and-Combine">Link and Combine</h3><ul><li>Shader编译完，需要链接并整合起来</li></ul><pre><code class="language-c">unsigned int shaderProgram;shaderProgram = glCreateProgram();glAttachShader(shaderProgram, vertexShader);glAttachShader(shaderProgram, fragmentShader);glLinkProgram(shaderProgram);</code></pre><ul><li>渲染线程中开始绘制: glUserProgram()</li></ul><pre><code class="language-c">glUseProgram(shaderProgram);// 记得回收glDeleteShader(vertexShader);glDeleteShader(fragmentShader);  </code></pre><ul><li><font color="#ef6d3b"><strong>到这里我们通过vs+ps实现了一个三角形的绘制!</strong></font></li></ul><h3 id="EBO-element-buffer-objects">EBO: element buffer objects</h3><ul><li>假设我们需要画一个正方形, 那么需要两个三角形，即如下6个点:</li></ul><pre><code class="language-c">float vertices[] = {    // first triangle     0.5f,  0.5f, 0.0f,  // top right     0.5f, -0.5f, 0.0f,  // bottom right    -0.5f,  0.5f, 0.0f,  // top left     // second triangle     0.5f, -0.5f, 0.0f,  // bottom right    -0.5f, -0.5f, 0.0f,  // bottom left    -0.5f,  0.5f, 0.0f   // top left}; </code></pre><ul><li><font color="#ef6d3b"><strong>是不是很浪费?</strong></font><ul><li>因为其中两个顶点可以复用，所以其实4个Vertex就够啦！</li><li>尝试用vertex + indices，用4个vertex画出一个正方形!</li></ul></li></ul><pre><code class="language-c">float vertices[] = {     0.5f,  0.5f, 0.0f,  // top right     0.5f, -0.5f, 0.0f,  // bottom right    -0.5f, -0.5f, 0.0f,  // bottom left    -0.5f,  0.5f, 0.0f   // top left };unsigned int indices[] = {  // note that we start from 0!    0, 1, 3,   // first triangle    1, 2, 3    // second triangle};unsigned int EBO;glGenBuffers(1, &amp;EBO);glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW); // 这里指定用EBO+索引的方式，省了2个VertexglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);</code></pre><hr><h2 id="Shaders语法">Shaders语法</h2><h3 id="先看代码示例">先看代码示例</h3><pre><code class="language-c">#version version_numberin type in_variable_name;in type in_variable_name;out type out_variable_name;  uniform type uniform_name;  void main(){  // process input(s) and do some weird graphics stuff  ...  // output processed stuff to output variable  out_variable_name = weird_stuff_we_processed;}</code></pre><h3 id="1-Types">1. Types</h3><ul><li>vec类型</li></ul><pre><code class="language-c">vec2 vect = vec2(0.5, 0.7);vec4 result = vec4(vect, 0.0, 0.0);vec4 otherResult = vec4(result.xyz, 1.0);</code></pre><h3 id="2-In-and-out">2. In and out</h3><ul><li><p>#version: opengl版本</p></li><li><p>in: shader的输入</p></li><li><p>out: shader的输出</p></li><li><p><font color="#ef6d3b"><strong>Vertex Shader需要 <code>layout</code>关键词来获取vertex data</strong></font></p><ul><li>location = 0 代表采的indice</li></ul></li></ul><pre><code class="language-c">#version 330 corelayout (location = 0) in vec3 aPos; // the position variable has attribute position 0  out vec4 vertexColor; // specify a color output to the fragment shadervoid main(){    gl_Position = vec4(aPos, 1.0); // see how we directly give a vec3 to vec4's constructor    vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // set the output variable to a dark-red color}</code></pre><ul><li><font color="#ef6d3b"><strong>Pixel Shader的输出必然是一个vec4的Color</strong></font></li></ul><pre><code class="language-c">#version 330 coreout vec4 FragColor;  in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)  void main(){    FragColor = vertexColor;} </code></pre><h3 id="3-Uniforms">3. Uniforms</h3><ul><li><p><font color="#ef6d3b"><strong>uniforms是一种重要的从CPU-&gt;GPU传数据的方式</strong></font></p></li><li><p>uniforms是global变量，任意stage的任意shader都可以访问!</p><ul><li>换个思路，它是不是很费很耗？</li></ul></li></ul><hr><h2 id="Shader通用框架开发-★★★">Shader通用框架开发 ★★★</h2><ul><li>痛点1：咱们总不能每次写个Char*去编译Shader吧？</li><li>痛点2：PC(dx11)到android(gl)到ios(meta)的shader互不兼容，我们每个平台都要写一遍shader吗? (<font color="#ef6d3b"><strong>fuck</strong></font>)</li></ul><h3 id="Writing-Compiling-and-Managing-Shaders">Writing, Compiling and Managing Shaders</h3><ul><li><p>Github Page: <a href="https://github.com/593413198/Garen/blob/master/Garen/gshader.cpp"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> gshader.cpp</a></p></li><li><p><a href="https://github.com/593413198/Garen/tree/master/Garen/shader">./shader</a>目录：存放所有vs/ps源码</p></li></ul><hr><h2 id="问题汇总">问题汇总</h2><h3 id="1-OpenGL的VAO、VBO、EBO区别">1. OpenGL的VAO、VBO、EBO区别?</h3><ul><li>VBO: 存储大量顶点信息，给Vertex Shader用</li><li>VAO: 告诉GPU如何使用VBO，使用哪个VBO</li><li>EBO: 利用索引节省Vertex的内存开销</li></ul><p><img src="/images/vbo_vao.png" alt=""></p><h3 id="2-Vertex-shader与Pixel-shader的区别">2. Vertex shader与Pixel shader的区别?</h3><ul><li>Vertex shader：对顶点坐标作运算；</li><li>Pixel shader：对每个像素的颜色作运算；（Nvidia又称之为Texture Shader)</li></ul><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://stackoverflow.com/questions/832545/what-are-vertex-and-pixel-shaders">Stackoverflow: What are Vertex and Pixel shaders?</a></li><li><a href="https://learnopengl.com/Getting-started/Hello-Triangle">LearOpenGL: Hello-Triangle</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作指南</title>
      <link href="/posts/git/"/>
      <url>/posts/git/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p><code>Git</code>使用指南；<br>汇总了使用<code>Git</code>时遇到的一些坑!</p></div><h2 id="Git原理">Git原理</h2><ul><li><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 这篇文章讲得非常棒：<a href="https://labuladong.gitee.io/algo/di-si-zhan-4baf4/gitsql-zhe-326e1/"><strong>我用四个命令概括了 GIT 的所有套路</strong></a></li></ul><p>Git本质是：<strong>三个分支之间的状态转移与维护</strong>：</p><ul><li><font color="#ef6d3b"><strong>work dir</strong></font>：自己的工作目录</li><li><font color="#ef6d3b"><strong>stage</strong></font>：本地暂存区（缓冲）</li><li><font color="#ef6d3b"><strong>history</strong></font>：本地历史区（永久保存）</li></ul><p><img src="/images/git.png" alt=""></p><h2 id="Git操作">Git操作</h2><p><font color="#ef6d3b"><strong>man git</strong></font></p><pre><code>git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]    [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]    [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]    [--super-prefix=&lt;path&gt;] [--config-env=&lt;name&gt;=&lt;envvar&gt;]    &lt;command&gt; [&lt;args&gt;]</code></pre><h2 id="Git问题">Git问题</h2><ul><li><p>fatal: unable to access <a href="https://github.com/xxx.git/:Failed">https://github.com/xxx.git/:Failed</a> to connect to <a href="http://github.com">github.com</a> port 443: Timed out</p><ul><li><a href="https://stackoverflow.com/questions/18356502/github-failed-to-connect-to-github-443-windows-failed-to-connect-to-github">stackoverflow</a></li><li>尝试 <code>git config --global --unset https.proxy</code></li></ul></li><li><p>Git Error: OpenSSL SSL_read: Connection was reset, errno 10054</p><ul><li>…</li></ul></li></ul><h2 id="Git插件">Git插件</h2><p>VSCode推荐使用 GitLens 插件, 支持逐行实时Blame, 但是似乎收费?</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Algorithm】String matching</title>
      <link href="/posts/1RJC6HF/"/>
      <url>/posts/1RJC6HF/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p>linux grep的效率令人称奇!字符串匹配的常用算法与原理；</p></div><hr><h2 id="字符串匹配算法">字符串匹配算法</h2><p><strong>问题描述</strong><br>在父串$(String, len=n)$中寻找一个合法子串$(Pattern, len=m)$；<br>例如，<code>abcdef</code>的一个合法子串是<code>abc</code>，但<code>ac</code>就不是</p><div class="admonition warning"><p class="admonition-title">warning</p><p>不要尝试写代码和图解，侧重算法思想和推导过程！如果连一个非CS专业的都能看懂，那才叫棒；</p></div><hr><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">精髓</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#ef6d3b"><em><strong>Brute Force</strong></em></font></td><td style="text-align:center">$O(nm)$</td><td style="text-align:center">有脑子就行</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><em><strong>Robin-Karp</strong></em></font></td><td style="text-align:center">$O(n+km)$</td><td style="text-align:center"><em>字符串Hash</em>，$k$ 是<em>hash hit</em>但不匹配的次数</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><em><strong>KMP</strong></em></font></td><td style="text-align:center">$O(n+m)$</td><td style="text-align:center">LPS数组</td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><em><strong>Boyer-Moore</strong></em></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><font color="#ef6d3b"><em><strong>Sunday</strong></em></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><hr><h3 id="暴力匹配">暴力匹配</h3><p>两层$for$循环的遍历：<br>父串$S$中共有$n$个长度为$m$的子串，复杂度$O(n)$<br>将长度为$m$的子串与$Pattern$逐字符比较，复杂度$O(m)$<br>暴力的复杂度是$O(nm)$；</p><hr><h3 id="Robin-Karp算法">Robin-Karp算法</h3><p>暴力中逐字符对比很浪费，尝试<em>Hash</em>算法，可以从$O(m)$ 降低到 $O(1)$；<br>但考虑到<font color="#ef6d3b"><em>hash collision</em></font>，即使<em>hash hit</em>，也需要逐字符对比来验证；<br>时间复杂是 $O(n+km), k$ 为<em>hash hit</em>但不匹配的次数；</p><p><strong>缺陷</strong><br>假设每次都<em>hash hit</em>但又不匹配，那<em>Robin-Karp</em>就退化为了暴力算法；(显然不可能)<br>因此越选择精确的<em>Hash</em>算法，<em>Robin-Karp</em>的效率就越高；</p><hr><h3 id="KMP算法">KMP算法</h3><p><a href="https://www.zhihu.com/question/21923021">如何更好地理解和掌握 KMP 算法?</a><br><a href="http://www.btechsmartclass.com/data_structures/knuth-morris-pratt-algorithm.html">Knuth-Morris-Pratt Algorithm</a></p><p>KMP的精髓在于，<strong>如何跳过一些明显不可能的匹配？</strong><br><img src="/images/KMP.png" alt=""></p><p>如上图，当字母d匹配失败时，暴力法会回到字母b处重新开始对比；<br>这显然是效率低下的；因为回到字母ab处匹配会更好；<br>为什么回到<code>ab</code>处呢？因为<code>ab</code>是$p$的一个前缀！</p><p><strong>LPS数组</strong></p><ul><li><font color="#ef6d3b"><strong>longest prefix and suffix</strong></font>. 最长公共前后缀</li></ul><p>对比<code>abcab</code>，它的LPS就是<code>ab</code>，长度为2；<br>这就是为什么，上图中我们要移动到<code>ab</code>处；</p><ul><li>如何计算LPS数组？<br>利用了递推的思想，有空详细解释下~</li></ul><pre><code class="language-python">LPS[m] # 构建的数组i, j = 0, 1 LPS[0] = 0while j &lt;= m:    if P[i] == P[j]:        LPS[j] = i + 1        i++; j++    else:        if i == 0:            LPS[j] = 0            j++        else:            i = LPS[i-1]</code></pre><p><strong>复杂度</strong><br>时间复杂度$O(m)$，$m$是子串P的长度；</p><p><strong>利用LPS数组做匹配</strong></p><pre><code class="language-python">i = 0 # 父串S下标j = 0 # 子串P下标while i &lt; len(S):    if S[i] == P[j]:        i++; j++    elif j &gt; 0:        j = LPS[j-1]    else:        i++        if j = len(P):        # Match Success        pass</code></pre><p>这一步时间复杂度是len(S)，即$O(n)$<br><font color="#ef6d3b"><strong>KMP算法的复杂度即$O(n+m)$</strong></font></p><div class="admonition warning"><p class="admonition-title">FAQ</p><p>笔者python测试对比如上三种算法（随机字符n=1000w, m=10），时间如下：BF: 5.6sRobin-Karp: 1.18sKMP: 1.41s为什么KMP稳定比RK算法慢？虽然KMP严重依赖Pattern的性质，但不至于稳定差</p></div><!-- ### Boyer-Moore(BM)算法### Sunday算法 --><hr><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://www.zhihu.com/question/21923021">如何更好地理解和掌握 KMP 算法?</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Algorithm】Sorting</title>
      <link href="/posts/1CKQG3J/"/>
      <url>/posts/1CKQG3J/</url>
      
        <content type="html"><![CDATA[<p><code>这是大学时期写的</code></p><h2 id="排序算法的深入分析和实现">排序算法的深入分析和实现</h2><p><strong>1.1 排序的定义</strong><br>对一序列对象根据某个关键字进行排序。</p><p><strong>1.2 术语说明</strong></p><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</p><p><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p><p><strong>内排序In-place</strong>：所有排序操作都在内存中完成；</p><p><strong>外排序Out-place</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p><p><strong>1.3 算法总结</strong><img src="https://img-blog.csdnimg.cn/20190419171130152.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="算法分析与对比"></p><table><thead><tr><th style="text-align:center">排序算法</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">空间复杂度</th></tr></thead><tbody><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">O(n2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">选择排序</td><td style="text-align:center">O(n2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">插入排序</td><td style="text-align:center">O(n2)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(logn)</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">捅排序</td><td style="text-align:center">O(n+k)</td><td style="text-align:center">O(n+k)</td></tr></tbody></table><h3 id="1、冒泡排序（Bubble-Sort）"><strong>1、冒泡排序（Bubble Sort）</strong></h3><p>相邻两个元素比较大小，一次外循环比较(n-1)次；<br>如跑完第一次循环，最大的元素被移到最后一位；<br>内循环跑(n-i)次，因为最后i个元素已排好序；<br><img src="https://img-blog.csdnimg.cn/20190420003741295.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="冒泡排序"></p><p><strong>时间复杂度分析</strong>：<br>比较次数：不管怎样，冒泡排序都要比较(n+(n-1)+…+2+1)次，即n(n-1)/2 ，O(N^2);<br>交换次数：有序不需要交换，逆序交换n(n-1)/2次；O(N^2);</p><p><strong>稳定性分析：</strong><br>相邻两元素大小一样，自然不会多此一举去交换，因此稳定；</p><p><strong>C++代码实现：</strong></p><pre><code class="language-c">//冒泡排序void bubble_sort(int *a, int n){for (int i=0; i&lt;n-1; i++){ //外循环n-1次for (int j=0; j&lt;n-i-1; j++){ //内循环找出前n-i个中最大元素，不断往末尾移if (a[j]&gt;a[j+1]){                int tmp = a[j];                a[j] = a[j+1];                a[j+1] = tmp;}}}}</code></pre><hr><h3 id="2、选择排序（Select-Sort）"><strong>2、选择排序（Select Sort）</strong></h3><p>每次选择第i小的元素，把它放在index为i的位置上；<br>一共n次外循环，第一次选出最小元素，放在第一个；第i次选出第i小的元素；<br>每次内循环要比较(n-i)次，最终选出后(n-i)个元素中最小的，放到i位置上。<br><img src="https://img-blog.csdnimg.cn/2019042000365789.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="选择排序"></p><p><strong>时间复杂度分析</strong>：<br>比较次数：选择排序同样比较(n+(n-1)+…+2+1)次，即n(n-1)/2 ，O(N^2);<br>交换次数：有序不需要交换，逆序交换n(n-1)/2次；O(N^2);</p><p><strong>稳定性分析：</strong><br>因为涉及相隔较远的元素交换位置！<br>例如3 2 3 1，第一次循环结束，3和1交换，破坏了稳定。显然选择排序是不稳定。</p><p><strong>C++代码实现：</strong></p><pre><code class="language-c">//选择排序void select_sort(int *a, int n){for (int i=0; i&lt;n-1; i++){ //外循环n-1次int min = a[i], index = i;for (int j=i; j&lt;n; j++){ //内循环找出后n-i个中最小元素，放到第i位置if (a[j] &lt; min){min = a[j];index = j;}}a[index] = a[i];a[i] = min;}}</code></pre><hr><h3 id="3、插入排序（Insert-Sort）"><strong>3、插入排序（Insert Sort）</strong></h3><p>类比平时打牌时插牌，拿到新元素，把它放到已排好序的元素中的适当位置；<br>外循环n次，第i次外循环结束，则前i个数已排好序，第一个默认排好序；<br>内循环为执行(n-i)次，将新元素和前i个排好序的依次比较，是一个不断往前插的过程；<br><img src="https://img-blog.csdnimg.cn/20190420003829832.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="插入排序"></p><p><strong>时间复杂度分析</strong>：<br>比较次数：同O(N^2);<br>交换次数：有序不需要交换，逆序交换n(n-1)/2次；O(N^2);</p><p><strong>稳定性分析：</strong><br>插入排序是稳定的；例如 1 2 3 3，前三个已经排好序，最后的3显然不会再往前插；</p><p><strong>C++代码实现：</strong></p><pre><code class="language-c">//插入排序void insert_sort(int *a, int n){for (int i=1; i&lt;n; i++){ //外循环n-1次，第i次外循环结束前i+1个元素排好序列int index = i;for (int j=i-1; j&gt;=0; j--){ //内循环将第i个元素往前插if (a[index]&lt;a[j]){int tmp = a[index];a[index] = a[j];a[j] = tmp;index = j;}}}}</code></pre><hr><h3 id="4、归并排序（Merge-Sort）"><strong>4、归并排序（Merge Sort）</strong></h3><p>采用分治法，将序列分成两个n/2长度的子序列，合并时依次按大小输出到新序列；<br>占用额外空间，非原址排序；<br><img src="https://img-blog.csdnimg.cn/20190420003900232.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_5,color_FFFFFF,t_70" alt="归并排序"></p><p><strong>时间复杂度分析</strong>：<br>每次递归复杂度O(n)，递归层数O(lgn)，所以复杂度为O(nlgn);</p><p><strong>稳定性分析：</strong><br>归并排序是稳定的，合并过程左右两个序列的比较大小保证了这种稳定性；</p><p><strong>C++代码实现：</strong></p><pre><code class="language-c">//归并排序void merge(int *a, int *b, int p, int r, int q){ //合并下标为p到r 与 r+1到q 这两部分int write = p; //写入b的下标int i=p,j=r+1; //分别标记左右序列正要读的位置while (i&lt;=r &amp;&amp; j &lt;= q){if (a[i]&lt;=a[j])b[write++] = a[i++];        else if (a[i]&gt;a[j])b[write++] = a[j++];}//此时左、右序列可能有一个未写完while (i&lt;=r)b[write++] = a[i++];while (j&lt;=q)b[write++] = a[j++];for (int k=p; k&lt;=q; k++)a[k] = b[k];}void merge_sort(int *a, int *b, int beg, int end){if (end==beg){ //1个元素直接返回return;}if (end-beg == 1){ //2个元素，排个序if (a[beg]&gt;a[end]){int tmp = a[beg];a[beg] = a[end];a [end] = tmp;}return;}merge_sort(a,b,beg,(beg+end)/2);merge_sort(a,b,(beg+end)/2+1,end);merge(a,b,beg,(beg+end)/2,end);}</code></pre><hr><h3 id="5、快速排序（Quick-Sort）"><strong>5、快速排序（Quick Sort）</strong></h3><p>从数列中挑出一个元素，称为 “基准”(pivot)；<br>重新排序数列，所有比pivot小的摆放在基准前面，所有比pivot大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><p>Partition操作实现：<br>pivot选择末尾元素，维护i和j，i指向头，j指向pivot前一个。i不断往后搜索直到找到第一个大于pivot的元素；j不断往前搜索直到找到第一个小于pivot的元素。i,j都找到时交换i,j上的元素，如果j&lt;i，退出循环，此时交换pivot和i位置，满足pivot(即i原来位置)左边都比它小，右边都比它大；<br><img src="https://img-blog.csdnimg.cn/20190420015014337.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="快速排序"><br><strong>时间复杂度分析</strong>：<br>每次递归复杂度O(n)，递归层数O(lgn)，所以复杂度为O(nlgn);</p><p><strong>稳定性分析：</strong><br>快速排序是不稳定的；<br>因为间隔元素的交换，很可能打破原有相同元素的顺序关系；<br>例如3 3 1 1 2，选择2为pivot，那么第一次循环，3和1就发生了交换，打乱了稳定性；</p><p><strong>C++代码实现：</strong></p><pre><code class="language-c">//快速排序int partition(int *a, int p, int q){int pivot = q; //选择最后一个元素作为pivotint i=0,j=q-1;while (i&lt;=j){while (a[i]&lt;=a[pivot] &amp;&amp; i&lt;q ){ //i左边都&lt;=pivoti++;}while (a[j]&gt;a[pivot] &amp;&amp; j&gt;=p ){ //j右边都&gt;pivotj--;}if (i&lt;j){ //i不会等于jint tmp = a[i];a[i] = a[j];a[j] = tmp;}}//交换i和pivotint tmp = a[i];a[i] = a[pivot];a[pivot] = tmp;return i; //partition结束，满足左边&lt;=它，右边&gt;它}void quick_sort(int *a, int beg, int end){if (beg&gt;=end)return;int pivot = partition(a,beg,end);quick_sort(a,beg,pivot-1);quick_sort(a,pivot+1,end);}</code></pre><h2 id="参考资料">参考资料</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Occlusion: 可见性与剔除</title>
      <link href="/posts/2AR5BC4/"/>
      <url>/posts/2AR5BC4/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">概要</p><p><strong>光栅化</strong>决定如何将三维场景画到二维屏幕上；但以什么样的顺序绘制？（<strong>Visibility</strong>）是否所有的物体都要绘制到屏幕上? （<strong>Occlusion</strong>）</p></div><hr><h2 id="Occlusion">Occlusion</h2><ul><li><p><font color="#ef6d3b"><strong>一叶障目，不见泰山</strong></font></p></li><li><p>想象你的视线，远处的物体总被近处的遮挡，这就是Occlusion!</p></li><li><p>将“看不见”的物体剔除掉，是图形学优化的重要方向之一!</p></li></ul><hr><h2 id="Painter’s-Algorithm">Painter’s Algorithm</h2><ul><li><font color="#ef6d3b"><strong>画家算法：由远到近绘制物体，远处总被近处的遮挡；</strong></font><br>因此又称<em><strong>Depth-sort Algorithm</strong></em>;</li></ul><p><img src="/images/painter.png" alt=""></p><ul><li><font color="#ef6d3b"><strong>算法分析</strong></font>:<ul><li>需要对n个物体排序: $O(nlogn)$的复杂度，对$n$面数;</li><li>不能处理多面重叠的情形;</li></ul></li></ul><p><img src="/images/painter_bounds.png" alt=""></p><hr><h2 id="Z-Buffer">Z-Buffer</h2><ul><li>对于每个三角形面片中每个Pixel$(x,y,z$），不断取其$z_{min}$，并赋值位z-buffer上该pixel的值</li></ul><pre><code class="language-py"># init zbuffer for +∞for (each tri T):    for (each pixel (x,y,z) in T):        if (z &lt; zbuffer[x][y]):            framebuffer[x][y] = rgb; # also as color buffer            zbuffer[x][y] = z; # also as depth buffer        else:            # occlusion now!</code></pre><ul><li><font color="#ef6d3b"><strong>算法分析</strong></font>:<ul><li>省略了排序，因此是$O(n)$的复杂度，对$n$面数；</li><li>不能处理两个三角形，存在深度值z相同的pixel的情形；（虽然这种情况很少发生，因为是float32）</li></ul></li></ul><h3 id="什么是framebuffer与zbuffer">什么是<em>framebuffer</em>与<em>zbuffer</em>?</h3><ul><li>通俗的说，它们都是一块内存（<em><strong>RAM</strong></em>）;<ul><li><font color="#ef6d3b"><em><strong>framebuffer</strong></em></font>：存储rgb的颜色值</li><li><font color="#ef6d3b"><em><strong>z-buffer (depth-buffer)</strong></em></font>：存储深度信息</li></ul></li></ul><h3 id="图解z-buffer的生成过程">图解z-buffer的生成过程</h3><ul><li>可以看出，计算z-buffer就是一个不断取$min$的过程！<br><img src="/images/zbuffer.png" alt=""></li></ul><div class="admonition todo"><p class="admonition-title">TODO</p><p>补充一张Nsight抓帧的frame-buffer, depth-buffer截图~</p></div><hr><h2 id="Futhermore…">Futhermore…</h2><ul><li><p>常用的culling方案</p></li><li><p>hlod</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Graphics </category>
          
          <category> Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于开发理念: Simple is Good</title>
      <link href="/posts/1ZMZBDW/"/>
      <url>/posts/1ZMZBDW/</url>
      
        <content type="html"><![CDATA[<p>希望这个理念，能够伴随我所有的开发生涯<br>优秀的开发，是<strong>大道至简，而不是简单问题复杂化</strong></p><h2 id="在这之前">在这之前</h2><p>大学身边有一帮要好的文科朋友，经常会观察到这些现象：<br>理工科出身的同志，喜欢提枪就上，埋头苦干，就算没思路也要把电脑敲的噼里啪啦响；<br>文科出身的同志，喜欢事前构思、冥想，甚至磨半天也挤不出几个字；</p><p>如果要双方取长补短的话，<br>我希望程序员的世界，多一些<strong>主观性的理念的东西</strong>，<br>就是在每次敲代码之前，有个尼采一样的诗人在你耳边朗诵一遍：<br><strong>“1.少用宏； 2.做好封装；3.保持代码整洁 …”</strong></p><p>程序员喜欢review，<strong>把问题留给Bug和Review阶段</strong>，<br>但为什么不学文科生，<br>脑海中树立一些宏观的、虚头巴脑的、理念的东西，<br>每次动键盘前，有个“社会主义核心价值观”在脑子里过一遍：<br>虽然玄学了些，但我觉得是个好建议。</p><p>这就是我写这些随笔的原因。</p><h2 id="Simple-is-Good">Simple is Good</h2><ul><li>我尝试用一些观点来论证<strong>why simple is good</strong><ul><li>运行更快</li><li>Bug几率更低</li><li>维护成本更低</li></ul></li></ul><blockquote><p>有两种软件设计方法:<br>第一种是使得软件足够简单以至于<strong>显然没有错误</strong>;<br>第二种是使得软件足够复杂以至于<strong>没有显然的错误</strong>。<br>(最难的是第一种)<br>- Tony Hoare (1980图领奖得主)</p></blockquote><ol><li><p>如果你说如何让一个复杂的功能保持simple？ 试试 <font color="#ef6d3b"><strong>封装</strong></font></p></li><li><p>优化经常是一个不断<font color="#ef6d3b"><strong>删除代码</strong></font>的过程</p></li><li><p>simple不是无脑删除，合理的<font color="#ef6d3b"><strong>解耦与拆分</strong></font>也是一种simple</p></li><li><p>你可以<font color="#ef6d3b"><strong>尽可能地控制“少”</strong></font>，但你永远无法<strong>控制“多”</strong>；<br>想象一万个人对同一个需求的不同实现，总是千奇百怪。</p></li></ol><h2 id="Simple-拓展阅读">Simple 拓展阅读</h2><p><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <a href="https://github.com/awerdx520/awesome-programming-books-1/blob/master/clean-code/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93.pdf">代码整洁之道</a></p><p><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.zhihu.com/question/26483508">知乎: 一百行以下有哪些给力代码？</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中英文档</title>
      <link href="/posts/XPRTBH/"/>
      <url>/posts/XPRTBH/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">NOTE</p><ul><li>罗列了常用、令人困惑的英文专有词汇，可结合站内 <strong>右上角的搜索</strong> 速查!</li><li>本篇已停更一段时间，尽量使用 <font color="#ef6d3b"><strong>“英语阅读，中文写作”</strong></font> 的方式</li></ul></div><h2 id="好的翻译多重要">好的翻译多重要?</h2><ul><li><p>先祭出CS领域的经典垃圾翻译:</p><ul><li><strong>socket</strong>: 套接字</li><li><strong>robust</strong>: 鲁棒性</li><li><strong>handle</strong>: 句柄</li></ul></li><li><p>再看看什么经典优秀翻译:</p><ul><li><strong>context</strong>: 上下文 (通俗)</li><li><strong>process/thread</strong>: 进程/线程 (进行中的程序)</li><li><strong>garbage collection</strong>: 垃圾回收 (直译就够了)</li></ul></li><li><p>欢迎移步知乎话题:</p><ul><li><a href="https://www.zhihu.com/question/22950899">为什么handle会被翻译成句柄？</a></li><li><a href="https://www.zhihu.com/question/27192923">哪些专业名词翻译得特别烂？</a></li></ul></li></ul><h2 id="中英对照">中英对照</h2><div class="admonition warning"><p class="admonition-title">关于对照表</p><p>1.Wikipedia的解释准确且全面，但可能不易理解；</p><p>2.某些社区(如知乎、博客)会有一些精彩而巧妙的理解，因此贴出来；</p><p>3.个人备注栏，添加了一些自己的理解；</p><ol start="4"><li><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>意味着远离中文!</li></ol></div><table><thead><tr><th style="text-align:center">英文</th><th style="text-align:center">中文</th><th style="text-align:center">官方</th><th style="text-align:left">个人备注</th></tr></thead><tbody><tr><td style="text-align:center">socket</td><td style="text-align:center">套接字</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Network_socket">Wikipedia</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">robust</td><td style="text-align:center">鲁棒性</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Robustness">Wikipedia</a></td><td style="text-align:left">功能健壮, 具有高扩展性</td></tr><tr><td style="text-align:center">handle</td><td style="text-align:center">句柄</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Handle_(computing)">Wikipedia</a></td><td style="text-align:left">对一段资源的引用, 像pointer?</td></tr><tr><td style="text-align:center">Cartesian coord.</td><td style="text-align:center">笛卡尔坐标系</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Cartesian_coordinate_system">Wikipedia</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Homogeneous coord.</td><td style="text-align:center">齐次坐标系</td><td style="text-align:center"><a href="https://www.zhihu.com/question/59595799">知乎</a></td><td style="text-align:left">n+1维表示n维 <a href="http://localhost:4000/posts/1513JCX/">我的博客</a></td></tr><tr><td style="text-align:center">Viewport</td><td style="text-align:center">屏幕</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Projection</td><td style="text-align:center">投影</td><td style="text-align:center"></td><td style="text-align:left"><a href="http://localhost:4000/posts/1513JCX/">我的博客</a></td></tr><tr><td style="text-align:center">Orthographic</td><td style="text-align:center">正交</td><td style="text-align:center"></td><td style="text-align:left"><a href="http://localhost:4000/posts/1513JCX/">我的博客</a></td></tr><tr><td style="text-align:center">Perspective</td><td style="text-align:center">透视</td><td style="text-align:center"></td><td style="text-align:left"><a href="http://localhost:4000/posts/1513JCX/">我的博客</a></td></tr><tr><td style="text-align:center">rasterization</td><td style="text-align:center">光栅化</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Rasterisation">Wikipedia</a></td><td style="text-align:left">三维场景渲染到二维屏幕</td></tr><tr><td style="text-align:center">anti-aliasing</td><td style="text-align:center">抗锯齿(AA)</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Anti-aliasing">Wikipedia</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">framebuffer</td><td style="text-align:center"></td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Framebuffer">Wikipedia</a></td><td style="text-align:left">GPU memory to store</td></tr><tr><td style="text-align:center">Z-Buffer/Depth-Buffer</td><td style="text-align:center"></td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Z-buffering">Wikipedia</a></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/2AR5BC4/">我的博客</a></td></tr><tr><td style="text-align:center">painter’s algorithm</td><td style="text-align:center">画家算法</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Painter%27s_algorithm">Wikipedia</a></td><td style="text-align:left">由远到近排序后绘制，近的覆盖远的</td></tr><tr><td style="text-align:center">NDC</td><td style="text-align:center">Normalized Device Coordinates</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">VBO</td><td style="text-align:center">vertex buffer object</td><td style="text-align:center"><a href="...">Wikipedia</a></td><td style="text-align:left"><a href="...">我的博客</a></td></tr><tr><td style="text-align:center">VAO</td><td style="text-align:center">vertex array object</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">EBO</td><td style="text-align:center">element buffer objects</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">vs</td><td style="text-align:center">vertex shader</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">ps(fs)</td><td style="text-align:center">pixel (fragment) shader</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">uv</td><td style="text-align:center">纹理坐标</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Texture filtering</td><td style="text-align:center">纹理过滤</td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Texture_filtering">Wikipedia</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Artifacts</td><td style="text-align:center"><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Visual_artifact">Wikipedia</a></td><td style="text-align:left">凡是不接近真实的图形表现</td></tr><tr><td style="text-align:center">Mipmap</td><td style="text-align:center"></td><td style="text-align:center"><a href="https://learnopengl.com/Getting-started/Textures">LearnOpenGL</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Phong lighting model</td><td style="text-align:center"><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Phong_reflection_model">Wikipedia</a></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/SZGATA/">Colors and Materials</a></td></tr><tr><td style="text-align:center">Ambient</td><td style="text-align:center">环境光</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/SZGATA/">Colors and Materials</a></td></tr><tr><td style="text-align:center">Diffuse</td><td style="text-align:center">漫反射光</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/SZGATA/">Colors and Materials</a></td></tr><tr><td style="text-align:center">Specular</td><td style="text-align:center">高光</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/SZGATA/">Colors and Materials</a></td></tr><tr><td style="text-align:center">Lightmap</td><td style="text-align:center"><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/SZGATA/">Colors and Materials</a></td></tr><tr><td style="text-align:center">directional light</td><td style="text-align:center">平行光</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/S7WXS5/">Lighting</a></td></tr><tr><td style="text-align:center">point light</td><td style="text-align:center">点光</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/S7WXS5/">Lighting</a></td></tr><tr><td style="text-align:center">spot light</td><td style="text-align:center">聚光灯</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.luhao.wiki/posts/S7WXS5/">Lighting</a></td></tr><tr><td style="text-align:center">hover</td><td style="text-align:center">鼠标悬停态</td><td style="text-align:center"></td><td style="text-align:left"><a href="https://www.runoob.com/cssref/sel-hover.html">CSS hover</a></td></tr><tr><td style="text-align:center">Assembly-Language</td><td style="text-align:center">汇编</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">AT&amp;T Syntax</td><td style="text-align:center">AT&amp;T汇编格式</td><td style="text-align:center"><a href="https://www.cs.mcgill.ca/~cs573/winter2001/AttLinux_syntax.htm#:~:text=Notable%20differences%20between%20the%20two,Intel%20register%20operands%20are%20undelimited.">Syntax versus</a></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">Intel Syntax</td><td style="text-align:center">Intel汇编格式</td><td style="text-align:center"><a href="https://www.cs.mcgill.ca/~cs573/winter2001/AttLinux_syntax.htm#:~:text=Notable%20differences%20between%20the%20two,Intel%20register%20operands%20are%20undelimited.">Syntax versus</a></td><td style="text-align:left"></td></tr></tbody></table><p>| socket |  | <a href="...">Wikipedia</a> | |</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> linux </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript数据类型</title>
      <link href="/posts/3YE7XY8/"/>
      <url>/posts/3YE7XY8/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">Note</p><p><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md"><em><strong>Type Challenge</strong></em></a></p><p>这是为TypeScript打造的<code>Online Judge</code>,可以考察对其<strong>类型</strong>的理解</p></div><h2 id="Builtin">Builtin</h2><p><font color="#ef6d3b"><strong>Primitives Types</strong></font></p><ul><li><em><strong>string</strong></em><ol><li>单引号与双引号皆可 (同python);</li><li><code>${expr}</code>用来嵌入表达式;</li></ol></li><li><em><strong>number</strong></em><ol><li>没有<code>int, float</code>之分;</li><li><code>0x, 0o</code>都是ES6的进制表示法;</li></ol></li><li><em><strong>boolean</strong></em><br><code>true, false</code></li><li><em><strong>空值</strong></em><br><code>undefined, null</code>: 变量赋值<br><code>void</code>: 函数返回值</li></ul><p><font color="#ef6d3b"><strong>Object Types</strong></font></p><ul><li><em><strong>Array</strong></em></li><li>…</li></ul><h2 id="Any">Any</h2><p>当不确定类型时，使用<code>any</code>，这样后面可以赋予它任何类型</p><pre><code class="language-js">let foo: any;foo = true;foo = 'abcd';let arr: any[] = ['John', 88, true];arr.push('luhao');</code></pre><p>any对象可以调用任意属性与方法!</p><pre><code class="language-js">let foo: any;console.log(foo.name); // OKfoo.setName('luhao'); // OK</code></pre><p>没有申明类型的变量，等价于any</p><pre><code class="language-js">// 两者等价let foo;let foo: any</code></pre><p><a href="https://stackoverflow.com/questions/50875618/any-in-typescript">stackoverflow: 申明any与否的意义?</a></p><p><code>tsconfig.json</code>中有如果对"strict"定义为true，那么对所有any的非法访问都是错误的!</p><h2 id="Inference">Inference</h2><p><strong>类型推论</strong>: 对于没有指定类型但已经赋值的变量，TypeScript会推断出一个类型：</p><pre><code class="language-js">let foo = 'luhao'; // 此时TS已推断foo为stringfoo = 100; // Error// error TS2322: Type 'number' is not assignable to type 'string'.</code></pre><h2 id="Union">Union</h2><p><strong>联合类型</strong>使用 <code>|</code> 表示几个类型的并集：</p><pre><code class="language-js">let foo: string | number;foo = 'luhao'; // OKfoo = 100; // OKfoo = true; // Error</code></pre><p>联合类型一旦被赋值，其类型就是唯一的：</p><pre><code class="language-js">let foo: string | number;foo = 'luhao';console.log(foo.length); // OKfoo = 100;console.log(foo.length); // Error, 此时foo是number类型</code></pre><hr><h2 id="interface">interface</h2><p>它就像C中的<code>struck</code>:</p><pre><code class="language-js">interface IPerson {    name: string; // 必选属性    age?: number; // 可选属性    readonly gender: boolean; // 只读属性    [optName: string]: any; // 任意属性}let person: IPerson = {    name: 'luhao',    // age: 24, // 可选    gender: true,    school: 'NJU',}</code></pre><h2 id="Assertion-类型断言">Assertion: 类型断言</h2><p>!!! todo</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VSCode插件】Markdown-snippet</title>
      <link href="/posts/2167JH4/"/>
      <url>/posts/2167JH4/</url>
      
        <content type="html"><![CDATA[<p>实现了一款用于<strong>Markdown代码补全、CSS样式插入</strong>等功能的VScode插件<br>开发环境：<code>VScode, TypeScript</code></p><hr><h2 id="Github-Repo">Github Repo</h2><p>🏠 <a href="https://github.com/593413198/VScode-Markdown-Snippet"><strong>VScode-Markdown-Snippet</strong></a></p><h2 id="font-size-3-TODO-font"><font size="3"><strong>TODO</strong></font></h2><p><font color="#FF1E10"><strong>这个是若干年前的项目，准备捞回来完善下；</strong></font></p><ul><li>支持fontawesome</li><li>支持骚的html语法</li><li>支持表情的检索</li><li>支持size/color快速自定义</li></ul><h2 id="插件功能概述">插件功能概述</h2><ul><li><ol><li>支持Markdown基本语法插入与补全：表格、超链接、图片…</li></ol></li><li><ol start="2"><li>支持对选中内容：加粗、下划线、划去线…</li></ol></li><li><ol start="3"><li>支持内嵌多种css样式：改变颜色、左右对齐、字号…</li></ol></li><li><ol start="4"><li>支持图片直接复制粘贴到VScode；</li></ol></li></ul><hr><h2 id="W1-环境搭建与Demo">W1: 环境搭建与Demo</h2><ul><li><strong>直接上文档</strong>: <a href="https://code.visualstudio.com/api/get-started/your-first-extension"><strong>VScode API</strong></a></li></ul><p><code>npm install -g yo generator-code</code> : 安装依赖环境<br><code>yo code</code> : 进入开发环境, 如下图</p><!-- - 不得体不说这个开发体验做的真是nice![](/images/surround.png) --><ul><li><strong>观察一下开发目录</strong>：<br><img src="/images/tree.png" alt=""></li></ul><p><font color="#FF1E10"><strong>extension.ts</strong></font>: 插件的脚本逻辑: TypeScript<br><font color="#1AAD19"><strong>package.json</strong></font>: 所有的环境配置选项: 插件名、版本号、command…<br><font color="#1A9BFF"><strong><a href="http://README.md">README.md</a></strong></font>: 发布后的文档</p><ul><li><strong>第一个Demo: 对选中内容加粗显示</strong></li></ul><pre><code class="language-py">**这段文字是加粗显示的**  #这是markdown加粗语法</code></pre><ul><li><strong>下面是实现的ts逻辑</strong><ul><li><a href="https://code.visualstudio.com/api/references/vscode-api">showQuickPick API</a></li><li><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">insertSnippet API</a></li></ul></li></ul><pre><code class="language-js">// 当surround插件被激活时，会进入activate函数export function activate(context: vscode.ExtensionContext) {    // 输出一行Logconsole.log('Congratulations, your extension "surround" is now active!');    // surround.sur 定义在package.json中let disposable = vscode.commands.registerCommand('surround.sur', function () {interface CommandQuickPickItem extends vscode.QuickPickItem {command: () =&gt; Promise&lt;void&gt;;}let items: CommandQuickPickItem[] = [];items.push({ description: '对选中的字体加粗', label: 'Font Bold', command: surroundWithBold });vscode.window.showQuickPick(items, { matchOnDetail: true, matchOnDescription: true }).then(selectedItem =&gt; {if (selectedItem &amp;&amp; typeof selectedItem.command === 'function') {selectedItem.command();}});;}// 对选中的内容进行加粗function surroundWithBold() {let msg = "**";let snippet = msg + '${TM_SELECTED_TEXT}' + msg;vscode.commands.executeCommand('editor.action.insertSnippet', {'snippet': snippet} )}</code></pre><hr><h2 id="VScode插件打包与发布">VScode插件打包与发布</h2><h3 id="本地打包测试">本地打包测试</h3><ul><li>这里推荐打包为visx，并使用VScode安装<br><code>npm i vsce -g</code>: 安装vsce打包工具<br><code>vsce package</code>: 在插件目录打包<br><code>xxx.vsix</code>: 在VScode的插件右上角选择<code>Install from VSIX</code></li></ul><h3 id="发布到VScode-Marketplace">发布到VScode Marketplace</h3><ul><li><p>使用Azue注册一个开发组织<br><code>vsce login &lt;publish-name&gt;</code>: 登录自己的开发者账户, 需要tokens<br><code>vsce publish</code>: 发布到marketplace<br><code>vsce publish patch</code>: 使发布的version自增, 会自动修改<code>package.json</code>中的版本号<br><code>vsce unpublish &lt;publish-name&gt;.&lt;extension-name&gt;</code>: 下架</p></li><li><p><a href="https://marketplace.visualstudio.com/manage/publishers/luhao"><strong>这是我的VScode Marketplace的个人主页</strong></a></p></li><li><p>已上架VScode Marketplace<br><img src="/images/vscode-ext.png" alt=""></p></li></ul><hr><h2 id="参考资料">参考资料</h2><blockquote><ul><li><a href="https://code.visualstudio.com/api/get-started/your-first-extension">Building your VScode extension</a></li><li><a href="https://www.typescriptlang.org/">TypeScript</a></li><li><a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/">VScode插件开发 中文文档</a></li><li><a href="https://cloud.tencent.com/developer/article/1827236">VScode LaTex Snippets开发教程</a></li><li><a href="https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.html">VScode插件开发全攻略十篇</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VIM】Vi Improved</title>
      <link href="/posts/vim/"/>
      <url>/posts/vim/</url>
      
        <content type="html"><![CDATA[<p><em>vi/vim is the best editor in the world!</em><span id="more"></span></p><div class="admonition note"><p class="admonition-title">骚操作</p><ul><li>终端输入 <code>set -o vi</code>，在命令行使用vim模式（<code>set -o emacs</code>以回退）</li><li>gim配置vim：<code>git config --global core.editor "vim"</code></li></ul></div><div class="markmap-container" style="height:425px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;vim&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor\&quot;>How do I exit the Vim editor?</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;vim modes&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#normal-模式\&quot;>normal</a>（Esc）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[4,5],&quot;f&quot;:true},&quot;v&quot;:&quot;h（←）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6],&quot;f&quot;:true},&quot;v&quot;:&quot;j（↓）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[6,7],&quot;f&quot;:true},&quot;v&quot;:&quot;k（↑）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;l（→）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#insert-模式\&quot;>insert</a>（i）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#visual-模式\&quot;>visual</a>（v）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;vim commands&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#Command\&quot;>Commnad</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[12,13],&quot;f&quot;:true},&quot;v&quot;:&quot;d（delete）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14],&quot;f&quot;:true},&quot;v&quot;:&quot;y（yank）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;r（replace）&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;#object\&quot;>Object</a>&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;w（word）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[17,18],&quot;f&quot;:true},&quot;v&quot;:&quot;a（argument）&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;), ], &amp;quot; ⭐&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;vimrc&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[20,21],&quot;f&quot;:true},&quot;v&quot;:&quot;<a href=\&quot;https://www.ruanyifeng.com/blog/2018/09/vimrc.html\&quot;>阮一峰：vim配置入门</a>&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;vim pro&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[22,23],&quot;f&quot;:true},&quot;v&quot;:&quot;多行编辑&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[23,24],&quot;f&quot;:true},&quot;v&quot;:&quot;% 配对&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[24,25],&quot;f&quot;:true},&quot;v&quot;:&quot;f 查找&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[25,26],&quot;f&quot;:true},&quot;v&quot;:&quot;...&quot;}]}],&quot;p&quot;:{}}"></svg></div><h2 id="1、Vim-Vi-improvment">1、Vim: Vi improvment</h2><p>先从一个stackoverflow经典问题看起：<br><a href="https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor">How do I exit the Vim editor?</a></p><p>这是回答：<br>Hit the <code>Esc</code> key to enter “Normal mode”. Then you can type : to enter “Command-line mode”. A colon <code>(:)</code> will appear at the bottom of the screen and you can type in one of the following commands. To execute a command, press the Enter key.</p><p><strong><code>:q</code> to quit (short for :quit)</strong><br><strong><code>:q!</code> to quit without saving (short for :quit!)</strong><br><strong><code>:wq</code> to write and quit</strong><br>…</p><p>到这里，你至少不用窘迫的不知如何退出Vim界面了！</p><ul><li>技巧：所有Vim Operation，都源于英文的缩写 <strong>（例如 <code>q</code> 表示 <code>quit</code>）</strong>, 因此下面的所有Vim快捷键，我都会尽可能列出其英文含义，已帮助你更快得记住它！</li></ul><h2 id="2、Vim-modes">2、Vim modes</h2><p>什么是mode？<br><em>模式，几乎所有的编辑器只有一种模式，即insert 插入</em><br><font color="#ef6d3b"><strong>但是，Vim有起码3种重要的模式：normal, insert, visual</strong></font></p><ul><li>引自3中一句话：Programming大多数的时间消耗，不是在Writing上，而是review和Editing。</li></ul><h3 id="normal-模式">normal 模式</h3><p>如何移动光标?</p><ul><li><code>h</code> - ← move left</li><li><code>j</code> - ↓ move down</li><li><code>k</code> - ↑ move up</li><li><code>l</code> - → move right</li></ul><p>更高效得，如何以单词为单位移动?</p><ul><li><code>w</code> - move to beginning of next word (<strong>word</strong>)</li><li><code>b</code> - move to previous beginning of word (<strong>back word</strong>)</li><li><code>e</code> - move to end of word (<strong>end word</strong>)</li></ul><p><code>just type 'vim' in terminal, and check these with your hands!</code></p><h3 id="insert-模式">insert 模式</h3><p>使用<code>i</code>来进入insert模式，使用Esc来退出insert。</p><ul><li><code>i</code> - insert text before cursor (<strong>insert</strong>)</li><li><code>a</code> - insert text after cursor (<strong>insert after</strong>)</li><li><code>o</code> - Start a new line below cursor, insert text (<strong>??</strong>)</li></ul><h3 id="visual-模式">visual 模式</h3><p>你一定猜到了，使用<code>v</code>可以进入visual模式。<br>此时可以批量成段的选择、编辑文本！</p><h2 id="3、Vim-commands">3、Vim commands</h2><p>直到阅读这篇文章前，我都不曾理解vim command的真正要义：<br><a href="https://blog.carbonfive.com/vim-text-objects-the-definitive-guide/">Vim Text Objects: The Definitive Guide</a></p><p><font color="#ef6d3b"><strong>在Vim的眼中，一切内容分为两种：text和objects</strong></font><br>试想一下，一串无规律的字符串，它在编辑器眼里是text，这不无道理。<br>但如果是一个word，一个sentence，甚至是argument，那vim会视其为一个text object，以实现个更高效的操作。</p><ul><li><p><code>&lt;number&gt;&lt;command&gt;&lt;text object&gt;</code><br>这构成了几乎vim 90%的操作。</p></li><li><p><code>daw</code> – (<strong>delete a(around) word</strong>)<br>没错，它执行了删除一个单词的操作，并取决于你光标所在的位置。</p></li><li><p><code>diw</code> - (<strong>delete inner word</strong>)<br>inner于around有什么区别？around删除了周围的空白符，但是inner只删除了单词！</p></li><li><p><code>vf)</code> - (<strong>visual(select) until(find) first <code>)</code></strong>)<br>选中直到)的所有字符，并进入visual模式！ （需要稍加理解）</p></li></ul><p>下面罗列了几乎所有的command和obejct，标星的表示常用！</p><h3 id="Command">Command</h3><ul><li><code>d</code> - delete ★</li><li><code>y</code> - yank (经典ctrl c) ★</li><li><code>c</code> - change (delete and insert) ★</li><li><code>v</code> - visual (选中并进入visual模式) ★</li><li><code>r</code> - replace (delte and insert)</li></ul><h3 id="Object">Object</h3><ul><li><code>w</code> - word ★</li><li><code>s</code> - sentence</li><li><code>p</code> - paragraph (其实对不同于语言的识别不佳)</li><li><code>a</code> - argument ★ (编辑函数很有用)</li><li><code>"</code> - quoted ★ (引号内)</li><li><code>)</code>, <code>]</code>, <code>}</code>, <code>:</code>… 一切皆可</li></ul><h2 id="4、vimrc">4、vimrc</h2><p><code>~/.viminfo</code>是vim的cache，包括历史操作等<br>vim的配置是在<code>~/.vimrc</code>, 比较多且难记, 可以查看 <a href="https://www.ruanyifeng.com/blog/2018/09/vimrc.html">Vim 配置入门</a></p><p>例如: <code>set number</code>是显示行号</p><h2 id="5、vim-pro">5、vim pro</h2><ul><li><p><strong>多行编辑</strong></p><ul><li><code>v</code>键盘进入<code>visual block</code>模式，然后选中要编辑的所有行</li><li><code>I</code>进入多行编辑模式, <code>Esc</code>退出生效</li></ul></li><li><p>快速光标移动</p><ul><li><code>%</code>: 配对括号、引号等</li><li><code>{、}</code>: 上一个/下一个 空行</li><li><code>[[、]]</code>: 上一个/下一个 代码段</li><li><code>+、-</code>: 上一行/下一行 非空白字符</li><li><code>Enter</code>: 下一行 非空白字符</li><li><code>f</code>+单字符: <strong>行内</strong>搜索+快速移动, 按 分号键<code>;</code> 可以继续查找</li></ul></li><li><p>运用数字表示重复</p><ul><li><code>3j</code>: 表示往下3行</li><li><code>3igo</code>: 结束按esc, 即输入3遍go</li></ul></li><li><p>不熟练操作</p><ul><li><code>~</code>: 转大小写</li><li><code>O</code>: 大写<code>O</code>在上方插入新行</li><li><code>c</code>: 改写操作<ul><li><code>cc</code>: 删除当前行, 并进插入模式</li><li><code>cw</code>: 改写下个单词</li></ul></li></ul></li></ul><h2 id="5、关于Vim的更多">5、关于Vim的更多</h2><ul><li><p><a href="https://wklken.me/posts/2017/03/25/vim-about-edit.html">vim 杂谈 - 关于快速编辑</a></p></li><li><p><a href="https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor">StackOverflow: How do I exit the Vim editor?</a></p></li><li><p><a href="https://irian.to/blogs/introduction-to-vim-modes/">Introduction to Vim Modes</a></p></li><li><p><a href="https://www.vimgolf.com/">VimGolf</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给三年内的技术成长目标</title>
      <link href="/posts/goal-2024/"/>
      <url>/posts/goal-2024/</url>
      
        <content type="html"><![CDATA[<div class="admonition warning"><p class="admonition-title">以下 写于2023年7月</p><ul><li>继续惊觉时间飞逝</li><li>有收获，但也有走弯路</li><li>剩余一年时间，保持现有节奏之余，坚持两个核心</li></ul></div><h3 id="核心一：提高效率">核心一：提高效率</h3><p>当追求细化文档、扩散式学习（遇到陌生的点就深挖）后，工作的效率（指做完主线）明显降低。<br>中短期来看，这是不好的迹象，期望通过 <strong>区分任务主次</strong> 来改善。</p><h3 id="核心二：攻城略地">核心二：攻城略地</h3><p>期望 “染指” 更多中大型模块，快速弥补经验上的欠缺。<br>同时，攻坚 <em>modern cpp、linux kernel、network、algorithm</em>… 等领域，计算机的 “万丈高楼平地起”，恰恰依赖这些基础知识。</p><hr><div class="admonition note"><p class="admonition-title">以下 写于2022年5月</p><ul><li>惊觉半年已逝；</li><li>回看曾经的目标，<strong>宏大却不够具体，因此缺乏坚持的动力</strong>；</li><li>这次来细化下目标吧!</li></ul></div><h3 id="坚持阅读、写作">坚持阅读、写作</h3><ul><li><p>每周 <font color="#FF1E10"><em><strong>1+</strong></em></font> 篇博客, 不限题材（算命的、风水的都行）</p></li><li><p>每月阅读 <font color="#FF1E10"><em><strong>1+</strong></em></font> 本书籍 （技术 or 思维 …）</p></li><li><p>每月做 <font color="#FF1E10"><em><strong>1+</strong></em></font> 篇陌生技术的积累（前沿的、其他行业的）</p></li><li><p>尝试捣鼓一些小玩意，如破解插件、工具脚本，<strong>并将这些成果发布在开源网站上!</strong></p></li></ul><hr><div class="admonition note"><p class="admonition-title">以下 写于2021年国庆</p><p><em>希望在三年后(2024.10)，能够达到如下的水平</em></p></div><h3 id="精通2-脚本语言">精通2+ 脚本语言</h3><ul><li><code>python 2/3</code> ➜ 使用层面 ✔</li><li><code>JS/TS</code></li></ul><h3 id="精通1-静态类型语言">精通1+ 静态类型语言</h3><ul><li><s><code>C/C++</code></s> ➜ <code>C++ 11/14/17</code></li></ul><h3 id="精通3-Gameplay模块"><s>精通3+ Gameplay模块</s></h3><ul><li>熟悉常见 Gameplay 模块 ✔</li></ul><h3 id="手写一套基于OpenGL的渲染管线"><s>手写一套基于OpenGL的渲染管线</s></h3><p>基于引擎实现具体中小模块的 <strong>增删查改</strong></p><ul><li><s>Shader (compiler and manager)</s> ➜ cross-platform shadercompiler</li><li><s>Texture</s> ➜ texture-budget</li><li>Camera</li><li><s>Lighting</s> ➜ Cluster Lighting</li><li><s>Shadows</s> ➜ CSM</li><li><s>Model/Mesh</s> ➜ Culling</li><li>Instancing</li><li><s>Postprocess</s>  ➜ SSR</li><li>Animation</li><li>…</li></ul><ul><li>Editor (Image, Scene, Model…) ✔</li><li>Debug Tools ➜ ImGUI、Tracy、RenderDoc…  ✔</li></ul><h3 id="图形引擎其他">图形引擎其他</h3><ul><li>良好的数学基础</li><li><s>图形学基础</s> ➜ GAMES</li><li>UE4/Unity的学习借鉴</li><li>前沿技术的积累</li></ul><h3 id="Learning-and-Coding">Learning and Coding</h3><ul><li>Reading Paper (GDC…)</li><li>Reading Document (API…)</li><li><s>Code review</s> ➜ MR ✔</li><li>Blog Recording (Markdown!) ✔</li><li>Learn from open-source</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人日志 </category>
          
          <category> 个人日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> linux </tag>
            
            <tag> Compiler </tag>
            
            <tag> OpenGL </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Algorithm】BinaryTree</title>
      <link href="/posts/1E2J1Y0/"/>
      <url>/posts/1E2J1Y0/</url>
      
        <content type="html"><![CDATA[<p><code>这篇文章是大学写的</code></p><h2 id="二叉搜索树">二叉搜索树</h2><h3 id="1-0-定义">1.0 定义</h3><ul><li>每个节点包含属性left,right和p，分别指向左右子节点和父节点</li><li>二叉搜索树的性质: x.left&lt;= x &lt;= x.right； 左子树&lt;父节点&lt;右子树</li><li>基本操作与树的高度有关，即O(lgn)</li></ul><table><thead><tr><th>数据结构</th><th>查找</th><th>插入,删除</th></tr></thead><tbody><tr><td>数组</td><td>O(n)</td><td>O(n)</td></tr><tr><td>有序数组</td><td>O(lgn)</td><td>O(n)</td></tr><tr><td>二叉树</td><td>O(lgn)</td><td>O(lgn)</td></tr></tbody></table><pre><code class="language-c">struct Node {    int val;    struct Node* left;    struct Node* right;    Node(int x):        val(x), left(nullptr), right(nullptr) {}};</code></pre><pre><code class="language-c">//定义二叉树类型typedef Node TNode;typedef Node* pNode;class AVL { // 平衡二叉树public:    pNode root;    AVL() {root = nullptr;};    ~AVL() {delete root;};    int empty() {return (root==nullptr);};    int maxDepth(pNode p); // 该节点的最大深度    int minDepth(pNode p); // 该节点的最小深度    int findMax(); // 二叉树最大值    int findMin(); // 二叉树最小值    pNode search(int x);    pNode _search(pNode p, int x);    void insert(int x);    pNode findParent(pNode p); // 返回该节点的父节点    pNode successor(int x); // 返回节点x的后继节点    void Delete(int x); // 删除值为x的节点    void levelOrder(); // 层次遍历，用换行表示层数递进    void preOrder(pNode p); // 前序遍历    void inOrder(pNode p); // 中序遍历    void postOrder(pNode p); // 后序遍历};</code></pre><h3 id="2-0-查找二叉树的最大最小值">2.0 查找二叉树的最大最小值</h3><ul><li>最小值一定在树的最左节点，最大值一定在树的最右节点</li><li>不停向左(右)子节点搜索直到NULL即可</li></ul><pre><code class="language-c">int AVL::findMax() {    pNode p = root;    while (p-&gt;right)        p = p-&gt;right;    return p-&gt;val;}int AVL::findMin() {    pNode p = root;    while (p-&gt;left)        p = p-&gt;left;    return p-&gt;val;}</code></pre><h3 id="2-1-返回二叉树的最大、最小深度">2.1 返回二叉树的最大、最小深度</h3><ul><li><p>深度Depth定义：根节点root到叶子节点的距离</p></li><li><p>最大深度：即不断返回左右子树的深度中的较大值+1，递归实现</p></li><li><p>最小深度：即不断返回左右子树的深度中的较小值+1，递归实现</p><ul><li><strong>特殊情况：根节点只有一个子节点的时候，最小深度不是1，因为根节点不是叶子节点！</strong></li><li>处理方式：只有一个孩子，其最小深度就是该子节点的最小深度+1</li></ul></li></ul><pre><code class="language-c">int AVL::maxDepth(pNode p){    if (!p) return 0;    return max(maxDepth(p-&gt;right), maxDepth(p-&gt;left)) + 1;}int AVL::minDepth(pNode p) {    // 深度的定义：p到某个叶子节点的距离;    // 因此当p只有一个孩子时,它的深度并不是1    if (!p) return 0;    if (p-&gt;right &amp;&amp; p-&gt;left) // 有两个孩子，返回较小的深度        return min(minDepth(p-&gt;left), minDepth(p-&gt;right)) + 1;    else // 只有一个孩子，返回此孩子的深度        return minDepth(p-&gt;right) + minDepth(p-&gt;left) + 1;}</code></pre><h3 id="2-2-二叉树的查找">2.2 二叉树的查找</h3><ul><li>search(x)：查找key为x的节点，返回其指针</li><li>先和根节点比较，小的话去左子树搜，大的话去右子树搜，等于则返回</li></ul><pre><code class="language-c">pNode AVL::_search(pNode p, int x) {    if (p-&gt;val == x)        return p;    if (x &gt; p-&gt;val)        return _search(p-&gt;right, x);    return _search(p-&gt;left, x);}pNode AVL::search(int x) {    return _search(root, x);}</code></pre><h3 id="2-2-二叉树的后继节点">2.2 二叉树的后继节点</h3><blockquote><p>x的后继节点(successor node): key值大于x的节点中key最小的一个<br>x的前驱节点(prior node): key值小于x的节点中key最大的一个</p></blockquote><ul><li><p>查找x的后继节点，要对x进行讨论：</p></li><li><p>x有右子节点，那么后继节点是右子节点的最左子节点</p></li><li><p>x没有右子节点，再分两种讨论</p><ul><li>x自身是左子节点，那么后继节点是它的父节点</li><li>x自身是右子节点，那么后继节点是根节点，且必须满足x小于根节点，否则x没有后继节点<br><img src="https://img-blog.csdnimg.cn/2019051102103576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_5,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><pre><code class="language-c">pNode AVL::successor(int x) {    // 后继节点，大于x中最下的那个    pNode p = search(x);    pNode tmp;    if (p == root &amp;&amp; !p-&gt;right) // 根节点且没有右孩子        return nullptr;    if (p-&gt;right) { // 如果p有右孩子，那么后继节点就是右孩子的最左孩子        tmp = p-&gt;right;        while (tmp-&gt;left)            tmp = tmp-&gt;left;        return tmp;    } else { // p没有右孩子        pNode par = findParent(p);        if (p == par-&gt;left) { // p自身是左孩子            return par;        } else { // p自身是右孩子, 返回层数最靠近p的有左孩子de节点            if (p-&gt;val &gt; root-&gt;val)                return nullptr;            pNode ppar = findParent(par);            while (ppar) {                if (par == ppar-&gt;left)                    return ppar;                par = ppar;                ppar = findParent(ppar);            }            return nullptr;        }    }}</code></pre><h3 id="2-3-二叉树的插入和删除">2.3 二叉树的插入和删除</h3><ul><li><p>insert(x):插入新节点，同时维持二叉树的性质</p><ul><li>若树空，直接插入root</li><li>若树不空，通过不断和左右孩子比较，往下移动直到找出合适的位置<br><img src="https://img-blog.csdnimg.cn/20190507225047515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><pre><code class="language-c">void AVL::insert(int x) {    pNode p = new TNode(x);    if (!root) {        root = p;        return;    }    pNode tmp = root;    pNode par;    while (tmp) {        par = tmp;        if (tmp-&gt;val &lt; x) {            tmp = tmp-&gt;right;        } else {            tmp = tmp-&gt;left;        }    }    if (par-&gt;val &gt; x) {        par-&gt;left = p;    } else {        par-&gt;right = p;    }}</code></pre><ul><li><p>delete(x): 删除已存在的某个节点x，同时维持二叉树的性质</p><ul><li><p>若x是根节点，直接删除</p></li><li><p>若x只有一个孩子，用该子节点替换x</p></li><li><p>若x有两个孩子，找到x的<strong>后继节点nex</strong>并替换x</p><ul><li>先用nex的key替换x的key，接着删除nex节点即可</li><li>若nex是它父节点的左孩子，那么把nex的左孩子顶上来</li><li>若nex是它父节点的右孩子，那么把nex的右孩子顶上来</li></ul></li></ul></li></ul><pre><code class="language-c">void AVL::Delete(int x) {    pNode p = search(x);    if (!p) {        cout &lt;&lt; "Not Existed" &lt;&lt; endl;        return;    }    // case 1: p 没有孩子节点， 直接删除    if (!p-&gt;left &amp;&amp; !p-&gt;right) {        if (p == root)            root = nullptr;        else {            pNode par = findParent(p);            if (par-&gt;right == p)                par-&gt;right = nullptr;            else                par-&gt;left = nullptr;        }    } else if (p-&gt;left &amp;&amp; !p-&gt;right) {        // case 2: 只有一个左孩子，替换即可        if (p == root)            root = p-&gt;left;        else {            pNode par = findParent(p);            if (par-&gt;right == p)                par-&gt;right = p-&gt;left;            else                par-&gt;left = p-&gt;left;        }    } else if (p-&gt;right &amp;&amp; !p-&gt;left) {        // case 3: 只有一个右孩子，替换即可        if (p == root)            root = p-&gt;right;        else {            pNode par = findParent(p);            if (par-&gt;right == p)                par-&gt;right = p-&gt;right;            else                par-&gt;left = p-&gt;right;        }    } else {        // case 4: 有两个孩子, 把它的后继节点替换到该位置即可        pNode suc = successor(p-&gt;val);        int key = suc-&gt;val;        Delete(key);        p-&gt;val = suc-&gt;val;    }}</code></pre><h3 id="二叉树的各种遍历">二叉树的各种遍历</h3><table><thead><tr><th>遍历方式</th><th>遍历顺序</th><th>应用和意义</th></tr></thead><tbody><tr><td>层次遍历</td><td>按一层一层遍历</td><td>符合人的直观感受</td></tr><tr><td>前序遍历</td><td>根结点 —&gt; 左子树 —&gt; 右子树</td><td><strong>打印目录结构</strong>：如每个文件夹下的文件</td></tr><tr><td>中序遍历</td><td>左子树—&gt; 根结点 —&gt; 右子树</td><td><strong>编译底层</strong>：实现表达式树</td></tr><tr><td>后序遍历</td><td>左子树 —&gt; 右子树 —&gt; 根结点</td><td><strong>回溯法:</strong> 实则就是采用后序遍历的形式</td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20190511005459953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_1,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td><td></td></tr></tbody></table><pre><code class="language-c">层次遍历：1 2 3 4 5 6 7 8前序遍历：1 2 4 5 7 8 3 6中序遍历：4 2 7 5 8 1 3 6后序遍历：4 7 8 5 2 6 3 1</code></pre><p><strong>层次遍历</strong></p><ul><li>通过队列实现，每搜索一个节点，将它的孩子按先左后右的顺序加入队列；</li><li>这样保证了  1：层数越低的越先搜索； 2：左子树先于右子树搜索</li></ul><pre><code class="language-c">void AVL::levelOrder(){    if (empty()) {        cout &lt;&lt; "empty Tree" &lt;&lt; endl;        return;    }    queue&lt;pNode&gt; Queue;    queue&lt;int&gt; Level;    Queue.push(root); // 记录节点    Level.push(0); // 记录层数    pNode p;    int h;    int last_h = 0;    while (!Queue.empty()) {        p = Queue.front();        h = Level.front();        if (last_h &lt; h )            cout &lt;&lt; endl;        cout &lt;&lt; p-&gt;val &lt;&lt; ' ';        if (p-&gt;left) {            Queue.push(p-&gt;left);            Level.push(h+1);        }        if (p-&gt;right) {            Queue.push(p-&gt;right);            Level.push(h+1);        }        Queue.pop();        Level.pop();        last_h = h;    }    cout &lt;&lt; endl;}</code></pre><p><strong>前序遍历</strong></p><ul><li>搜索顺序：根结点 —&gt; 左子树 —&gt; 右子树</li><li>算法实现：1.访问根节点 2.前序遍历左节点 3.前序遍历右节点</li></ul><pre><code class="language-c">void AVL::preOrder(pNode p) {    // 先序遍历：根-&gt;左右节点    if (!p)        return;    cout &lt;&lt; p-&gt;val &lt;&lt; ' ';    preOrder(p-&gt;left);    preOrder(p-&gt;right);}</code></pre><p><strong>中序遍历</strong></p><ul><li>搜索顺序：左子树 —&gt; 根结点 —&gt; 右子树</li><li>算法实现：1.前序遍历左节点 2.访问根节点 3.后序遍历右节点</li></ul><pre><code class="language-c">void AVL::inOrder(pNode p) {    // 中序遍历：左-&gt;根-&gt;右    if (!p)        return;    inOrder(p-&gt;left);    cout &lt;&lt; p-&gt;val &lt;&lt; ' ';    inOrder(p-&gt;right);}</code></pre><p><strong>后序遍历</strong></p><ul><li>搜索顺序：左子树 —&gt; 右子树 —&gt; 根节点</li><li>算法实现：1.前序遍历左节点 2.后序遍历右节点 3.访问根节点</li></ul><pre><code class="language-c">void AVL::postOrder(pNode p) {    // 后序遍历：左右节点-&gt;根    if (!p)        return;    postOrder(p-&gt;left);    postOrder(p-&gt;right);    cout &lt;&lt; p-&gt;val &lt;&lt; ' ';}</code></pre><h3 id="3-0-扩展概念">3.0 扩展概念</h3><h4 id="满二叉树">满二叉树</h4><ul><li>顾名思义：每层铺满的二叉树，n层满二叉树有2^n-1个节点<br><img src="https://img-blog.csdnimg.cn/20190511013218832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="完全二叉树">完全二叉树</h4><ul><li>即倒数第二层以上都铺满，最后一层紧左边铺的二叉树<br><img src="https://img-blog.csdnimg.cn/20190511013303474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h4 id="平衡二叉树（AVL）">平衡二叉树（AVL）</h4><p>递归地满足：左右子树高度差不超过1的树<br><strong>为什么需要AVL?</strong></p><ul><li>因为当二叉树形似链表时，查找效率从O(lgn)变成O(n)，所以想办法使得树的高度尽量平衡<br><img src="https://img-blog.csdnimg.cn/20190921224122215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1aGFvMTk5ODA5MDk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>平衡因子：</strong> 某节点的左右子树高度之差<br><strong>二叉树的整个插入过程，分为四种形态：</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】pyautogui</title>
      <link href="/posts/2KGMM94/"/>
      <url>/posts/2KGMM94/</url>
      
        <content type="html"><![CDATA[<p>Python纯GUI自动化工具<span id="more"></span></p><div class="admonition note"><p class="admonition-title">备注</p><ul><li>这篇是大学于CSDN所写，移植过来</li><li>借助 pyautogui 实现鼠标键盘控制，实现一些自动化操作</li></ul></div><p>pyautogui是一个可以控制鼠标和键盘的python库，类似的还有pywin32。</p><h2 id="pyautogui的安装">pyautogui的安装</h2><p><code>pip3 install python3-xlib</code> 依赖库<br><code>sudo apt-get install scrot</code> 依赖库<br><code>pip3 install pyautogui</code>　python3下安装pyautogui库<br><code>import pyautogui</code> 引入该库</p><h2 id="pyautogui的使用">pyautogui的使用</h2><h3 id="保护措施">保护措施</h3><p>为了防止pyautogui夺取了鼠标的控制权导致我们无法关掉该程序，它提供了一个保护措施，即把鼠标移到最左上角，此时程序报错退出；<br>默认FAILSAFE=True，保护模式开启<br><code>FAILSAFE = False</code> 关闭保护措施</p><h3 id="获取屏幕信息">获取屏幕信息</h3><p><code>size()</code> 获取当前屏幕的分辨率，如(1920,1080)二元组<br><strong>注意：屏幕左上角是原点(0,0)，整个屏幕相当于第一象限</strong><br><code>position()</code> 获取鼠标当前坐标<br><code>onScreen(x,y)</code> 判断点(x,y)是否在屏幕范围内，如负值一定返回False</p><h3 id="移动鼠标">移动鼠标</h3><p><code>moveTo(x,y,duration=0.25)</code> 用0.25s的时间将鼠标移到(x,y)位置<br><code>moveRel(x,y,duration=0.25)</code> 以鼠标所在位置为原点，将鼠标移动到(x,y)处</p><ul><li>下面代码，让鼠标在指定位置绕一个正方形转动１０圈</li></ul><pre><code class="language-python">import pyautoguifor i in range(10):      pyautogui.moveTo(300, 300, duration=0.25)      pyautogui.moveTo(400, 300, duration=0.25)      pyautogui.moveTo(400, 400, duration=0.25)      pyautogui.moveTo(300, 400, duration=0.25)</code></pre><ul><li>下面代码，让鼠标绕当前位置绕正方形转１０圈</li></ul><pre><code class="language-python">import pyautoguifor i in range(10):    pyautogui.moveRel(100, 0,  duration=0.25)    pyautogui.moveRel(0, 100,  duration=0.25)    pyautogui.moveRel(-100, 0, duration=0.25)    pyautogui.moveRel(0, -100, duration=0.25)</code></pre><h3 id="鼠标事件">鼠标事件</h3><p><strong>点击鼠标</strong><br><code>click(x, y, button='left', click=3, interval=0.5)</code></p><ul><li>button有３个选项:left,middle,right，不加则默认点击鼠标左键</li><li>click表示单击次数</li><li>interval表示每次单击之间的时间间隔</li><li>click()函数实际由mouseDown()和mouseUp()组成，即按下和松开；<br><code>pyautogui.doubleClick()</code> 鼠标双击，其实就是执行两次click()函数。<br><code>pyautogui.rightClick()</code> 右击<br><code>pyautogui.middleClick()</code> 中击</li></ul><p><strong>鼠标滚轮</strong><br><code>scroll(200)</code> 控制鼠标的滚轮，正值上滚，负值下滚</p><p><strong>拖拽鼠标</strong><br><code>dragTo()</code><br><code>dragRel()</code></p><ul><li>按下鼠标，并拖拽到指定位置，用法同moveTo(),moveRel()</li></ul><h3 id="窗口截图处理、寻找目标按钮">窗口截图处理、寻找目标按钮</h3><h5 id="截图功能">截图功能</h5><p><code>im = screenshot( region=(x,y,width,heigth) )</code> 截取以(x,y)为左上角且指定宽高的区域，不加参数，默认截取整个屏幕<br><code>im.getpixel( (x,y) )</code>　获取指定位置的像素，是一个三元组(注意输入格式)<br><code>pixelMatchesColor(x,y,(R,G,B))</code> 判断(x,y)处的像素是否等于RGB<br><code>im.save('xx.png')</code> 保存为x.png</p><h5 id="寻找按钮">寻找按钮</h5><p><code>locateOnscreen('xx.png')</code> 寻找屏幕中和xx.png一样的图标位置，是一个四元组<br><code>click( center( locateOnscreen('xx.png') ) )</code> 点击该图标的中心，center用来获取图标中心点的坐标</p><ul><li>比如把网易云音乐的应用存为music.png，上述就执行自动点击网易云的图标</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】tkinter</title>
      <link href="/posts/1AMJ55J/"/>
      <url>/posts/1AMJ55J/</url>
      
        <content type="html"><![CDATA[<p>python + tkinter 实现绘图板<span id="more"></span></p><div class="admonition note"><p class="admonition-title">备注</p><ul><li>这篇是大学于CSDN所写，移植过来</li><li>背景是课程作业</li></ul></div><h2 id="python-tkinter实现绘图板">python+tkinter实现绘图板</h2><p>github项目地址: <a href="https://github.com/593413198/DrawingBoard">593413198/DrawingBoard</a></p><p><strong>创建时间：</strong><br><code>2019/5/10</code></p><p><strong>搭建环境：</strong><br><code>Ubuntu 18.04 + python 3.6 + tkinter</code></p><p><strong>使用指南：</strong></p><p><img src="/images/tkinter.png" alt=""></p><p>上方菜单提供了用户界面的所有操作；<br>下方文本框提供了命令行接口，按"执行命令"按钮即可执行指令<br>最底部显示canvas上的所有图元，包括 “类型”+“ID”**</p><p><strong>实现功能：</strong></p><ul><li>重置画布 resetCanvas width height<ul><li>删除canvas所有元素，然后重置窗口大小即可(canvas是始终铺满窗口的)</li></ul></li><li>保存画布 saveCanvas name.bmp<ul><li>因为linux下通过截屏实现，所有保存的画布实际是整个屏幕</li></ul></li><li>设置画笔颜色 setColor R G B<ul><li>tkinter内使用16进制，要转换</li></ul></li><li>设置画笔粗细 setWidth width</li><li>绘制线段 drawLine id x1 y1 x2 y2 algorithm<ul><li>Bresenham</li><li>DDA</li></ul></li><li>绘制椭圆 drawEllipse id x y rx ry<ul><li>中点圆生成算法</li></ul></li><li>绘制多边形 drawPolygon id n x1 y1 x2 y2 … xn yn<ul><li>通过Bresenham绘制多条线段即可</li></ul></li><li>对图元平移 translate id dx dy</li><li>对图元旋转 rotate id x y r</li><li>对图元缩放 scale id x y s</li></ul><p><strong>代码架构：</strong></p><ul><li>第三方库</li></ul><pre><code class="language-python">from tkinter import *import tkinter.messagebox as messagebox # 弹窗import pyscreenshot as ImageGrab # 截图功能 for linux#from PIL import ImageGrab # 截图功能 for MacOS and Windows</code></pre><ul><li>窗口及菜单</li></ul><pre><code class="language-python">window = Tk()  # 主窗口windowcanvas = Canvas(window, ...) # 主画布canvasmenu = Menu(windows) # 顶部主菜单menuentry = Entry(..) # 接受命令行指令的输入button = Button(..) # 读入指令并执行</code></pre><ul><li>全局变量</li></ul><pre><code class="language-python">Type_draw # 记录画图的类型  1:直线 2:点 3:椭圆Flag_draw # 记录是否允许画图  0:不允许 1:允许Color_pen # 画笔颜色 采用16进制表示Width_pen # 画笔粗细</code></pre><ul><li>鼠标事件</li></ul><pre><code class="language-python">onLeftDown()  # 鼠标左键单击，允许开始画图onLeftMove()  # 鼠标左键拖动，开始画图onLeftUp()    # 鼠标左键松开，停止画图</code></pre><ul><li>绘图算法</li></ul><pre><code class="language-python">Bresenham() # bresenham算法画直线Draw_ellipse() # 中点圆生成算法画椭圆</code></pre><ul><li>相关函数</li></ul><pre><code class="language-python">toHex() # 将RGB转化成十六进制色彩表示rotate() # 旋转指定点execute() # 读入命令行并执行</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Algorithm】Graphs</title>
      <link href="/posts/2W1G2XP/"/>
      <url>/posts/2W1G2XP/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">备注</p><ul><li>这篇是大学于CSDN所写，移植过来</li></ul></div><h2 id="图算法的总结和实现">图算法的总结和实现</h2><h3 id="1-0-图的表示">1.0 图的表示</h3><ul><li>图通常用两种数据结构表示：<strong>邻接矩阵</strong>-&gt;稠密图、<strong>邻接链表</strong>-&gt;稀疏图</li><li>对于图 G = (V, E) ，V是点集，E是边集，|V| |E|分别表示点、边的数目<ul><li>稀疏图：边数很少的图</li><li>稠密图：边数接近|V|^2的图（一个图边数最多是点数的平方，只考虑单边图）</li></ul></li></ul><p><strong>邻接矩阵</strong></p><ul><li>维护一个n*n的数组，n是图的点数|V|</li><li>根据图的性质，数组对角线都为0，上下半角都对称</li><li>矩阵存储的特点，不论边数|E|多大，永远都开|V|*|V|大小的数组<br><img src="/images/graph-1.png" alt=""></li></ul><blockquote><p>因为矩阵的大小取决于|V|，所以当边数足够多的时候，采用邻接矩阵表示对空间的利用率最高</p></blockquote><br><p><strong>邻接链表</strong></p><ul><li>每个节点维护一个链表，储存所有与它邻接的点</li><li>所有链表的头部储存在一个数组中</li><li>数组空间O(|V|)，链表空间是O(|E|)、最坏空间是O(|V|^2)<br><img src="/images/graph-2.png" alt=""></li></ul><blockquote><p>因为链表大小取决于|E|，所以当边数足够小时，采用邻接链表表示</p></blockquote><p><strong>python代码如下：</strong></p><pre><code class="language-python">class Graph():    '''    无向图，点下标从0开始    G[x][y] = 1 存在边xy ; G[x][y] = 0 不存在边xy '''    def __init__(self,n):        # 声明一个有n个点的图G        self.n = n # |V|点数        self.node = [i for i in range(n)] # 所有点        self.G = [[0]*n for i in range(n)] # 邻接矩阵        self.d = [0]*n  # 记录宽搜中每个点到起点的距离        self.order = [] # 记录深搜的顺序    def add(self,x,y,w=0):        # 添加一条(x,y)的无向边        # 不输入边权重的情况默认为1        self.G[x][y] = 1 if not w else w        self.G[y][x] = 1 if not w else w    def remove(self,x,y):        # 删除一条(x,y)的无向边        self.G[x][y] = 0        self.G[y][x] = 0    def neighbour(self,x):        # 返回与x邻接的点        # rtype: 列表        ans = []        for i in range(self.n):            if self.G[x][i]:                ans.append(i)        return ans                def isEdge(self,x,y):        # 判断点x,y是否邻接        return self.G[x][y]</code></pre><br><h3 id="1-1-图的宽搜和深搜">1.1 图的宽搜和深搜</h3><ul><li><strong>BFS：广度优先搜索</strong><ul><li>采用优先队列，先将起点x入队列</li><li>不断从队列中取出元素，访问其所有的邻点，再将其中未访问过的邻点加入队列</li><li>当队列空时搜索结束</li></ul></li><li><strong>DFS：深度优先搜索</strong><ul><li>深搜的顺序不是唯一的；从任一节点开始都可以</li><li>对某一节点，只要找到一个邻点，就对邻点继续搜索邻点的邻点</li><li>理论上的深搜，是对所有节点执行一次上一步骤，这样保证了所有节点都能被搜索完，实际操作中可以维护一个set来记录已经访问过的节点</li></ul></li></ul><pre><code class="language-c">    以1为起点的BFS路径: 1 2 5 3 4    以1为起点的DFS路径: 1 2 3 4 5</code></pre><p><strong>python代码如下:</strong></p><pre><code class="language-python"># 广度优先搜索def BFS(self,x):        # 从点x开始宽搜        vis = [0]*self.n # 记录节点是否搜索过        Q = [x]        while Q:            v = Q.pop(0)            vis[v] = 1            for i in self.neighbour(v): # neighbour表示v的邻点的集合                if not vis[i]:                    Q.append(i)                    self.d[i] = self.d[v] + 1                    vis[i] = 1</code></pre><pre><code class="language-python"># 深度优先搜索def DFS(self,x):        # 从点x开始深搜        vis = [0]*self.n  # 记录节点是否搜索过        def dfs(node):            vis[node] = 1            self.order.append(node)            for i in self.neighbour(node):                 if not vis[i]:                    dfs(i)        dfs(x)        for i in self.node:            if not vis[i]:                dfs(i)</code></pre><h3 id="1-2-图的最短路径算法">1.2 图的最短路径算法</h3><ul><li><strong>单源最短路径问题</strong>：求出某一节点到其他所有节点的最短距离<ul><li>Dijkstra算法</li><li>Bellman-Ford算法</li></ul></li><li><strong>所有节点对最短路径问题</strong>：求出每个节点到其他所有节点的最短距离<ul><li>Floyd算法<br><br></li></ul></li></ul><h4 id="Dijkstra算法">Dijkstra算法</h4><ul><li>给定某一起点x，计算它到所有节点的最短距离<ul><li>dist[v] 记录起点到点v的最短距离，即最终返回结果</li><li>S 一个集合，存放已经处理过的节点</li><li>初始状态：令起点的dist为0，它的邻点的dist就是两点距离，其他节点的dist赋为无穷大</li><li>循环过程：不断取当前dist最小的节点v出来，对它的邻点i做<strong>松弛</strong>操作，当前最小节点视为已处理节点，放入集合S<ul><li><strong>松弛</strong>： <code>if dist[i] &gt; dist[v] + G[i][v]  { dist[i] = dist [v] + G[i][v] }</code></li></ul></li><li>终止状态：所有节点都已放入S，即都处理完毕</li></ul></li></ul><pre><code class="language-python"># dijkstra算法的python实现def dijkstra(self,x):        # dijkstra算法求x到所有节点的最短路径,采用贪心策略        dist = [99999]*self.n        S = set([x]) # 记录已经找到最短路径的节点        for i in self.neighbour(x):            dist[i] = self.G[x][i]        dist[x] = 0        while len(S) != self.n:            # 找到当前距离最小的点，这里用到最下优先队列            MIN = 99999            MIN_i = 0            for i in range(self.n):                if dist[i] &lt; MIN and i not in S:                    MIN = dist[i]                    MIN_i = i            # 松弛relax操作            S.add(MIN_i)            for i in self.neighbour(MIN_i):                if dist[i] &gt; dist[MIN_i] + self.G[i][MIN_i]:                    dist[i] = dist[MIN_i] + self.G[i][MIN_i]        return dist        </code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSDN】进程和线程的深入理解</title>
      <link href="/posts/2TKZZE3/"/>
      <url>/posts/2TKZZE3/</url>
      
        <content type="html"><![CDATA[<div class="admonition note"><p class="admonition-title">备注</p><ul><li>这篇是大学于CSDN所写，移植过来</li><li>回头看有点肤浅，但是这种类比学习的思维还是很难得呀</li></ul></div><h2 id="下面是抽象类比：">下面是抽象类比：</h2><p><code>单CPU</code>：一台单核处理器计算机 =  一个车间；<br><code>多CPU</code>：一台多核处理器计算机 =  一座工厂；</p><p><code>进程</code>：一个车间 = 一个进程； （即一个运行的程序）<br><code>多进程</code>：一座工厂可以同时运行多个车间；<br><code>CPU和进程</code>：<strong>单CPU只能同时运行单个进程，多CPU可以同时运行多个进程</strong>。</p><p><code>线程</code>：车间内一个工人 = 一个线程；<br><code>进程与线程</code>：<strong>一个进程可以包括多个线程</strong>。</p><p><code>线程间内存共享</code>：车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。<br><strong>一个进程的内存空间是共享的，每个线程都可以使用这些共享内存</strong>。</p><p><code>内存安全</code>：可是，每个车间容纳大小不同，有的最多只能容纳一个人。车间人满的时候，其他人就进不去了。<br><strong>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</strong></p><p><code>互斥锁</code>：一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。<br><strong>这就叫"互斥锁"–Mutex，防止两个线程同时读写某一块内存区域</strong>。</p><p><code>信号量</code>：这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。<br><strong>这种做法叫做"信号量"（Semaphore），用来保证多个线程不会互相冲突</strong>。</p><p><code>锁和信号量</code>：不难看出，互斥锁是信号量的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p><p><code>操作系统的资源分配与调度逻辑</code></p><ul><li>以多进程形式，允许多个任务同时运行；</li><li>以多线程形式，允许单个任务分成不同的部分运行；</li><li>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</li></ul><h2 id="下面是严谨的解释：">下面是严谨的解释：</h2><h3 id="进程">进程</h3><p><code>进程是程序的一次执行过程</code>，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间，至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。</p><h3 id="线程">线程</h3><p><code>线程是CPU调度和分派的基本单位</code>，它可与同属一个进程的其他的线程<strong>共享</strong>进程所拥有的全部资源。</p><h3 id="进程和线程的关系">进程和线程的关系</h3><p><code>线程是进程的一部分</code><br><code>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</code></p><h3 id="进程和线程的区别">进程和线程的区别</h3><p>理解它们的差别，我从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）</p><p><code>根本区别</code>：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</p><p><code>开销方面</code>：每个进程都有独立的代码和数据空间（程序上下文），<strong>进程之间切换开销大</strong>；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），<strong>线程之间切换的开销小</strong></p><p><code>所处环境</code>：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p><p><code>内存分配</code>：系统为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（<strong>线程所使用的资源来自其所属进程的资源</strong>），线程组之间只能共享资源</p><p><code>包含关系</code>：线程是进程的一部分，所以<strong>线程也被称为轻权进程或者轻量级进程</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
